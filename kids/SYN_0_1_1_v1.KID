KIDS Distribution saved on May 04, 2018@12:34:48
synthetic data KIDS build
**KIDS**:SYN*0.1*1^

**INSTALL NAME**
SYN*0.1*1
"BLD",9635,0)
SYN*0.1*1^^0^3180504^y
"BLD",9635,1,0)
^^1^1^3180503^
"BLD",9635,1,1,0)
Synthetic patient loader - first released version
"BLD",9635,4,0)
^9.64PA^^
"BLD",9635,6.3)
2
"BLD",9635,"KRN",0)
^9.67PA^779.2^20
"BLD",9635,"KRN",.4,0)
.4
"BLD",9635,"KRN",.401,0)
.401
"BLD",9635,"KRN",.402,0)
.402
"BLD",9635,"KRN",.403,0)
.403
"BLD",9635,"KRN",.5,0)
.5
"BLD",9635,"KRN",.84,0)
.84
"BLD",9635,"KRN",3.6,0)
3.6
"BLD",9635,"KRN",3.8,0)
3.8
"BLD",9635,"KRN",9.2,0)
9.2
"BLD",9635,"KRN",9.8,0)
9.8
"BLD",9635,"KRN",9.8,"NM",0)
^9.68A^19^19
"BLD",9635,"KRN",9.8,"NM",1,0)
SYNFALG^^0^B115948190
"BLD",9635,"KRN",9.8,"NM",2,0)
SYNFAPT^^0^B88487131
"BLD",9635,"KRN",9.8,"NM",3,0)
SYNFCON^^0^B73890537
"BLD",9635,"KRN",9.8,"NM",4,0)
SYNFENC^^0^B113932042
"BLD",9635,"KRN",9.8,"NM",5,0)
SYNFGR^^0^B5593226
"BLD",9635,"KRN",9.8,"NM",6,0)
SYNFHIR^^0^B80488603
"BLD",9635,"KRN",9.8,"NM",7,0)
SYNFIMM^^0^B85486480
"BLD",9635,"KRN",9.8,"NM",8,0)
SYNFPAT^^0^B96241829
"BLD",9635,"KRN",9.8,"NM",9,0)
SYNFPR2^^0^B139580691
"BLD",9635,"KRN",9.8,"NM",10,0)
SYNFPRB^^0^B109125369
"BLD",9635,"KRN",9.8,"NM",11,0)
SYNFPUL^^0^B136655940
"BLD",9635,"KRN",9.8,"NM",12,0)
SYNFUTL^^0^B26727967
"BLD",9635,"KRN",9.8,"NM",13,0)
SYNFVF^^0^B31900460
"BLD",9635,"KRN",9.8,"NM",14,0)
SYNFVIT^^0^B133766199
"BLD",9635,"KRN",9.8,"NM",15,0)
SYNQLDM^^0^B124882724
"BLD",9635,"KRN",9.8,"NM",16,0)
SYNVPR^^0^B106058173
"BLD",9635,"KRN",9.8,"NM",17,0)
SYNDHP61^^0^B121842561
"BLD",9635,"KRN",9.8,"NM",18,0)
SYNDHP62^^0^B236098906
"BLD",9635,"KRN",9.8,"NM",19,0)
SYNDHPMAP^^0^B70163221
"BLD",9635,"KRN",9.8,"NM","B","SYNDHP61",17)

"BLD",9635,"KRN",9.8,"NM","B","SYNDHP62",18)

"BLD",9635,"KRN",9.8,"NM","B","SYNDHPMAP",19)

"BLD",9635,"KRN",9.8,"NM","B","SYNFALG",1)

"BLD",9635,"KRN",9.8,"NM","B","SYNFAPT",2)

"BLD",9635,"KRN",9.8,"NM","B","SYNFCON",3)

"BLD",9635,"KRN",9.8,"NM","B","SYNFENC",4)

"BLD",9635,"KRN",9.8,"NM","B","SYNFGR",5)

"BLD",9635,"KRN",9.8,"NM","B","SYNFHIR",6)

"BLD",9635,"KRN",9.8,"NM","B","SYNFIMM",7)

"BLD",9635,"KRN",9.8,"NM","B","SYNFPAT",8)

"BLD",9635,"KRN",9.8,"NM","B","SYNFPR2",9)

"BLD",9635,"KRN",9.8,"NM","B","SYNFPRB",10)

"BLD",9635,"KRN",9.8,"NM","B","SYNFPUL",11)

"BLD",9635,"KRN",9.8,"NM","B","SYNFUTL",12)

"BLD",9635,"KRN",9.8,"NM","B","SYNFVF",13)

"BLD",9635,"KRN",9.8,"NM","B","SYNFVIT",14)

"BLD",9635,"KRN",9.8,"NM","B","SYNQLDM",15)

"BLD",9635,"KRN",9.8,"NM","B","SYNVPR",16)

"BLD",9635,"KRN",19,0)
19
"BLD",9635,"KRN",19.1,0)
19.1
"BLD",9635,"KRN",101,0)
101
"BLD",9635,"KRN",409.61,0)
409.61
"BLD",9635,"KRN",771,0)
771
"BLD",9635,"KRN",779.2,0)
779.2
"BLD",9635,"KRN",870,0)
870
"BLD",9635,"KRN",8989.51,0)
8989.51
"BLD",9635,"KRN",8989.52,0)
8989.52
"BLD",9635,"KRN",8994,0)
8994
"BLD",9635,"KRN","B",.4,.4)

"BLD",9635,"KRN","B",.401,.401)

"BLD",9635,"KRN","B",.402,.402)

"BLD",9635,"KRN","B",.403,.403)

"BLD",9635,"KRN","B",.5,.5)

"BLD",9635,"KRN","B",.84,.84)

"BLD",9635,"KRN","B",3.6,3.6)

"BLD",9635,"KRN","B",3.8,3.8)

"BLD",9635,"KRN","B",9.2,9.2)

"BLD",9635,"KRN","B",9.8,9.8)

"BLD",9635,"KRN","B",19,19)

"BLD",9635,"KRN","B",19.1,19.1)

"BLD",9635,"KRN","B",101,101)

"BLD",9635,"KRN","B",409.61,409.61)

"BLD",9635,"KRN","B",771,771)

"BLD",9635,"KRN","B",779.2,779.2)

"BLD",9635,"KRN","B",870,870)

"BLD",9635,"KRN","B",8989.51,8989.51)

"BLD",9635,"KRN","B",8989.52,8989.52)

"BLD",9635,"KRN","B",8994,8994)

"MBREQ")
0
"QUES","XPF1",0)
Y
"QUES","XPF1","??")
^D REP^XPDH
"QUES","XPF1","A")
Shall I write over your |FLAG| File
"QUES","XPF1","B")
YES
"QUES","XPF1","M")
D XPF1^XPDIQ
"QUES","XPF2",0)
Y
"QUES","XPF2","??")
^D DTA^XPDH
"QUES","XPF2","A")
Want my data |FLAG| yours
"QUES","XPF2","B")
YES
"QUES","XPF2","M")
D XPF2^XPDIQ
"QUES","XPI1",0)
YO
"QUES","XPI1","??")
^D INHIBIT^XPDH
"QUES","XPI1","A")
Want KIDS to INHIBIT LOGONs during the install
"QUES","XPI1","B")
NO
"QUES","XPI1","M")
D XPI1^XPDIQ
"QUES","XPM1",0)
PO^VA(200,:EM
"QUES","XPM1","??")
^D MG^XPDH
"QUES","XPM1","A")
Enter the Coordinator for Mail Group '|FLAG|'
"QUES","XPM1","B")

"QUES","XPM1","M")
D XPM1^XPDIQ
"QUES","XPO1",0)
Y
"QUES","XPO1","??")
^D MENU^XPDH
"QUES","XPO1","A")
Want KIDS to Rebuild Menu Trees Upon Completion of Install
"QUES","XPO1","B")
NO
"QUES","XPO1","M")
D XPO1^XPDIQ
"QUES","XPZ1",0)
Y
"QUES","XPZ1","??")
^D OPT^XPDH
"QUES","XPZ1","A")
Want to DISABLE Scheduled Options, Menu Options, and Protocols
"QUES","XPZ1","B")
NO
"QUES","XPZ1","M")
D XPZ1^XPDIQ
"QUES","XPZ2",0)
Y
"QUES","XPZ2","??")
^D RTN^XPDH
"QUES","XPZ2","A")
Want to MOVE routines to other CPUs
"QUES","XPZ2","B")
NO
"QUES","XPZ2","M")
D XPZ2^XPDIQ
"RTN")
19
"RTN","SYNDHP61")
0^17^B121842561
"RTN","SYNDHP61",1,0)
SYNDHP61 ; Write To VistA ;5/4/18  10:43
"RTN","SYNDHP61",2,0)
 ;;1.0;DHP;;Jan 17, 2017;Build 2
"RTN","SYNDHP61",3,0)
 ;;Original routine authored by Andrew Thompson & Ferdinand Frankson of DXC Technology 2017-2018
"RTN","SYNDHP61",4,0)
 ;
"RTN","SYNDHP61",5,0)
 ; vitals update
"RTN","SYNDHP61",6,0)
VITUPD(RETSTA,DHPPAT,DHPSCT,DHPOBS,DHPUNT,DHPDTM,DHPROV,DHPLOC) ; vitals update
"RTN","SYNDHP61",7,0)
 ;
"RTN","SYNDHP61",8,0)
 ; Input:
"RTN","SYNDHP61",9,0)
 ;  DHPPAT  - patient ICN           (mandatory)
"RTN","SYNDHP61",10,0)
 ;  DHPSCT  - SNOMED CT code        (mandatory)
"RTN","SYNDHP61",11,0)
 ;  DHPOBS  - Observation Value     (mandatory)
"RTN","SYNDHP61",12,0)
 ;  DHPUNT  - Observation units     (mandatory)
"RTN","SYNDHP61",13,0)
 ;  DHPDTM  - Observation Date/Time (mandatory)
"RTN","SYNDHP61",14,0)
 ;  DHPROV  - provider              (mandatory)
"RTN","SYNDHP61",15,0)
 ;  DHPLOC  - location              (mandatory) 
"RTN","SYNDHP61",16,0)
 ; Output:   
"RTN","SYNDHP61",17,0)
 ;  1 - success
"RTN","SYNDHP61",18,0)
 ; -1 - failure
"RTN","SYNDHP61",19,0)
 ;
"RTN","SYNDHP61",20,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA="-1^Patient not recognised" Q
"RTN","SYNDHP61",21,0)
 ; set up array of allowed SCT codes
"RTN","SYNDHP61",22,0)
 ;
"RTN","SYNDHP61",23,0)
 D VITSCT
"RTN","SYNDHP61",24,0)
 ;
"RTN","SYNDHP61",25,0)
 I '$D(SCTA(DHPSCT)) S RETSTA="-1^SNOMED CT code not recognised as vitals" Q
"RTN","SYNDHP61",26,0)
 ; build FDA and update vitals file (FN)
"RTN","SYNDHP61",27,0)
 D VITFDA
"RTN","SYNDHP61",28,0)
 D UPDATE^DIE(,"FDA",,"ZZERR")
"RTN","SYNDHP61",29,0)
 S RETSTA=$S($D(ZZERR):-1,1:1)
"RTN","SYNDHP61",30,0)
 Q
"RTN","SYNDHP61",31,0)
 ;
"RTN","SYNDHP61",32,0)
VITSCT ; set up recognised SCT codes for VITALS
"RTN","SYNDHP61",33,0)
 ; map incoming SNOMED CT code to VistA Vital Type (file FN1)
"RTN","SYNDHP61",34,0)
 S SCTA(27113001)="9^Body weight"
"RTN","SYNDHP61",35,0)
 S SCTA(50373000)="8^Body height"
"RTN","SYNDHP61",36,0)
 S SCTA(75367002)="1^Blood pressure"
"RTN","SYNDHP61",37,0)
 S SCTA(78564009)="5^Pulse rate"
"RTN","SYNDHP61",38,0)
 S SCTA(386725007)="2^Body Temperature"
"RTN","SYNDHP61",39,0)
 S SCTA(86290005)="3^Respiration"
"RTN","SYNDHP61",40,0)
 S SCTA(48094003)="10^Abdominal girth measurement"
"RTN","SYNDHP61",41,0)
 S SCTA(21727005)="11^Audiometry"
"RTN","SYNDHP61",42,0)
 S SCTA(252465000)="21^Pulse oximetry"
"RTN","SYNDHP61",43,0)
 S SCTA(22253000)="22^Pain"
"RTN","SYNDHP61",44,0)
 ; map incoming SNOMED CT code to VistA Vital Type (file FN1)
"RTN","SYNDHP61",45,0)
 S SCTX(9)="27113001^Body weight"
"RTN","SYNDHP61",46,0)
 S SCTX(8)="50373000^Body height"
"RTN","SYNDHP61",47,0)
 S SCTX(1)="75367002^Blood pressure"
"RTN","SYNDHP61",48,0)
 S SCTX(5)="78564009^Pulse rate"
"RTN","SYNDHP61",49,0)
 S SCTX(2)="386725007^Body Temperature"
"RTN","SYNDHP61",50,0)
 S SCTX(3)="86290005^Respiration"
"RTN","SYNDHP61",51,0)
 S SCTX(10)="48094003^Abdominal girth measurement"
"RTN","SYNDHP61",52,0)
 S SCTX(11)="21727005^Audiometry"
"RTN","SYNDHP61",53,0)
 S SCTX(21)="252465000^Pulse oximetry"
"RTN","SYNDHP61",54,0)
 S SCTX(22)="22253000^Pain"
"RTN","SYNDHP61",55,0)
 Q
"RTN","SYNDHP61",56,0)
 ;
"RTN","SYNDHP61",57,0)
VITFDA ; build FDA array for Vitals
"RTN","SYNDHP61",58,0)
 K FDA,ZZERR,ORIEN
"RTN","SYNDHP61",59,0)
 S FN=120.5
"RTN","SYNDHP61",60,0)
 S DHPLOC=$G(DHPLOC,10000000286)
"RTN","SYNDHP61",61,0)
 S DHPROV=$G(DHPROV,101)
"RTN","SYNDHP61",62,0)
 S DHPOBS=$$SI2IMP(DHPSCT,DHPOBS)
"RTN","SYNDHP61",63,0)
 S ORIEN(1)=$$NEXTIEN()
"RTN","SYNDHP61",64,0)
 S PATIEN=$O(^DPT("AFICN",DHPPAT,""))
"RTN","SYNDHP61",65,0)
 S FDA(FN,"+1,",.01)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",66,0)
 S FDA(FN,"+1,",.02)=PATIEN
"RTN","SYNDHP61",67,0)
 S FDA(FN,"+1,",.03)=+SCTA(DHPSCT)
"RTN","SYNDHP61",68,0)
 S FDA(FN,"+1,",.04)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",69,0)
 S FDA(FN,"+1,",.05)=DHPLOC ;
"RTN","SYNDHP61",70,0)
 ;S PRVIEN="" I DHPROV'="" S PRVIEN=$O(^VA(200,"ANPI",DHPROV,"")) apply this fix
"RTN","SYNDHP61",71,0)
 ;S FDA(FN,"+1,",.06)=PRVIEN
"RTN","SYNDHP61",72,0)
 S FDA(FN,"+1,",.06)=DHPROV ; 
"RTN","SYNDHP61",73,0)
 S FDA(FN,"+1,",1.2)=DHPOBS
"RTN","SYNDHP61",74,0)
 Q
"RTN","SYNDHP61",75,0)
 ;
"RTN","SYNDHP61",76,0)
NEXTIEN() ; 
"RTN","SYNDHP61",77,0)
 ; Get new code IEN
"RTN","SYNDHP61",78,0)
 Q $O(^GMR(FN,9E29),-1)+1
"RTN","SYNDHP61",79,0)
 ;
"RTN","SYNDHP61",80,0)
SI2IMP(SCT,OBS) ; convert metric units to imperial
"RTN","SYNDHP61",81,0)
 ;
"RTN","SYNDHP61",82,0)
 N UNITS
"RTN","SYNDHP61",83,0)
 S UNITS=$$UP^XLFSTR(DHPUNT)
"RTN","SYNDHP61",84,0)
 I SCT=27113001,UNITS="KG" Q $J(OBS*2.20462,0,1)  ; weight kg to lbs
"RTN","SYNDHP61",85,0)
 I SCT=50373000,UNITS="CM" Q $J(OBS*0.393701,0,0) ; height cm to inches
"RTN","SYNDHP61",86,0)
 I SCT=386725007,UNITS="CEL" Q $J(OBS/5*9+32,0,1) ; celsius to fahrenheit
"RTN","SYNDHP61",87,0)
 Q OBS
"RTN","SYNDHP61",88,0)
 ;
"RTN","SYNDHP61",89,0)
 ;
"RTN","SYNDHP61",90,0)
 ; -------- problem/condition update
"RTN","SYNDHP61",91,0)
 ;
"RTN","SYNDHP61",92,0)
PROBUPD(RETSTA,DHPPAT,DHPSCT,DHPSDES,DHPROV,DHPDTM,DHPRID) ; problems update
"RTN","SYNDHP61",93,0)
 ;
"RTN","SYNDHP61",94,0)
 ; Input:
"RTN","SYNDHP61",95,0)
 ;  DHPPAT -   patient ICN                (mandatory)
"RTN","SYNDHP61",96,0)
 ;  DHPSCT -   SNOMED CT code             (mandatory)
"RTN","SYNDHP61",97,0)
 ;  DHPSDES -  SNOMED CT designation code (optional)      >>>not used in code below<<<
"RTN","SYNDHP61",98,0)
 ;  DHPROV -   Provider     (NPI)              (optional)
"RTN","SYNDHP61",99,0)
 ;  DHPDTM -   Observation Date/Time  (HL7)    (mandatory)
"RTN","SYNDHP61",100,0)
 ;  DHPRID -   DHP unique resource ID     (optional)
"RTN","SYNDHP61",101,0)
 ;               agency_facility          
"RTN","SYNDHP61",102,0)
 ;
"RTN","SYNDHP61",103,0)
 ; Output:   
"RTN","SYNDHP61",104,0)
 ;  1 - success
"RTN","SYNDHP61",105,0)
 ; -1 - failure
"RTN","SYNDHP61",106,0)
 ;
"RTN","SYNDHP61",107,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA="-1^Patient not recognised" Q
"RTN","SYNDHP61",108,0)
 ;
"RTN","SYNDHP61",109,0)
 ;I '$D(SCTA(DHPSCT)) S RETSTA="-1^SNOMED CT code not recognised as vitals" Q
"RTN","SYNDHP61",110,0)
 ; build FDA and update vitals file (FN)
"RTN","SYNDHP61",111,0)
 K LEX
"RTN","SYNDHP61",112,0)
 S LEX=$$CODE^LEXTRAN(DHPSCT,"SCT")
"RTN","SYNDHP61",113,0)
 I +LEX=-2 S RETSTA=LEX Q
"RTN","SYNDHP61",114,0)
 D PROBFDA
"RTN","SYNDHP61",115,0)
 D UPDATE^DIE(,"FDA",,"ZZERR")
"RTN","SYNDHP61",116,0)
 ;W ! ZW ZZERR
"RTN","SYNDHP61",117,0)
 S RETSTA=$S($D(ZZERR):-1,1:1)
"RTN","SYNDHP61",118,0)
 Q
"RTN","SYNDHP61",119,0)
 ;
"RTN","SYNDHP61",120,0)
 ;
"RTN","SYNDHP61",121,0)
PROBFDA ; build FDA array for Problems
"RTN","SYNDHP61",122,0)
 ;
"RTN","SYNDHP61",123,0)
 K FDA,ZZERR,ORIEN
"RTN","SYNDHP61",124,0)
 S P="|"
"RTN","SYNDHP61",125,0)
 S FN=9000011
"RTN","SYNDHP61",126,0)
 ;S DHPOBS=$$UNCNVT(DHPSCT,DHPOBS)
"RTN","SYNDHP61",127,0)
 S ORIEN(1)=$$NEXTIEN()
"RTN","SYNDHP61",128,0)
 S PATIEN=$O(^DPT("AFICN",DHPPAT,""))
"RTN","SYNDHP61",129,0)
 S MAPVUID=5217693 ; VUID for SNOMED CT to ICD-10-CM mapping 
"RTN","SYNDHP61",130,0)
 K LEX
"RTN","SYNDHP61",131,0)
 S DHPICD=$$GETASSN^LEXTRAN1(DHPSCT,MAPVUID)
"RTN","SYNDHP61",132,0)
 S DHPICD=$O(LEX(1,""))
"RTN","SYNDHP61",133,0)
 I DHPICD="" S DHPICD="R69."
"RTN","SYNDHP61",134,0)
 S DHPICD=+$$ICDDX^ICDEX(DHPICD,30)
"RTN","SYNDHP61",135,0)
 S FDA(FN,"+1,",.01)=DHPICD
"RTN","SYNDHP61",136,0)
 S FDA(FN,"+1,",.02)=PATIEN
"RTN","SYNDHP61",137,0)
 S FDA(FN,"+1,",.03)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",138,0)
 S FDA(FN,"+1,",.04)="P" ; or "F" personal history/family history
"RTN","SYNDHP61",139,0)
 ;S FDA(FN,"+1,",.05)=         ; provider narrative
"RTN","SYNDHP61",140,0)
 ;B
"RTN","SYNDHP61",141,0)
 S DHPLOC=+DHPRID
"RTN","SYNDHP61",142,0)
 S FDA(FN,"+1,",.06)=DHPLOC ; location
"RTN","SYNDHP61",143,0)
 S FDA(FN,"+1,",.07)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",144,0)
 S FDA(FN,"+1,",.08)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",145,0)
 S FDA(FN,"+1,",.13)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",146,0)
 S STATII=P_"A"_P_"I"_P
"RTN","SYNDHP61",147,0)
 S FDA(FN,"+1,",.12)=$S(STATII[(P_$G(DHPSTA)_P):DHPSTA,1:"A")
"RTN","SYNDHP61",148,0)
 S FDA(FN,"+1,",80001)=DHPSCT
"RTN","SYNDHP61",149,0)
 ;I '$D(DHPSCDES) D
"RTN","SYNDHP61",150,0)
 ;.N LEX
"RTN","SYNDHP61",151,0)
 ;.S LEX=$$CODE^LEXTRAN(DHPSCT,"SCT",,,,1)
"RTN","SYNDHP61",152,0)
 ;.;S DHPSCDES=""
"RTN","SYNDHP61",153,0)
 ;.S DHPSCDES=$P($G(LEX("P")),U,3)
"RTN","SYNDHP61",154,0)
 N LEX
"RTN","SYNDHP61",155,0)
 S LEX=$$CODE^LEXTRAN(DHPSCT,"SCT",,,1,1)
"RTN","SYNDHP61",156,0)
 S DHPSCDES=$P($G(LEX("P")),U,3)
"RTN","SYNDHP61",157,0)
 S LEXIEN=$P(LEX("P"),U,2)
"RTN","SYNDHP61",158,0)
 S EXPRSN=$P(LEX("P"),U)
"RTN","SYNDHP61",159,0)
 S PROVNAR=$$PROVNARTL(EXPRSN)
"RTN","SYNDHP61",160,0)
 S FDA(FN,"+1,",.05)=PROVNAR
"RTN","SYNDHP61",161,0)
 S FDA(FN,"+1,",1.01)=LEXIEN
"RTN","SYNDHP61",162,0)
 S FDA(FN,"+1,",80002)=DHPSCDES
"RTN","SYNDHP61",163,0)
 S FDA(FN,"+1,",80201)=$$HL7TFM^XLFDT(DHPDTM)
"RTN","SYNDHP61",164,0)
 S FDA(FN,"+1,",80202)="10D"
"RTN","SYNDHP61",165,0)
 S NUM=$O(^AUPNPROB("AA",PATIEN,DHPLOC,""),-1)
"RTN","SYNDHP61",166,0)
 S NUM=+$RE(+$RE(NUM))
"RTN","SYNDHP61",167,0)
 S NUM=$I(NUM)
"RTN","SYNDHP61",168,0)
 S FDA(FN,"+1,",.07)=NUM
"RTN","SYNDHP61",169,0)
 S PRVIEN="" I DHPROV'="" S PRVIEN=$O(^VA(200,"ANPI",DHPROV,""))
"RTN","SYNDHP61",170,0)
 S FDA(FN,"+1,",1.03)=PRVIEN
"RTN","SYNDHP61",171,0)
 S FDA(FN,"+1,",1.04)=PRVIEN
"RTN","SYNDHP61",172,0)
 S FDA(FN,"+1,",1.05)=PRVIEN
"RTN","SYNDHP61",173,0)
 ;W ! ZW FDA
"RTN","SYNDHP61",174,0)
 Q
"RTN","SYNDHP61",175,0)
PROVNARTL(EXPRSN) ; deal with provider narrative
"RTN","SYNDHP61",176,0)
 ;
"RTN","SYNDHP61",177,0)
 N PROVNAR
"RTN","SYNDHP61",178,0)
 I '$D(^AUTNPOV("B",EXPRSN)) D PROVNADD(EXPRSN)
"RTN","SYNDHP61",179,0)
 S PROVNAR=$O(^AUTNPOV("B",EXPRSN,""))
"RTN","SYNDHP61",180,0)
 Q PROVNAR
"RTN","SYNDHP61",181,0)
 ;
"RTN","SYNDHP61",182,0)
PROVNADD(EXPRSN) ;
"RTN","SYNDHP61",183,0)
 N PNIEN
"RTN","SYNDHP61",184,0)
 S PNIEN=$O(^AUTNPOV(99999999999),-1)+1
"RTN","SYNDHP61",185,0)
 S ^AUTNPOV(PNIEN,0)=EXPRSN
"RTN","SYNDHP61",186,0)
 S ^AUTNPOV("B",EXPRSN,PNIEN)=""
"RTN","SYNDHP61",187,0)
 Q
"RTN","SYNDHP61",188,0)
 ;
"RTN","SYNDHP61",189,0)
 ; -------- Immunization update
"RTN","SYNDHP61",190,0)
 ;
"RTN","SYNDHP61",191,0)
IMMUNUPD(RETSTA,DHPPAT,VISIT,IMMUNIZ,ANATLOC,ADMINRT,DOSE,EVENTDT,IMMPROV) ;Immunization update
"RTN","SYNDHP61",192,0)
 ;
"RTN","SYNDHP61",193,0)
 ; Input:
"RTN","SYNDHP61",194,0)
 ;  DHPPAT  - patient ICN  (mandatory)
"RTN","SYNDHP61",195,0)
 ;  VISIT   - visit ien    (mandatory)
"RTN","SYNDHP61",196,0)
 ;  IMMUNIZ - cvx code     (mandatory)
"RTN","SYNDHP61",197,0)
 ;  ANATLOC - anatomical location
"RTN","SYNDHP61",198,0)
 ;  ADMINRT - route of administration
"RTN","SYNDHP61",199,0)
 ;  DOSE    - dose
"RTN","SYNDHP61",200,0)
 ;  EVENTDT - event date/time (HL7 format)
"RTN","SYNDHP61",201,0)
 ;  IMMPROV - immunization provider (NPI)
"RTN","SYNDHP61",202,0)
 ;
"RTN","SYNDHP61",203,0)
 ; Output:   RETSTA
"RTN","SYNDHP61",204,0)
 ;  1 - success
"RTN","SYNDHP61",205,0)
 ; -1 - failure -1^message
"RTN","SYNDHP61",206,0)
 ;
"RTN","SYNDHP61",207,0)
 N IMMIEN
"RTN","SYNDHP61",208,0)
 ;
"RTN","SYNDHP61",209,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA="-1^Patient not recognised" QUIT
"RTN","SYNDHP61",210,0)
 ;
"RTN","SYNDHP61",211,0)
 I $G(IMMUNIZ)="" S RETSTA="-1^Immunization (CVX code) is required" QUIT
"RTN","SYNDHP61",212,0)
 S IMMIEN=$O(^AUTTIMM("C",IMMUNIZ,""))
"RTN","SYNDHP61",213,0)
 I IMMIEN="" S RETSTA="-1^Immunization (CVX code) not found" QUIT
"RTN","SYNDHP61",214,0)
 I +$$GET1^DIQ(9999999.14,IMMIEN_",",.07,"I") S RETSTA="-1^Immunization is inactive" QUIT
"RTN","SYNDHP61",215,0)
 ;
"RTN","SYNDHP61",216,0)
 I $G(VISIT)="" S RETSTA="-1^Visit IEN is required" QUIT
"RTN","SYNDHP61",217,0)
 I '$D(^AUPNVSIT(VISIT)) S RETSTA="-1^Visit not found" QUIT
"RTN","SYNDHP61",218,0)
 ;
"RTN","SYNDHP61",219,0)
 N PACKAGE,SOURCE,USER,ERRDISP,ZZERR,PPEDIT,ZZERDESC,ACCOUNT
"RTN","SYNDHP61",220,0)
 N IMMDATA,IMMPRVIEN,PPEDIT
"RTN","SYNDHP61",221,0)
 ;
"RTN","SYNDHP61",222,0)
 S RETSTA=1
"RTN","SYNDHP61",223,0)
 D SETUP
"RTN","SYNDHP61",224,0)
 QUIT:RETSTA=-1
"RTN","SYNDHP61",225,0)
 ;
"RTN","SYNDHP61",226,0)
 S RETSTA=$$DATA2PCE^PXAI("IMMDATA",PACKAGE,SOURCE,.VISIT,USER,$G(ERRDISP),.ZZERR,$G(PPEDIT),.ZZERDESC,.ACCOUNT)
"RTN","SYNDHP61",227,0)
 I $D(ZZERR) ZW ZZERR
"RTN","SYNDHP61",228,0)
 ; $$DATA2PCE Output:   
"RTN","SYNDHP61",229,0)
 ;+   1  if no errors and processed completely
"RTN","SYNDHP61",230,0)
 ;+  -1  if errors occurred but processed completely as possible
"RTN","SYNDHP61",231,0)
 ;+  -2  if could not get a visit
"RTN","SYNDHP61",232,0)
 ;+  -3  if called incorrectly
"RTN","SYNDHP61",233,0)
 QUIT
"RTN","SYNDHP61",234,0)
 ;
"RTN","SYNDHP61",235,0)
 ;
"RTN","SYNDHP61",236,0)
SETUP ; set data for $$DATA2PCE call
"RTN","SYNDHP61",237,0)
 ;
"RTN","SYNDHP61",238,0)
 S PACKAGE=507 ;PCE PATIENT CARE ENCOUNTER
"RTN","SYNDHP61",239,0)
 S SOURCE="DHP DATA INGEST"
"RTN","SYNDHP61",240,0)
 S USER=DUZ
"RTN","SYNDHP61",241,0)
 S ERRDISP=1 ;for testing only, set to null otherwise  <<<<<<<<<<<<<<<<<<<<<<<
"RTN","SYNDHP61",242,0)
 S PPEDIT=""
"RTN","SYNDHP61",243,0)
 S ACCOUNT=""
"RTN","SYNDHP61",244,0)
 ;
"RTN","SYNDHP61",245,0)
 S IMMDATA("IMMUNIZATION",1,"IMMUN")=IMMIEN
"RTN","SYNDHP61",246,0)
 ;don't send null data values to create records
"RTN","SYNDHP61",247,0)
 ; There are extra data elements here for possible future use
"RTN","SYNDHP61",248,0)
 I $G(IMMPROV)'="" D
"RTN","SYNDHP61",249,0)
 . S IMMPRVIEN=$O(^VA(200,"ANPI",IMMPROV,""))
"RTN","SYNDHP61",250,0)
 . QUIT:IMMPRVIEN=""
"RTN","SYNDHP61",251,0)
 . S IMMDATA("IMMUNIZATION",1,"ENC PROVIDER")=IMMPRVIEN
"RTN","SYNDHP61",252,0)
 S:$G(EVENTDT)'="" IMMDATA("IMMUNIZATION",1,"EVENT D/T")=$$HL7TFM^XLFDT(EVENTDT)
"RTN","SYNDHP61",253,0)
 S:$G(SERIES)'="" IMMDATA("IMMUNIZATION",1,"SERIES")=SERIES
"RTN","SYNDHP61",254,0)
 S:$G(REACTION)'="" IMMDATA("IMMUNIZATION",1,"REACTION")=REACTION
"RTN","SYNDHP61",255,0)
 S:$G(CONTRA)'="" IMMDATA("IMMUNIZATION",1,"CONTRAINDICATED")=CONTRA
"RTN","SYNDHP61",256,0)
 S:$G(DXCODE)'="" IMMDATA("IMMUNIZATION",1,"DIAGNOSIS")=DXCODE
"RTN","SYNDHP61",257,0)
 S:$G(COMMENT)'="" IMMDATA("IMMUNIZATION",1,"COMMENT")=COMMENT
"RTN","SYNDHP61",258,0)
 S:$G(LOTNUM)'="" IMMDATA("IMMUNIZATION",1,"LOT NUM")=LOTNUM
"RTN","SYNDHP61",259,0)
 S:$G(INFOSRC)'="" IMMDATA("IMMUNIZATION",1,"INFO SOURCE")=INFOSRC
"RTN","SYNDHP61",260,0)
 S:$G(ADMINRT)'="" IMMDATA("IMMUNIZATION",1,"ADMIN ROUTE")=ADMINRT
"RTN","SYNDHP61",261,0)
 S:$G(ANATLOC)'="" IMMDATA("IMMUNIZATION",1,"ANATOMIC LOC")=ANATLOC
"RTN","SYNDHP61",262,0)
 S:$G(DOSE)'="" IMMDATA("IMMUNIZATION",1,"DOSE")=DOSE
"RTN","SYNDHP61",263,0)
 S:$G(DOSEUNIT)'="" IMMDATA("IMMUNIZATION",1,"DOSE UNITS")=DOSEUNIT
"RTN","SYNDHP61",264,0)
 QUIT
"RTN","SYNDHP61",265,0)
 ;
"RTN","SYNDHP61",266,0)
 ; -------- Encounter update
"RTN","SYNDHP61",267,0)
 ;
"RTN","SYNDHP61",268,0)
ENCTUPD(RETSTA,DHPPAT,STARTDT,ENDDT,ENCPROV,CLINIC,SCTDX,SCTCPT) ;Encounter update
"RTN","SYNDHP61",269,0)
 ;return visit id/ien
"RTN","SYNDHP61",270,0)
 ;
"RTN","SYNDHP61",271,0)
 S U="^"
"RTN","SYNDHP61",272,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA="-1^Patient not recognised" QUIT
"RTN","SYNDHP61",273,0)
 ;
"RTN","SYNDHP61",274,0)
 I $G(ENCPROV)'="" D
"RTN","SYNDHP61",275,0)
 .S ENCPRVIEN=$O(^VA(200,"ANPI",ENCPROV,""))
"RTN","SYNDHP61",276,0)
 .QUIT:ENCPRVIEN=""
"RTN","SYNDHP61",277,0)
 S PATIEN=$O(^DPT("AFICN",DHPPAT,""),-1)
"RTN","SYNDHP61",278,0)
 S SOURCE="DHP DATA INGEST"
"RTN","SYNDHP61",279,0)
 S PACKAGE=507
"RTN","SYNDHP61",280,0)
 S LOCATION=$O(^SC("B",CLINIC,""))
"RTN","SYNDHP61",281,0)
 S USER=10000000292
"RTN","SYNDHP61",282,0)
 ;
"RTN","SYNDHP61",283,0)
 ;chop off seconds
"RTN","SYNDHP61",284,0)
 S APPTDATE=$$HL7TFM^XLFDT(STARTDT)
"RTN","SYNDHP61",285,0)
 S APPTTM=$E($P(APPTDATE,".",2),1,4)
"RTN","SYNDHP61",286,0)
 S $P(APPTDATE,".",2)=APPTTM
"RTN","SYNDHP61",287,0)
 ;
"RTN","SYNDHP61",288,0)
 ; map SNOMED CT code in SCTDX to ICD-10
"RTN","SYNDHP61",289,0)
 S MAPVUID=5217693 ; VUID for SNOMED CT to ICD-10-CM mapping 
"RTN","SYNDHP61",290,0)
 ;K LEX
"RTN","SYNDHP61",291,0)
 ;S DHPICD=$$GETASSN^LEXTRAN1(SCTDX,MAPVUID)
"RTN","SYNDHP61",292,0)
 ;S DHPICD=$O(LEX(1,""))
"RTN","SYNDHP61",293,0)
 ;I DHPICD="" S DHPICD="R69."
"RTN","SYNDHP61",294,0)
 ;S DHPICD=+$$ICDDX^ICDEX(DHPICD,30)
"RTN","SYNDHP61",295,0)
 I $G(SCTDX)'="" D  ;
"RTN","SYNDHP61",296,0)
 . S DHPICD=$$MAP^SYNDHPMAP("sct2icd",SCTDX)
"RTN","SYNDHP61",297,0)
 . I +DHPICD=-1 S RETSTA="-1^SNOMED CT CODE "_SCTDX_" not mapped" Q
"RTN","SYNDHP61",298,0)
 . S DHPICD=+$$ICDDX^ICDEX($P(DHPICD,U,2),30)
"RTN","SYNDHP61",299,0)
 ;
"RTN","SYNDHP61",300,0)
 ; map SNOMED CT code in SCTCPT to CPT
"RTN","SYNDHP61",301,0)
 ;S DHPCPT=$S($$MAP^SYNQLDM(SCTCPT)'="":$$MAP^SYNQLDM(SCTCPT),1:92002)
"RTN","SYNDHP61",302,0)
 S DHPCPT=$$MAP^SYNQLDM(SCTCPT)
"RTN","SYNDHP61",303,0)
 ;
"RTN","SYNDHP61",304,0)
 I DHPCPT="" S RETSTA="-1^SNOMED CT CODE "_SCTCPT_" not mapped" Q
"RTN","SYNDHP61",305,0)
 ; create root array
"RTN","SYNDHP61",306,0)
 K ENCDATA
"RTN","SYNDHP61",307,0)
 S ENCDATA("ENCOUNTER",1,"PATIENT")=PATIEN
"RTN","SYNDHP61",308,0)
 S ENCDATA("ENCOUNTER",1,"ENCOUNTER TYPE")="P"
"RTN","SYNDHP61",309,0)
 S ENCDATA("ENCOUNTER",1,"ENC D/T")=APPTDATE
"RTN","SYNDHP61",310,0)
 S ENCDATA("ENCOUNTER",1,"HOS LOC")=LOCATION
"RTN","SYNDHP61",311,0)
 S ENCDATA("ENCOUNTER",1,"SERVICE CATEGORY")="A"
"RTN","SYNDHP61",312,0)
 S ENCDATA("PROVIDER",1,"NAME")=ENCPRVIEN
"RTN","SYNDHP61",313,0)
 I $G(SCTDX)'="" S ENCDATA("DX/PL",1,"DIAGNOSIS")=DHPICD
"RTN","SYNDHP61",314,0)
 I $G(SCTDX)'="" S ENCDATA("DX/PL",1,"ENC PROVIDER")=ENCPRVIEN
"RTN","SYNDHP61",315,0)
 S ENCDATA("PROCEDURE",1,"PROCEDURE")=DHPCPT
"RTN","SYNDHP61",316,0)
 S ENCDATA("PROCEDURE",1,"QTY")=1
"RTN","SYNDHP61",317,0)
 I $G(SCTDX)'="" S ENCDATA("PROCEDURE",1,"DIAGNOSIS")=DHPICD
"RTN","SYNDHP61",318,0)
 ;
"RTN","SYNDHP61",319,0)
 K ZZERR,ZZERDESC,VISIT
"RTN","SYNDHP61",320,0)
 S RETSTA=$$DATA2PCE^PXAI("ENCDATA",PACKAGE,SOURCE,.VISIT,USER,$G(ERRDISP),.ZZERR,$G(PPEDIT),.ZZERDESC,.ACCOUNT)
"RTN","SYNDHP61",321,0)
 S RETSTA=RETSTA_"^"_$G(VISIT)
"RTN","SYNDHP61",322,0)
 I $D(ZZERDESC) M RETSTA("ZZERDESC")=ZZERDESC
"RTN","SYNDHP61",323,0)
 I $D(ZZERR) M RETSTA("ZZERR")=ZZERR
"RTN","SYNDHP61",324,0)
 ;
"RTN","SYNDHP61",325,0)
 ;change APPTDATE back to HL7 format for these calls
"RTN","SYNDHP61",326,0)
 S APPTDATE=$$FMTHL7^XLFDT(APPTDATE)
"RTN","SYNDHP61",327,0)
 ;create appointment
"RTN","SYNDHP61",328,0)
 N DHPLEN
"RTN","SYNDHP61",329,0)
 S DHPLEN=""
"RTN","SYNDHP61",330,0)
 D APPTADD^SYNDHP62(.RETSTA,DHPPAT,CLINIC,APPTDATE,DHPLEN)
"RTN","SYNDHP61",331,0)
 QUIT:$G(RETSTA("APPT"))'=1
"RTN","SYNDHP61",332,0)
 ;
"RTN","SYNDHP61",333,0)
 ;check-in appointment
"RTN","SYNDHP61",334,0)
 N DHPCIDT
"RTN","SYNDHP61",335,0)
 S DHPCIDT=""
"RTN","SYNDHP61",336,0)
 D APPTCKIN^SYNDHP62(.RETSTA,DHPPAT,CLINIC,APPTDATE,DHPCIDT)
"RTN","SYNDHP61",337,0)
 QUIT:$G(RETSTA("CKIN"))'=1
"RTN","SYNDHP61",338,0)
 ;
"RTN","SYNDHP61",339,0)
 ;check-out appointment
"RTN","SYNDHP61",340,0)
 N DHPCODT
"RTN","SYNDHP61",341,0)
 S DHPCODT=""
"RTN","SYNDHP61",342,0)
 D APTCKOUT^SYNDHP62(.RETSTA,DHPPAT,CLINIC,APPTDATE,DHPCODT)
"RTN","SYNDHP61",343,0)
 ;
"RTN","SYNDHP61",344,0)
 QUIT
"RTN","SYNDHP61",345,0)
 ;
"RTN","SYNDHP61",346,0)
 ; -------------------------------------------------------------------------
"RTN","SYNDHP61",347,0)
 ;;
"RTN","SYNDHP61",348,0)
TEST ;
"RTN","SYNDHP61",349,0)
T1 D PROBUPD(.ZXC,"5482156687V807096",267036007,158482014,9990006675,20180118,"5OO_EXT")
"RTN","SYNDHP61",350,0)
 Q
"RTN","SYNDHP61",351,0)
T2 D ENCTUPD(.ZXC,"5482156687V807096",20161227154556,20161227161234,"9990000348","GENERAL MEDICINE",73211009,10492003)
"RTN","SYNDHP61",352,0)
 Q
"RTN","SYNDHP61",353,0)
T3 S IDT=20170115154546
"RTN","SYNDHP61",354,0)
 F SDT=IDT:1E8:(IDT+9E8) S EDT=SDT+2E8 D
"RTN","SYNDHP61",355,0)
 .;K VISIT
"RTN","SYNDHP61",356,0)
 .K ZXC
"RTN","SYNDHP61",357,0)
 .D ENCTUPD(.ZXC,"9004935583V839304",SDT,EDT,"9990000348","GENERAL MEDICINE",73211009,10492003)
"RTN","SYNDHP61",358,0)
 .W !!,"___________________________________________________",!!
"RTN","SYNDHP61",359,0)
 .ZW ZXC
"RTN","SYNDHP61",360,0)
 .W !!
"RTN","SYNDHP61",361,0)
 .ZW ENCDATA
"RTN","SYNDHP61",362,0)
 .W !!,"___________________________________________________",!!
"RTN","SYNDHP61",363,0)
 .ZW ZZERDESC
"RTN","SYNDHP61",364,0)
 .W !!,"___________________________________________________",!!
"RTN","SYNDHP61",365,0)
 .ZW ZZERR
"RTN","SYNDHP61",366,0)
 Q
"RTN","SYNDHP62")
0^18^B236098906
"RTN","SYNDHP62",1,0)
SYNDHP62 ;DHP/ART -  Write Problems, Appointments To VistA ;5/4/18  10:44
"RTN","SYNDHP62",2,0)
 ;;1.0;DHP;;Jan 17, 2017;Build 2
"RTN","SYNDHP62",3,0)
 ;;Original routine authored by Andrew Thompson & Ferdinand Frankson of DXC Technology 2017-2018
"RTN","SYNDHP62",4,0)
 ;
"RTN","SYNDHP62",5,0)
 QUIT
"RTN","SYNDHP62",6,0)
 ;
"RTN","SYNDHP62",7,0)
 ; -------- Problem/Condition update
"RTN","SYNDHP62",8,0)
 ;
"RTN","SYNDHP62",9,0)
PRBUPDT(RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT) ;Problem/Condition update
"RTN","SYNDHP62",10,0)
 ;
"RTN","SYNDHP62",11,0)
 ; Input:
"RTN","SYNDHP62",12,0)
 ;   DHPPAT   - Patient ICN
"RTN","SYNDHP62",13,0)
 ;   DHPVST   - Visit ID
"RTN","SYNDHP62",14,0)
 ;   DHPROV   - Provider ID (NPI)
"RTN","SYNDHP62",15,0)
 ;   DHPONS   - Onset Date (HL7 format)
"RTN","SYNDHP62",16,0)
 ;   DHPABT   - Abatement Date (HL7 format)
"RTN","SYNDHP62",17,0)
 ;   DHPCLNST - Clinical Status ?   (A or I)
"RTN","SYNDHP62",18,0)
 ;   DHPSCT   - SNOMED CT code
"RTN","SYNDHP62",19,0)
 ;
"RTN","SYNDHP62",20,0)
 ; Output:   RETSTA
"RTN","SYNDHP62",21,0)
 ;  1 - success
"RTN","SYNDHP62",22,0)
 ; -1 - failure -1^message
"RTN","SYNDHP62",23,0)
 ;
"RTN","SYNDHP62",24,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA="-1^Patient not recognised" QUIT
"RTN","SYNDHP62",25,0)
 ;
"RTN","SYNDHP62",26,0)
 I $G(DHPVST)="" S RETSTA="-1^Visit IEN is required" QUIT
"RTN","SYNDHP62",27,0)
 I '$D(^AUPNVSIT(DHPVST)) S RETSTA="-1^Visit not found" QUIT
"RTN","SYNDHP62",28,0)
 ;
"RTN","SYNDHP62",29,0)
 N PACKAGE,SOURCE,USER,ERRDISP,ZZERR,PPEDIT,ZZERDESC,ACCOUNT
"RTN","SYNDHP62",30,0)
 N PROBDATA,PRBPRIEN,STATII,MAPVUID,P,DHPICD,DHPCS
"RTN","SYNDHP62",31,0)
 ;
"RTN","SYNDHP62",32,0)
 S PACKAGE=507 ;PCE PATIENT CARE ENCOUNTER
"RTN","SYNDHP62",33,0)
 S SOURCE="DHP DATA INGEST"
"RTN","SYNDHP62",34,0)
 S USER=DUZ
"RTN","SYNDHP62",35,0)
 S ERRDISP=1 ;for testing only, set to null otherwise  <<<<<<<<<<<<<<<<<<<<<<<
"RTN","SYNDHP62",36,0)
 S PPEDIT=""
"RTN","SYNDHP62",37,0)
 S ACCOUNT=""
"RTN","SYNDHP62",38,0)
 S P="|"
"RTN","SYNDHP62",39,0)
 ;
"RTN","SYNDHP62",40,0)
 S RETSTA=1
"RTN","SYNDHP62",41,0)
 ;
"RTN","SYNDHP62",42,0)
 S PROBDATA("DX/PL",1,"PL ADD")=1
"RTN","SYNDHP62",43,0)
 ;
"RTN","SYNDHP62",44,0)
 ;date portion only, active problems can not have a date resolved
"RTN","SYNDHP62",45,0)
 S:$G(DHPONS)'="" PROBDATA("DX/PL",1,"PL ONSET DATE")=$P($$HL7TFM^XLFDT(DHPONS),".",1)
"RTN","SYNDHP62",46,0)
 S:$G(DHPABT)'="" PROBDATA("DX/PL",1,"PL RESOLVED DATE")=$P($$HL7TFM^XLFDT(DHPABT),".",1)
"RTN","SYNDHP62",47,0)
 ;
"RTN","SYNDHP62",48,0)
 ;S MAPVUID=5217693 ; VUID for SNOMED CT to ICD-10-CM mapping 
"RTN","SYNDHP62",49,0)
 ;K LEX
"RTN","SYNDHP62",50,0)
 ;S DHPICD=$$GETASSN^LEXTRAN1(DHPSCT,MAPVUID)
"RTN","SYNDHP62",51,0)
 ;S DHPICD=$O(LEX(1,""))
"RTN","SYNDHP62",52,0)
 ;I DHPICD="" S DHPICD="R69."
"RTN","SYNDHP62",53,0)
 ;S DHPICD=+$$ICDDX^ICDEX(DHPICD,30) ;30=ICD-10
"RTN","SYNDHP62",54,0)
 ;S PROBDATA("DX/PL",1,"DIAGNOSIS")=DHPICD
"RTN","SYNDHP62",55,0)
 ;S PROBDATA("DX/PL",1,"DIAGNOSIS")=DHPSCT
"RTN","SYNDHP62",56,0)
 I $G(DHPSCT)'="" D
"RTN","SYNDHP62",57,0)
 . S DHPICD=$$MAP^SYNDHPMAP("sct2icd",DHPSCT)
"RTN","SYNDHP62",58,0)
 . I +DHPICD=-1 S RETSTA="-1^SNOMED CT CODE "_DHPSCT_" not mapped" Q
"RTN","SYNDHP62",59,0)
 . S DHPCS=$S(DHPONS>3150930:30,1:1)
"RTN","SYNDHP62",60,0)
 . S DHPICD=+$$ICDDX^ICDEX($P(DHPICD,U,2),DHPCS)
"RTN","SYNDHP62",61,0)
 . S PROBDATA("DX/PL",1,"DIAGNOSIS")=DHPICD
"RTN","SYNDHP62",62,0)
 ;
"RTN","SYNDHP62",63,0)
 I $G(DHPROV)'="" D
"RTN","SYNDHP62",64,0)
 . S PRBPRIEN=$O(^VA(200,"ANPI",DHPROV,""))
"RTN","SYNDHP62",65,0)
 . QUIT:PRBPRIEN=""
"RTN","SYNDHP62",66,0)
 . S PROBDATA("DX/PL",1,"ENC PROVIDER")=PRBPRIEN
"RTN","SYNDHP62",67,0)
 ;
"RTN","SYNDHP62",68,0)
 S STATII=P_"A"_P_"I"_P
"RTN","SYNDHP62",69,0)
 S:$G(DHPCLNST)'="" PROBDATA("DX/PL",1,"PL ACTIVE")=$S(STATII[(P_$G(DHPCLNST)_P):DHPCLNST,1:"A")
"RTN","SYNDHP62",70,0)
 ;
"RTN","SYNDHP62",71,0)
 S RETSTA=$$DATA2PCE^PXAI("PROBDATA",PACKAGE,SOURCE,.DHPVST,USER,$G(ERRDISP),.ZZERR,$G(PPEDIT),.ZZERDESC,.ACCOUNT)
"RTN","SYNDHP62",72,0)
 ;I $D(ZZERR) ZW ZZERR
"RTN","SYNDHP62",73,0)
 S RETSTA=RETSTA_"^"_$G(DHPVST)
"RTN","SYNDHP62",74,0)
 I $D(ZZERDESC) M RETSTA("ZZERDESC")=ZZERDESC
"RTN","SYNDHP62",75,0)
 I $D(ZZERR) M RETSTA("ZZERR")=ZZERR
"RTN","SYNDHP62",76,0)
 ;
"RTN","SYNDHP62",77,0)
 ; $$DATA2PCE Output:   
"RTN","SYNDHP62",78,0)
 ;+   1  if no errors and processed completely
"RTN","SYNDHP62",79,0)
 ;+  -1  if errors occurred but processed completely as possible
"RTN","SYNDHP62",80,0)
 ;+  -2  if could not get a visit
"RTN","SYNDHP62",81,0)
 ;+  -3  if called incorrectly
"RTN","SYNDHP62",82,0)
 QUIT
"RTN","SYNDHP62",83,0)
 ;
"RTN","SYNDHP62",84,0)
 ; -------- Appointment create
"RTN","SYNDHP62",85,0)
 ;
"RTN","SYNDHP62",86,0)
APPTADD(RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN) ;Create appointment
"RTN","SYNDHP62",87,0)
 ;
"RTN","SYNDHP62",88,0)
 ;     - past appointments are created as Walk-in, NSC, Regular appointments
"RTN","SYNDHP62",89,0)
 ;     - future appointments are created as NSC, Regular appointments
"RTN","SYNDHP62",90,0)
 ;
"RTN","SYNDHP62",91,0)
 ; Input:
"RTN","SYNDHP62",92,0)
 ;   DHPPAT   - Patient ICN (required)
"RTN","SYNDHP62",93,0)
 ;   DHPCLIN  - Clinic Name (required)
"RTN","SYNDHP62",94,0)
 ;   DHPAPTDT - Appointment Date & Time (required) all dates received in HL7 format
"RTN","SYNDHP62",95,0)
 ;   DHPLEN   - Appointment length as minutes (optional, defaults to 15 mins.)
"RTN","SYNDHP62",96,0)
 ;
"RTN","SYNDHP62",97,0)
 ; Output:   RETSTA("APPT")
"RTN","SYNDHP62",98,0)
 ;  1 - success
"RTN","SYNDHP62",99,0)
 ; -1 - failure -1^message
"RTN","SYNDHP62",100,0)
 ;
"RTN","SYNDHP62",101,0)
 N PATDFN,APPTDT,APPTLEN,CHKINDT,CHKOUTDT,COFLG,CLINIEN,INACTDT,REACTDT
"RTN","SYNDHP62",102,0)
 N EXDATE,BADDATE,RESULT,MSG
"RTN","SYNDHP62",103,0)
 ;
"RTN","SYNDHP62",104,0)
 I $G(DHPPAT)="" S RETSTA("APPT")="-1^Missing patient identifier (#2)." QUIT
"RTN","SYNDHP62",105,0)
 I $G(DHPCLIN)="" S RETSTA("APPT")="-1^Missing appt. location (#44)." QUIT
"RTN","SYNDHP62",106,0)
 I $G(DHPAPTDT)="" S RETSTA("APPT")="-1^Missing date/time for appt." QUIT
"RTN","SYNDHP62",107,0)
 ;
"RTN","SYNDHP62",108,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA("APPT")="-1^Patient not recognised" QUIT
"RTN","SYNDHP62",109,0)
 S PATDFN=$O(^DPT("AFICN",DHPPAT,""))
"RTN","SYNDHP62",110,0)
 ;
"RTN","SYNDHP62",111,0)
 ; -- Check appointment date/time --
"RTN","SYNDHP62",112,0)
 S APPTDT=$$HL7TFM^XLFDT(DHPAPTDT)
"RTN","SYNDHP62",113,0)
 I $P(APPTDT,".",2)="" S RETSTA("APPT")="-1^Missing time for appt." QUIT
"RTN","SYNDHP62",114,0)
 ;convert to external and check date/time against Fileman date/time field
"RTN","SYNDHP62",115,0)
 S Y=APPTDT
"RTN","SYNDHP62",116,0)
 D DD^%DT
"RTN","SYNDHP62",117,0)
 S EXDATE=Y ;Convert to external
"RTN","SYNDHP62",118,0)
 D CHK^DIE(2.98,.001,"",EXDATE,.RESULT,.MSG)
"RTN","SYNDHP62",119,0)
 I RESULT="^" S RETSTA("APPT")="-1^Invalid appt date/time." QUIT
"RTN","SYNDHP62",120,0)
 ;
"RTN","SYNDHP62",121,0)
 S:$G(DHPLEN)="" APPTLEN=15 ;default appointment length
"RTN","SYNDHP62",122,0)
 ;
"RTN","SYNDHP62",123,0)
 ; -- Check Clinic --
"RTN","SYNDHP62",124,0)
 S CLINIEN=$O(^SC("B",DHPCLIN,""))
"RTN","SYNDHP62",125,0)
 I CLINIEN="" S RETSTA("APPT")="-1^Invalid clinic name (#44)." QUIT
"RTN","SYNDHP62",126,0)
 S INACTDT=$$GET1^DIQ(44,CLINIEN_",",2505,"I") ;inactivate date
"RTN","SYNDHP62",127,0)
 S REACTDT=$$GET1^DIQ(44,CLINIEN_",",2506,"I") ;reactivate date
"RTN","SYNDHP62",128,0)
 I INACTDT'="",REACTDT="",INACTDT<APPTDT S RETSTA("APPT")="-1^Clinic inactive on appt. date (#44)." QUIT
"RTN","SYNDHP62",129,0)
 I REACTDT'="",REACTDT>INACTDT,REACTDT>APPTDT S RETSTA("APPT")="-1^Clinic inactive on appt. date (#44)." QUIT
"RTN","SYNDHP62",130,0)
 I REACTDT'="",REACTDT<INACTDT,INACTDT<APPTDT S RETSTA("APPT")="-1^Clinic inactive on appt. date (#44)." QUIT
"RTN","SYNDHP62",131,0)
 ;
"RTN","SYNDHP62",132,0)
 ; -- Check for Clinic stop code --
"RTN","SYNDHP62",133,0)
 I $$GET1^DIQ(44,CLINIEN_",",8)="" D  QUIT
"RTN","SYNDHP62",134,0)
 . S RETSTA("APPT")="-1^Clinic missing STOP CODE NUMBER (#44,8)."
"RTN","SYNDHP62",135,0)
 ;
"RTN","SYNDHP62",136,0)
 ;W "ICN: ",DHPPAT,"   DFN: ",PATDFN,!
"RTN","SYNDHP62",137,0)
 ;W "CLINIC: ",DHPCLIN,"   IEN: ",CLINIEN,!
"RTN","SYNDHP62",138,0)
 ;W "APPT D/T: ",DHPAPTDT,"   ",APPTDT,!
"RTN","SYNDHP62",139,0)
 ;
"RTN","SYNDHP62",140,0)
 I $D(^DPT(PATDFN,"S",APPTDT,0)),$P($G(^DPT(PATDFN,"S",APPTDT,0)),U,2)'="C" D  QUIT
"RTN","SYNDHP62",141,0)
 . S RETSTA("APPT")="-1^Duplicate Appointment"
"RTN","SYNDHP62",142,0)
 ;
"RTN","SYNDHP62",143,0)
 ; -- create patient appointment --
"RTN","SYNDHP62",144,0)
 N FDA,ERRMSG,IENS,IENROOT
"RTN","SYNDHP62",145,0)
 S IENS="+1,"_PATDFN_","
"RTN","SYNDHP62",146,0)
 S FDA(2.98,IENS,.001)=APPTDT ;appointment date/time
"RTN","SYNDHP62",147,0)
 S FDA(2.98,IENS,.01)=CLINIEN ;clinic
"RTN","SYNDHP62",148,0)
 S FDA(2.98,IENS,3)="" ;status
"RTN","SYNDHP62",149,0)
 S FDA(2.98,IENS,9.5)=9 ;appointment type (9=regular)
"RTN","SYNDHP62",150,0)
 S FDA(2.98,IENS,19)=DUZ ;data entry clerk
"RTN","SYNDHP62",151,0)
 S FDA(2.98,IENS,20)=DT ;date appointment made
"RTN","SYNDHP62",152,0)
 S FDA(2.98,IENS,21)="" ;pointer to Encounter record (409.68)
"RTN","SYNDHP62",153,0)
 I APPTDT<$$NOW^XLFDT() D
"RTN","SYNDHP62",154,0)
 . S FDA(2.98,IENS,9)=4 ;purpose of visit (4=unscheduled visit)
"RTN","SYNDHP62",155,0)
 . S FDA(2.98,IENS,25)="W" ;sched request type (W=walk-in)
"RTN","SYNDHP62",156,0)
 . S FDA(2.98,IENS,26)=0 ;next available appt indicator
"RTN","SYNDHP62",157,0)
 E  D
"RTN","SYNDHP62",158,0)
 . S FDA(2.98,IENS,9)=3 ;purpose of visit (3=scheduled visit)
"RTN","SYNDHP62",159,0)
 . S FDA(2.98,IENS,25)="N" ;sched request type (N=next available)
"RTN","SYNDHP62",160,0)
 . S FDA(2.98,IENS,26)=1 ;next available appt indicator
"RTN","SYNDHP62",161,0)
 . S FDA(2.98,IENS,27)=$P(APPTDT,".",1) ;desired date of appointment
"RTN","SYNDHP62",162,0)
 . S FDA(2.98,IENS,28)=0 ;follow-up visit (0=no)
"RTN","SYNDHP62",163,0)
 D UPDATE^DIE("","FDA","IENROOT","ERRMSG")
"RTN","SYNDHP62",164,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",165,0)
 . S RETSTA("APPT")="-1^Problem saving patient appointment info (#2.98) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",166,0)
 ;
"RTN","SYNDHP62",167,0)
 ; -- create clinic appointment --
"RTN","SYNDHP62",168,0)
 N FDA,IENS,ERRMSG
"RTN","SYNDHP62",169,0)
 S IENS="+2,"_CLINIEN_","
"RTN","SYNDHP62",170,0)
 S IENS(2)=+APPTDT
"RTN","SYNDHP62",171,0)
 S ERROR=0
"RTN","SYNDHP62",172,0)
 I '$D(^SC(CLINIEN,"S",APPTDT,0)) D
"RTN","SYNDHP62",173,0)
 . S FDA(44.001,IENS,.01)=+APPTDT ;appointment date/time
"RTN","SYNDHP62",174,0)
 . D UPDATE^DIE("","FDA","IENS","ERRMSG")
"RTN","SYNDHP62",175,0)
 . I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",176,0)
 . . S RETSTA("APPT")="-1^Problem saving clinic appointment date (#44.001) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",177,0)
 . . S ERROR=1
"RTN","SYNDHP62",178,0)
 ;ZW IENS
"RTN","SYNDHP62",179,0)
 QUIT:ERROR
"RTN","SYNDHP62",180,0)
 S APPTDT=$G(IENS(2))
"RTN","SYNDHP62",181,0)
 N FDA,IENS,ERRMSG
"RTN","SYNDHP62",182,0)
 S IENS="?+1,"_+APPTDT_","_CLINIEN_","
"RTN","SYNDHP62",183,0)
 S FDA(44.003,IENS,.01)=PATDFN ;patient dfn
"RTN","SYNDHP62",184,0)
 S FDA(44.003,IENS,1)=APPTLEN ;appointment length
"RTN","SYNDHP62",185,0)
 S FDA(44.003,IENS,7)=DUZ ;data entry clerk
"RTN","SYNDHP62",186,0)
 S FDA(44.003,IENS,8)=$P($$NOW^XLFDT,".",1) ;date appointment made
"RTN","SYNDHP62",187,0)
 D UPDATE^DIE("","FDA","IENS","ERRMSG")
"RTN","SYNDHP62",188,0)
 ;ZW IENS
"RTN","SYNDHP62",189,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",190,0)
 . S RETSTA("APPT")="-1^Problem saving clinic appointment (#44.003) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",191,0)
 ;
"RTN","SYNDHP62",192,0)
 S RETSTA("APPT")=1
"RTN","SYNDHP62",193,0)
 ;
"RTN","SYNDHP62",194,0)
 QUIT
"RTN","SYNDHP62",195,0)
 ;
"RTN","SYNDHP62",196,0)
 ; -------- Appointment check-in
"RTN","SYNDHP62",197,0)
 ;
"RTN","SYNDHP62",198,0)
APPTCKIN(RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPCIDT) ;Check-in appointment
"RTN","SYNDHP62",199,0)
 ;
"RTN","SYNDHP62",200,0)
 ; Input:
"RTN","SYNDHP62",201,0)
 ;   DHPPAT   - Patient ICN (required)
"RTN","SYNDHP62",202,0)
 ;   DHPCLIN  - Clinic Name (required)
"RTN","SYNDHP62",203,0)
 ;   DHPAPTDT - Appointment Date & Time (required) all dates received in HL7 format
"RTN","SYNDHP62",204,0)
 ;   DHPCIDT  - Check-in Date & Time (optional, will default to appointment date/time)
"RTN","SYNDHP62",205,0)
 ;
"RTN","SYNDHP62",206,0)
 ; Output:   RETSTA("CKIN")
"RTN","SYNDHP62",207,0)
 ;  1 - success
"RTN","SYNDHP62",208,0)
 ; -1 - failure -1^message
"RTN","SYNDHP62",209,0)
 ;
"RTN","SYNDHP62",210,0)
 N PATDFN,APPTDT,CHKINDT,CLINIEN,EXDATE,BADDATE,RESULT,MSG,HIT,CLAPTIEN,ELIGCODE
"RTN","SYNDHP62",211,0)
 ;
"RTN","SYNDHP62",212,0)
 I $G(DHPPAT)="" S RETSTA("CKIN")="-1^Missing patient identifier (#2)." QUIT
"RTN","SYNDHP62",213,0)
 I $G(DHPCLIN)="" S RETSTA("CKIN")="-1^Missing appt. location (#44)." QUIT
"RTN","SYNDHP62",214,0)
 I $G(DHPAPTDT)="" S RETSTA("CKIN")="-1^Missing date/time for appt." QUIT
"RTN","SYNDHP62",215,0)
 ;
"RTN","SYNDHP62",216,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA("CKIN")="-1^Patient not recognised" QUIT
"RTN","SYNDHP62",217,0)
 S PATDFN=$O(^DPT("AFICN",DHPPAT,""))
"RTN","SYNDHP62",218,0)
 ;
"RTN","SYNDHP62",219,0)
 ; -- Check Clinic --
"RTN","SYNDHP62",220,0)
 S CLINIEN=$O(^SC("B",DHPCLIN,""))
"RTN","SYNDHP62",221,0)
 I CLINIEN="" S RETSTA("CKIN")="-1^Invalid clinic name (#44)." QUIT
"RTN","SYNDHP62",222,0)
 ;
"RTN","SYNDHP62",223,0)
 ; -- Check appointment date/time --
"RTN","SYNDHP62",224,0)
 S APPTDT=$$HL7TFM^XLFDT(DHPAPTDT)
"RTN","SYNDHP62",225,0)
 I $P(APPTDT,".",2)="" S RETSTA("CKIN")="-1^Missing time for appt." QUIT
"RTN","SYNDHP62",226,0)
 ;convert to external and check date/time against Fileman date/time field
"RTN","SYNDHP62",227,0)
 S Y=APPTDT
"RTN","SYNDHP62",228,0)
 D DD^%DT
"RTN","SYNDHP62",229,0)
 S EXDATE=Y ;Convert to external
"RTN","SYNDHP62",230,0)
 D CHK^DIE(2.98,.001,"",EXDATE,.RESULT,.MSG)
"RTN","SYNDHP62",231,0)
 I RESULT="^" S RETSTA("CKIN")="-1^Invalid appt date/time." QUIT
"RTN","SYNDHP62",232,0)
 ;
"RTN","SYNDHP62",233,0)
 ; -- Check check-in date/time --
"RTN","SYNDHP62",234,0)
 N RESULT,MSG
"RTN","SYNDHP62",235,0)
 S BADDATE=0
"RTN","SYNDHP62",236,0)
 I $G(DHPCIDT)="" D
"RTN","SYNDHP62",237,0)
 . S CHKINDT=APPTDT
"RTN","SYNDHP62",238,0)
 E  D
"RTN","SYNDHP62",239,0)
 . S CHKINDT=$$HL7TFM^XLFDT(DHPCIDT)
"RTN","SYNDHP62",240,0)
 . I $P(CHKINDT,".",2)="" S RETSTA("CKIN")="-1^Missing time for check-in.",BADDATE=1 QUIT
"RTN","SYNDHP62",241,0)
 . ;convert to external and check date/time against Fileman date/time field
"RTN","SYNDHP62",242,0)
 . S Y=CHKINDT
"RTN","SYNDHP62",243,0)
 . D DD^%DT
"RTN","SYNDHP62",244,0)
 . S EXDATE=Y
"RTN","SYNDHP62",245,0)
 . D CHK^DIE(2.98,.001,"",EXDATE,.RESULT,.MSG)
"RTN","SYNDHP62",246,0)
 . I RESULT="^" S RETSTA("CKIN")="-1^Invalid check-in date/time.",BADDATE=1 QUIT
"RTN","SYNDHP62",247,0)
 QUIT:BADDATE
"RTN","SYNDHP62",248,0)
 ;
"RTN","SYNDHP62",249,0)
 ;check that there are both patient and clinic appointment records
"RTN","SYNDHP62",250,0)
 I '$D(^DPT(PATDFN,"S",APPTDT,0)) D  QUIT
"RTN","SYNDHP62",251,0)
 . S RETSTA("CKIN")="-1^Patient Appointment record was not found"
"RTN","SYNDHP62",252,0)
 ;
"RTN","SYNDHP62",253,0)
 S HIT=0
"RTN","SYNDHP62",254,0)
 S CLAPTIEN=0
"RTN","SYNDHP62",255,0)
 F  S CLAPTIEN=$O(^SC(CLINIEN,"S",APPTDT,1,CLAPTIEN)) QUIT:CLAPTIEN=""  D  QUIT:HIT
"RTN","SYNDHP62",256,0)
 . S:$P(^SC(CLINIEN,"S",APPTDT,1,CLAPTIEN,0),U,1)=PATDFN HIT=1
"RTN","SYNDHP62",257,0)
 I 'HIT D  QUIT
"RTN","SYNDHP62",258,0)
 . S RETSTA("CKIN")="-1^Clinic Appointment record was not found"
"RTN","SYNDHP62",259,0)
 ;
"RTN","SYNDHP62",260,0)
 ;W "ICN:             ",DHPPAT,"   DFN: ",PATDFN,!
"RTN","SYNDHP62",261,0)
 ;W "CLINIC:          ",DHPCLIN,"   IEN: ",CLINIEN,!
"RTN","SYNDHP62",262,0)
 ;W "CLINIC,APPT,IEN: ",CLAPTIEN,!
"RTN","SYNDHP62",263,0)
 ;W "APPT D/T:        ",DHPAPTDT,"   ",APPTDT,!
"RTN","SYNDHP62",264,0)
 ;W "CHK-IN D/T:      ",DHPCIDT,"   ",CHKINDT,!
"RTN","SYNDHP62",265,0)
 ;
"RTN","SYNDHP62",266,0)
 ; -- appointment check-in updates --
"RTN","SYNDHP62",267,0)
 ;
"RTN","SYNDHP62",268,0)
 ; clinic appointment record
"RTN","SYNDHP62",269,0)
 ;  30 - eligibility of visit 0;10
"RTN","SYNDHP62",270,0)
 ;		10 = NSC
"RTN","SYNDHP62",271,0)
 ;		11 = NSC, VA PENSION
"RTN","SYNDHP62",272,0)
 ;		15 = SC LESS THAN 50%
"RTN","SYNDHP62",273,0)
 ;		16 = SERVICE CONNECTED 50% to 100%
"RTN","SYNDHP62",274,0)
 ;  309 - checked-in (date) C;1
"RTN","SYNDHP62",275,0)
 ;  302 - check in user C;2 P200
"RTN","SYNDHP62",276,0)
 ;  305 - check in entered (date) C;5
"RTN","SYNDHP62",277,0)
 ;
"RTN","SYNDHP62",278,0)
 S ELIGCODE=$$GET1^DIQ(2,DHPPAT_",",.361,"I")
"RTN","SYNDHP62",279,0)
 S:ELIGCODE="" ELIGCODE=10
"RTN","SYNDHP62",280,0)
 N IENS,FDA,ERRMSG
"RTN","SYNDHP62",281,0)
 S IENS=CLAPTIEN_","_APPTDT_","_CLINIEN_","
"RTN","SYNDHP62",282,0)
 S FDA(44.003,IENS,30)=ELIGCODE ;eligibility of visit
"RTN","SYNDHP62",283,0)
 S FDA(44.003,IENS,309)=CHKINDT ;checked-in (date)
"RTN","SYNDHP62",284,0)
 S FDA(44.003,IENS,302)=DUZ ;check in user
"RTN","SYNDHP62",285,0)
 S FDA(44.003,IENS,305)=CHKINDT ;check in entered (date)
"RTN","SYNDHP62",286,0)
 D FILE^DIE("K","FDA","ERRMSG")
"RTN","SYNDHP62",287,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",288,0)
 . S RETSTA("CKIN")="-1^Problem updating clinic appointment check-in info (#44.003) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",289,0)
 ;
"RTN","SYNDHP62",290,0)
 S RETSTA("CKIN")=1
"RTN","SYNDHP62",291,0)
 ;
"RTN","SYNDHP62",292,0)
 QUIT
"RTN","SYNDHP62",293,0)
 ;
"RTN","SYNDHP62",294,0)
 ; -------- Appointment check-out
"RTN","SYNDHP62",295,0)
 ;
"RTN","SYNDHP62",296,0)
APTCKOUT(RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPCODT) ;Check-out appointment
"RTN","SYNDHP62",297,0)
 ;>>>>>> This API currently will ONLY work for synthetic data ingest <<<<<<<
"RTN","SYNDHP62",298,0)
 ;>>>>>>  where Outpatient Encounters and Visits are created first   <<<<<<<
"RTN","SYNDHP62",299,0)
 ; Input:
"RTN","SYNDHP62",300,0)
 ;   DHPPAT   - Patient ICN (required)
"RTN","SYNDHP62",301,0)
 ;   DHPCLIN  - Clinic Name (required)
"RTN","SYNDHP62",302,0)
 ;   DHPAPTDT - Appointment Date & Time (required) all dates received in HL7 format
"RTN","SYNDHP62",303,0)
 ;   DHPCODT  - Check-out Date & Time (optional, will default to check-in date/time + 30 minutes)
"RTN","SYNDHP62",304,0)
 ;
"RTN","SYNDHP62",305,0)
 ; Output:   RETSTA("CKOUT")
"RTN","SYNDHP62",306,0)
 ;  1 - success
"RTN","SYNDHP62",307,0)
 ; -1 - failure -1^message
"RTN","SYNDHP62",308,0)
 ;
"RTN","SYNDHP62",309,0)
 N PATDFN,APPTDT,CHKINDT,CHKOUTDT,CLINIEN,EXDATE,BADDATE,RESULT,MSG,HIT,CLAPTIEN,IENS
"RTN","SYNDHP62",310,0)
 ;
"RTN","SYNDHP62",311,0)
 I $G(DHPPAT)="" S RETSTA("CKOUT")="-1^Missing patient identifier (#2)." QUIT
"RTN","SYNDHP62",312,0)
 I $G(DHPCLIN)="" S RETSTA("CKOUT")="-1^Missing appt. location (#44)." QUIT
"RTN","SYNDHP62",313,0)
 I $G(DHPAPTDT)="" S RETSTA("CKOUT")="-1^Missing date/time for appt." QUIT
"RTN","SYNDHP62",314,0)
 ;
"RTN","SYNDHP62",315,0)
 I '$D(^DPT("AFICN",DHPPAT)) S RETSTA("CKOUT")="-1^Patient not recognised" QUIT
"RTN","SYNDHP62",316,0)
 S PATDFN=$O(^DPT("AFICN",DHPPAT,""))
"RTN","SYNDHP62",317,0)
 ;
"RTN","SYNDHP62",318,0)
 ; -- Check Clinic --
"RTN","SYNDHP62",319,0)
 S CLINIEN=$O(^SC("B",DHPCLIN,""))
"RTN","SYNDHP62",320,0)
 I CLINIEN="" S RETSTA("CKOUT")="-1^Invalid clinic name (#44)." QUIT
"RTN","SYNDHP62",321,0)
 ;
"RTN","SYNDHP62",322,0)
 ; -- Check appointment date/time --
"RTN","SYNDHP62",323,0)
 S APPTDT=$$HL7TFM^XLFDT(DHPAPTDT)
"RTN","SYNDHP62",324,0)
 I $P(APPTDT,".",2)="" S RETSTA("CKOUT")="-1^Missing time for appt." QUIT
"RTN","SYNDHP62",325,0)
 ;convert to external and check date/time against Fileman date/time field
"RTN","SYNDHP62",326,0)
 S Y=APPTDT
"RTN","SYNDHP62",327,0)
 D DD^%DT
"RTN","SYNDHP62",328,0)
 S EXDATE=Y ;Convert to external
"RTN","SYNDHP62",329,0)
 D CHK^DIE(2.98,.001,"",EXDATE,.RESULT,.MSG)
"RTN","SYNDHP62",330,0)
 I RESULT="^" S RETSTA("CKOUT")="-1^Invalid appt date/time." QUIT
"RTN","SYNDHP62",331,0)
 ;
"RTN","SYNDHP62",332,0)
 ;check that there are both patient and clinic appointment records
"RTN","SYNDHP62",333,0)
 I '$D(^DPT(PATDFN,"S",APPTDT,0)) D  QUIT
"RTN","SYNDHP62",334,0)
 . S RETSTA("CKOUT")="-1^Patient Appointment record was not found"
"RTN","SYNDHP62",335,0)
 ;
"RTN","SYNDHP62",336,0)
 S HIT=0
"RTN","SYNDHP62",337,0)
 S CLAPTIEN=0
"RTN","SYNDHP62",338,0)
 F  S CLAPTIEN=$O(^SC(CLINIEN,"S",APPTDT,1,CLAPTIEN)) QUIT:CLAPTIEN=""  D  QUIT:HIT
"RTN","SYNDHP62",339,0)
 . S:$P(^SC(CLINIEN,"S",APPTDT,1,CLAPTIEN,0),U,1)=PATDFN HIT=1
"RTN","SYNDHP62",340,0)
 I 'HIT D  QUIT
"RTN","SYNDHP62",341,0)
 . S RETSTA("CKOUT")="-1^Clinic Appointment record was not found"
"RTN","SYNDHP62",342,0)
 ;
"RTN","SYNDHP62",343,0)
 ; -- Get check-in date/time --
"RTN","SYNDHP62",344,0)
 S IENS=CLAPTIEN_","_APPTDT_","_CLINIEN_","
"RTN","SYNDHP62",345,0)
 S CHKINDT=$$GET1^DIQ(44.003,IENS,309,"I")
"RTN","SYNDHP62",346,0)
 I CHKINDT="" D  QUIT
"RTN","SYNDHP62",347,0)
 . S RETSTA("CKOUT")="-1^Appointment has not been checked-in"
"RTN","SYNDHP62",348,0)
 ;
"RTN","SYNDHP62",349,0)
 ; -- Check check-out date/time --
"RTN","SYNDHP62",350,0)
 N RESULT,MSG
"RTN","SYNDHP62",351,0)
 S BADDATE=0
"RTN","SYNDHP62",352,0)
 I $G(DHPCODT)="" D
"RTN","SYNDHP62",353,0)
 . S CHKOUTDT=$$FMADD^XLFDT(CHKINDT,0,0,30)
"RTN","SYNDHP62",354,0)
 E  D
"RTN","SYNDHP62",355,0)
 . S CHKOUTDT=$$HL7TFM^XLFDT(DHPCODT)
"RTN","SYNDHP62",356,0)
 . I $P(CHKOUTDT,".",2)="" S RETSTA("CKOUT")="-1^Missing time for check-out.",BADDATE=1 QUIT
"RTN","SYNDHP62",357,0)
 . ;convert to external and check date/time against Fileman date/time field
"RTN","SYNDHP62",358,0)
 . S Y=CHKOUTDT
"RTN","SYNDHP62",359,0)
 . D DD^%DT
"RTN","SYNDHP62",360,0)
 . S EXDATE=Y
"RTN","SYNDHP62",361,0)
 . D CHK^DIE(2.98,.001,"",EXDATE,.RESULT,.MSG)
"RTN","SYNDHP62",362,0)
 . I RESULT="^" S RETSTA("CKOUT")="-1^Invalid check-out date/time.",BADDATE=1 QUIT
"RTN","SYNDHP62",363,0)
 QUIT:BADDATE
"RTN","SYNDHP62",364,0)
 I CHKOUTDT'>CHKINDT S RETSTA("CKOUT")="-1^Check-out date/time must greater than check-in date." QUIT
"RTN","SYNDHP62",365,0)
 ;
"RTN","SYNDHP62",366,0)
 ;check requirements for completing check-out of appointment
"RTN","SYNDHP62",367,0)
 N COERRMSG,IDX
"RTN","SYNDHP62",368,0)
 S COERRMSG=1
"RTN","SYNDHP62",369,0)
 D CHECKCO(.COERRMSG,PATDFN,APPTDT)
"RTN","SYNDHP62",370,0)
 I COERRMSG=-1 D  QUIT
"RTN","SYNDHP62",371,0)
 . S RETSTA("CKOUT")=-1
"RTN","SYNDHP62",372,0)
 . S IDX=""
"RTN","SYNDHP62",373,0)
 . F  S IDX=$O(COERRMSG(IDX)) QUIT:IDX=""  D
"RTN","SYNDHP62",374,0)
 . . S RETSTA("CKOUT")=RETSTA("CKOUT")_"^"_COERRMSG(IDX)
"RTN","SYNDHP62",375,0)
 ;
"RTN","SYNDHP62",376,0)
 ;W "ICN:             ",DHPPAT,"   DFN: ",PATDFN,!
"RTN","SYNDHP62",377,0)
 ;W "CLINIC:          ",DHPCLIN,"   IEN: ",CLINIEN,!
"RTN","SYNDHP62",378,0)
 ;W "CLINIC,APPT,IEN: ",CLAPTIEN,!
"RTN","SYNDHP62",379,0)
 ;W "APPT D/T:        ",DHPAPTDT,"   ",APPTDT,!
"RTN","SYNDHP62",380,0)
 ;W "CHK-IN D/T:      ",CHKINDT,!
"RTN","SYNDHP62",381,0)
 ;W "CHK-OUT D/T:     ",DHPCODT,"   ",CHKOUTDT,!
"RTN","SYNDHP62",382,0)
 ;
"RTN","SYNDHP62",383,0)
 ; -- appointment check-out updates --
"RTN","SYNDHP62",384,0)
 ;
"RTN","SYNDHP62",385,0)
 ; patient appointment record
"RTN","SYNDHP62",386,0)
 ;  update appt record with outpatient encounter ien
"RTN","SYNDHP62",387,0)
 ;    21 - outpatient encounter 0;20 P409.68
"RTN","SYNDHP62",388,0)
 ;
"RTN","SYNDHP62",389,0)
 ;get the outpatient encounter IEN for the appt. encounter record, not the stop code record
"RTN","SYNDHP62",390,0)
 N SCEIEN
"RTN","SYNDHP62",391,0)
 S SCEIEN=$O(^SCE("ADFN",PATDFN,APPTDT,""))
"RTN","SYNDHP62",392,0)
 I SCEIEN="" D  QUIT
"RTN","SYNDHP62",393,0)
 . S RETSTA("CKOUT")="-1^Could not find the outpatient encounter record."
"RTN","SYNDHP62",394,0)
 ;
"RTN","SYNDHP62",395,0)
 ; patient appointment record
"RTN","SYNDHP62",396,0)
 ;  update appt record with outpatient encounter ien
"RTN","SYNDHP62",397,0)
 ;    21 - outpatient encounter 0;20 P409.68
"RTN","SYNDHP62",398,0)
 ;
"RTN","SYNDHP62",399,0)
 N IENS,FDA,ERRMSG
"RTN","SYNDHP62",400,0)
 S IENS=APPTDT_","_PATDFN_","
"RTN","SYNDHP62",401,0)
 S FDA(2.98,IENS,21)=SCEIEN ;outpatient encounter
"RTN","SYNDHP62",402,0)
 D FILE^DIE("K","FDA","ERRMSG")
"RTN","SYNDHP62",403,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",404,0)
 . S RETSTA("CKOUT")="-1^Problem updating patient appointment Outpat Enc pointer (#2.98) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",405,0)
 ;
"RTN","SYNDHP62",406,0)
 ; clinic appointment record
"RTN","SYNDHP62",407,0)
 ;  303 - checked out (date) C;3
"RTN","SYNDHP62",408,0)
 ;  304 - check out user C;4 P200
"RTN","SYNDHP62",409,0)
 ;  306 - check out entered (date) C;6
"RTN","SYNDHP62",410,0)
 ;
"RTN","SYNDHP62",411,0)
 N IENS,FDA,ERRMSG
"RTN","SYNDHP62",412,0)
 S IENS=CLAPTIEN_","_APPTDT_","_CLINIEN_","
"RTN","SYNDHP62",413,0)
 S FDA(44.003,IENS,303)=CHKOUTDT ;checked out (date)
"RTN","SYNDHP62",414,0)
 S FDA(44.003,IENS,304)=DUZ ;check out user
"RTN","SYNDHP62",415,0)
 S FDA(44.003,IENS,306)=CHKOUTDT ;check out entered (date)
"RTN","SYNDHP62",416,0)
 D FILE^DIE("K","FDA","ERRMSG")
"RTN","SYNDHP62",417,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",418,0)
 . S RETSTA("CKOUT")="-1^Problem updating clinic appointment check-out info (#44.003) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",419,0)
 ;
"RTN","SYNDHP62",420,0)
 ; outpatient encounter records
"RTN","SYNDHP62",421,0)
 ;
"RTN","SYNDHP62",422,0)
 N IENS,FDA,ERRMSG
"RTN","SYNDHP62",423,0)
 S IENS=SCEIEN_","
"RTN","SYNDHP62",424,0)
 S FDA(409.68,IENS,.07)=CHKOUTDT ;check out process completion
"RTN","SYNDHP62",425,0)
 S FDA(409.68,IENS,.1)=11 ;appointment type
"RTN","SYNDHP62",426,0)
 S FDA(409.68,IENS,.12)=2 ;status
"RTN","SYNDHP62",427,0)
 D FILE^DIE("K","FDA","ERRMSG")
"RTN","SYNDHP62",428,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",429,0)
 . S RETSTA("CKOUT")="-1^Problem updating outpatient encounter (#409.68) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",430,0)
 ;
"RTN","SYNDHP62",431,0)
 N IENS,FDA,ERRMSG
"RTN","SYNDHP62",432,0)
 S IENS=$O(^SCE("APAR",SCEIEN,""))_","
"RTN","SYNDHP62",433,0)
 S FDA(409.68,IENS,.1)=11 ;appointment type
"RTN","SYNDHP62",434,0)
 D FILE^DIE("K","FDA","ERRMSG")
"RTN","SYNDHP62",435,0)
 I $D(ERRMSG) D  QUIT
"RTN","SYNDHP62",436,0)
 . S RETSTA("CKOUT")="-1^Problem updating outpatient encounter (#409.68) - "_$G(ERRMSG("DIERR",1,"TEXT",1))
"RTN","SYNDHP62",437,0)
 ;
"RTN","SYNDHP62",438,0)
 ; visit records - no update required
"RTN","SYNDHP62",439,0)
 ;
"RTN","SYNDHP62",440,0)
 S RETSTA("CKOUT")=1
"RTN","SYNDHP62",441,0)
 ;
"RTN","SYNDHP62",442,0)
 QUIT
"RTN","SYNDHP62",443,0)
 ;
"RTN","SYNDHP62",444,0)
TEST ;
"RTN","SYNDHP62",445,0)
T1 D PRBUPDT(.ZXC,"5482156687V807096",2,9990006675,,"A","5OO_EXT",267036007)
"RTN","SYNDHP62",446,0)
 Q
"RTN","SYNDHP62",447,0)
 ;
"RTN","SYNDHP62",448,0)
CHECKCO(COERRMSG,PATDFN,APPTDT) ;
"RTN","SYNDHP62",449,0)
 ;
"RTN","SYNDHP62",450,0)
 N ECNT,SCEIENP,SCEIENS,INVDATE,VIENP,VIENS,VPROV,VPOV,VCPT
"RTN","SYNDHP62",451,0)
 S ECNT=0
"RTN","SYNDHP62",452,0)
 ;
"RTN","SYNDHP62",453,0)
 S SCEIENP=$O(^SCE("ADFN",PATDFN,APPTDT,""))
"RTN","SYNDHP62",454,0)
 I SCEIENP="" D
"RTN","SYNDHP62",455,0)
 . S ECNT=ECNT+1
"RTN","SYNDHP62",456,0)
 . S COERRMSG=-1
"RTN","SYNDHP62",457,0)
 . S COERRMSG(ECNT)="No Outpatient Encounter record"
"RTN","SYNDHP62",458,0)
 ;
"RTN","SYNDHP62",459,0)
 I SCEIENP'="" D
"RTN","SYNDHP62",460,0)
 . S SCEIENS=$O(^SCE("APAR",SCEIENP,""))
"RTN","SYNDHP62",461,0)
 . I SCEIENS="" D
"RTN","SYNDHP62",462,0)
 . . S ECNT=ECNT+1
"RTN","SYNDHP62",463,0)
 . . S COERRMSG=-1
"RTN","SYNDHP62",464,0)
 . . S COERRMSG(ECNT)="No Outpatient Encounter stop code record"
"RTN","SYNDHP62",465,0)
 ;
"RTN","SYNDHP62",466,0)
 S INVDATE=9999999-$P(+APPTDT,".",1)_$S($P(+APPTDT,".",2)'="":"."_$P(+APPTDT,".",2),1:"")
"RTN","SYNDHP62",467,0)
 S VIENP=$O(^AUPNVSIT("AA",PATDFN,INVDATE,""))
"RTN","SYNDHP62",468,0)
 I VIENP="" D
"RTN","SYNDHP62",469,0)
 . S ECNT=ECNT+1
"RTN","SYNDHP62",470,0)
 . S COERRMSG=-1
"RTN","SYNDHP62",471,0)
 . S COERRMSG(ECNT)="No Visit record"
"RTN","SYNDHP62",472,0)
 ;
"RTN","SYNDHP62",473,0)
 I VIENP'="" D
"RTN","SYNDHP62",474,0)
 . S VIENS=$O(^AUPNVSIT("AD",VIENP,""))
"RTN","SYNDHP62",475,0)
 . I VIENS="" D
"RTN","SYNDHP62",476,0)
 . . S ECNT=ECNT+1
"RTN","SYNDHP62",477,0)
 . . S COERRMSG=-1
"RTN","SYNDHP62",478,0)
 . . S COERRMSG(ECNT)="No Visit stop code record"
"RTN","SYNDHP62",479,0)
 . ;
"RTN","SYNDHP62",480,0)
 . S VPROV=$O(^AUPNVPRV("AD",VIENP,""))
"RTN","SYNDHP62",481,0)
 . I VPROV="" D
"RTN","SYNDHP62",482,0)
 . . S ECNT=ECNT+1
"RTN","SYNDHP62",483,0)
 . . S COERRMSG=-1
"RTN","SYNDHP62",484,0)
 . . S COERRMSG(ECNT)="No V Provider record for Visit"
"RTN","SYNDHP62",485,0)
 . ;
"RTN","SYNDHP62",486,0)
 . S VPOV=$O(^AUPNVPOV("AD",VIENP,""))
"RTN","SYNDHP62",487,0)
 . I VPOV="" D
"RTN","SYNDHP62",488,0)
 . . S ECNT=ECNT+1
"RTN","SYNDHP62",489,0)
 . . S COERRMSG=-1
"RTN","SYNDHP62",490,0)
 . . S COERRMSG(ECNT)="No V POV record for Visit"
"RTN","SYNDHP62",491,0)
 . ;
"RTN","SYNDHP62",492,0)
 . S VCPT=$O(^AUPNVCPT("AD",VIENP,""))
"RTN","SYNDHP62",493,0)
 . I VCPT="" D
"RTN","SYNDHP62",494,0)
 . . S ECNT=ECNT+1
"RTN","SYNDHP62",495,0)
 . . S COERRMSG=-1
"RTN","SYNDHP62",496,0)
 . . S COERRMSG(ECNT)="No V CPT record for Visit"
"RTN","SYNDHP62",497,0)
 . ;
"RTN","SYNDHP62",498,0)
 QUIT
"RTN","SYNDHP62",499,0)
 ;
"RTN","SYNDHP62",500,0)
 
"RTN","SYNDHPMAP")
0^19^B70163221
"RTN","SYNDHPMAP",1,0)
SYNDHPMAP ; AFHIL/FJF terminology mapping
"RTN","SYNDHPMAP",2,0)
 ;;1.0;DHP;;Jan 17, 2017;Build 2
"RTN","SYNDHPMAP",3,0)
 ;;Original routine authored by Andrew Thompson & Ferdinand Frankson of DXC Technology 2017-2018
"RTN","SYNDHPMAP",4,0)
 ;
"RTN","SYNDHPMAP",5,0)
ALLRGY() ;
"RTN","SYNDHPMAP",6,0)
 K ^SYN("2002.010")
"RTN","SYNDHPMAP",7,0)
 S D=" (disorder)"
"RTN","SYNDHPMAP",8,0)
 S N=""
"RTN","SYNDHPMAP",9,0)
 F  S N=$O(^ZZFJFALL(N)) Q:N=""  D
"RTN","SYNDHPMAP",10,0)
 .S TRM=^ZZFJFALL(N)
"RTN","SYNDHPMAP",11,0)
 .S TRM=$P(TRM,D)
"RTN","SYNDHPMAP",12,0)
 .K LEX
"RTN","SYNDHPMAP",13,0)
 .S LEX=$$TXT4CS^LEXTRAN(TRM,"SCT")
"RTN","SYNDHPMAP",14,0)
 .;W ! ZW LEX
"RTN","SYNDHPMAP",15,0)
 .I +LEX<1 D
"RTN","SYNDHPMAP",16,0)
 ..I $E(TRM,$L(TRM))'="s" S TRM=TRM_"s"
"RTN","SYNDHPMAP",17,0)
 ..S LEX=$$TXT4CS^LEXTRAN(TRM,"SCT")
"RTN","SYNDHPMAP",18,0)
 .I +LEX<1 S ^SYN("2002.010","UNK",TRM)="" Q
"RTN","SYNDHPMAP",19,0)
 .S SCTCD=$O(LEX(""))
"RTN","SYNDHPMAP",20,0)
 .S ^SYN("2002.010","SCTC",SCTCD,TRM)=""
"RTN","SYNDHPMAP",21,0)
 .S ^SYN("2002.010","SCTT",TRM,SCTCD)=""
"RTN","SYNDHPMAP",22,0)
 Q
"RTN","SYNDHPMAP",23,0)
REACTIONS ;
"RTN","SYNDHPMAP",24,0)
 D AMAP
"RTN","SYNDHPMAP",25,0)
 D AMSAVE
"RTN","SYNDHPMAP",26,0)
 Q
"RTN","SYNDHPMAP",27,0)
AMAP ;
"RTN","SYNDHPMAP",28,0)
 S N=0
"RTN","SYNDHPMAP",29,0)
 K REACMAP,REACNF,REACANOM
"RTN","SYNDHPMAP",30,0)
 F  S N=$O(^GMRD(120.83,N)) Q:+N=0  D
"RTN","SYNDHPMAP",31,0)
 .S REAC=$P(^GMRD(120.83,N,0),U)
"RTN","SYNDHPMAP",32,0)
 .K ZZL
"RTN","SYNDHPMAP",33,0)
 .S REAX=$$TXT4CS^LEXTRAN(REAC,"SCT","ZZL") ;W !,REAC,! ZW ZZL R *R
"RTN","SYNDHPMAP",34,0)
 .I REAX="1^1" S REACMAP(N,$O(ZZL(0)),REAC)="" Q
"RTN","SYNDHPMAP",35,0)
 .I REAX?1N1"^"1.2N D MULT Q
"RTN","SYNDHPMAP",36,0)
 .I REAX="0^0" S REACNF(REAC)=""
"RTN","SYNDHPMAP",37,0)
 Q
"RTN","SYNDHPMAP",38,0)
MULT() ;
"RTN","SYNDHPMAP",39,0)
 S M=0
"RTN","SYNDHPMAP",40,0)
 F  S M=$O(ZZL(M)) Q:+M=0  D
"RTN","SYNDHPMAP",41,0)
 .I $D(REACMAP(N)) Q
"RTN","SYNDHPMAP",42,0)
 .K LEX S X=$$CODE^LEXTRAN(M,"SCT") W ! ZW LEX
"RTN","SYNDHPMAP",43,0)
 .I +X=1!(+X=-4) S REACMAP(N,+LEX(0),REAC)="" ; W ! ZW REACMAP(N) R *R Q
"RTN","SYNDHPMAP",44,0)
 .S REACANOM(REAC)=""
"RTN","SYNDHPMAP",45,0)
 Q
"RTN","SYNDHPMAP",46,0)
AMSAVE ;
"RTN","SYNDHPMAP",47,0)
 K ^SYN("2002.010","REACTIONS")
"RTN","SYNDHPMAP",48,0)
 M ^SYN("2002.010","REACTIONS","ICT")=REACMAP
"RTN","SYNDHPMAP",49,0)
 S N="^SYN(""2002.010"",""REACTIONS"",""ICT"")"
"RTN","SYNDHPMAP",50,0)
 F  S N=$Q(@N) Q:$QS(N,1)'="REACTIONS"  Q:$QS(N,2)'="ICT"  D
"RTN","SYNDHPMAP",51,0)
 .S ^SYN("2002.010",$QS(N,1),"TCI",$QS(N,5),$QS(N,4),$QS(N,3))=""
"RTN","SYNDHPMAP",52,0)
 Q
"RTN","SYNDHPMAP",53,0)
AMMSCO ; missing content
"RTN","SYNDHPMAP",54,0)
 ;
"RTN","SYNDHPMAP",55,0)
 S N=0,FN=120.83,S1="REACTIONS",S2="ICT"
"RTN","SYNDHPMAP",56,0)
 F  S N=$O(^GMRD(FN,N)) Q:+N=0  D
"RTN","SYNDHPMAP",57,0)
 .I $D(^SYN("2002.010",S1,S2,N)) Q
"RTN","SYNDHPMAP",58,0)
 .S T=^GMRD(FN,N,0)
"RTN","SYNDHPMAP",59,0)
 .W !,T
"RTN","SYNDHPMAP",60,0)
 .R !,"SCT ",SCT
"RTN","SYNDHPMAP",61,0)
 .S ^SYN("2002.010",S1,S2,N,SCT,T)=""
"RTN","SYNDHPMAP",62,0)
 .S ^SYN("2002.010",S1,"TCI",T,SCT,N)=""
"RTN","SYNDHPMAP",63,0)
 Q
"RTN","SYNDHPMAP",64,0)
 ;
"RTN","SYNDHPMAP",65,0)
 ;
"RTN","SYNDHPMAP",66,0)
EXPL ;
"RTN","SYNDHPMAP",67,0)
 S N=0,FN=120.82
"RTN","SYNDHPMAP",68,0)
 F  S N=$O(^GMRD(FN,N)) Q:+N=0  D
"RTN","SYNDHPMAP",69,0)
 .S TX=$P(^GMRD(FN,N,0),U)
"RTN","SYNDHPMAP",70,0)
 .K LEX
"RTN","SYNDHPMAP",71,0)
 .S LEX=$$TXT4CS^LEXTRAN(TX,"SCT")
"RTN","SYNDHPMAP",72,0)
 .I +LEX=-1,$E(TX,$L(TX))="S" S LEX=$$TXT4CS^LEXTRAN($RE($E($RE(TX),2,$L(TX))),"SCT")
"RTN","SYNDHPMAP",73,0)
 .I +LEX=-1,$E($RE(TX),1,2)="SE" S LEX=$$TXT4CS^LEXTRAN($RE($E($RE(TX),3,$L(TX))),"SCT")
"RTN","SYNDHPMAP",74,0)
 .W !,TX,! ZW LEX
"RTN","SYNDHPMAP",75,0)
 Q
"RTN","SYNDHPMAP",76,0)
ALLERGENS ;
"RTN","SYNDHPMAP",77,0)
 D ALMAP
"RTN","SYNDHPMAP",78,0)
 D ALSAVE
"RTN","SYNDHPMAP",79,0)
 Q
"RTN","SYNDHPMAP",80,0)
ALMAP ;
"RTN","SYNDHPMAP",81,0)
 S N=0,FN=120.82
"RTN","SYNDHPMAP",82,0)
 K ALLGNMAP,ALLGNNF,ALLGNANOM
"RTN","SYNDHPMAP",83,0)
 F  S N=$O(^GMRD(FN,N)) Q:+N=0  D
"RTN","SYNDHPMAP",84,0)
 .S ALLGN=$P(^GMRD(FN,N,0),U)
"RTN","SYNDHPMAP",85,0)
 .K ZZL
"RTN","SYNDHPMAP",86,0)
 .S REAX=$$TXT4CS^LEXTRAN(ALLGN,"SCT","ZZL")
"RTN","SYNDHPMAP",87,0)
 .I +REAX=-1,$E(ALLGN,$L(ALLGN))="S" S REAX=$$TXT4CS^LEXTRAN($RE($E($RE(ALLGN),2,$L(ALLGN))),"SCT","ZZL")
"RTN","SYNDHPMAP",88,0)
 .I +REAX=-1,$E($RE(ALLGN),1,2)="SE" S REAX=$$TXT4CS^LEXTRAN($RE($E($RE(ALLGN),3,$L(ALLGN))),"SCT","ZZL") ;W !,REAC,! ZW ZZL R *R
"RTN","SYNDHPMAP",89,0)
 .I REAX="1^1" S ALLGNMAP(N,$O(ZZL(0)),ALLGN)="" Q
"RTN","SYNDHPMAP",90,0)
 .I REAX?1N1"^"1.2N D MULTA Q
"RTN","SYNDHPMAP",91,0)
 .I REAX="0^0" S ALLGNNF(ALLGN)=""
"RTN","SYNDHPMAP",92,0)
 Q
"RTN","SYNDHPMAP",93,0)
MULTA() ;
"RTN","SYNDHPMAP",94,0)
 S M=0
"RTN","SYNDHPMAP",95,0)
 F  S M=$O(ZZL(M)) Q:+M=0  D
"RTN","SYNDHPMAP",96,0)
 .I $D(ALLGNMAP(N)) Q
"RTN","SYNDHPMAP",97,0)
 .K LEX S X=$$CODE^LEXTRAN(M,"SCT") W ! ZW LEX
"RTN","SYNDHPMAP",98,0)
 .I +X=1!(+X=-4) S ALLGNMAP(N,+LEX(0),ALLGN)="" ; W ! ZW REACMAP(N) R *R Q
"RTN","SYNDHPMAP",99,0)
 .S ALLGNANOM(ALLGN)=""
"RTN","SYNDHPMAP",100,0)
 Q
"RTN","SYNDHPMAP",101,0)
ALSAVE ;
"RTN","SYNDHPMAP",102,0)
 S ASUB="ALLERGENS",INDX="ICT"
"RTN","SYNDHPMAP",103,0)
 K ^SYN("2002.010",ASUB)
"RTN","SYNDHPMAP",104,0)
 M ^SYN("2002.010",ASUB,"ICT")=ALLGNMAP
"RTN","SYNDHPMAP",105,0)
 S N="^SYN(""2002.010"","""_ASUB_""","""_INDX_""")"
"RTN","SYNDHPMAP",106,0)
 F  S N=$Q(@N) Q:$QS(N,1)'=ASUB  Q:$QS(N,2)'=INDX  D
"RTN","SYNDHPMAP",107,0)
 .S ^SYN("2002.010",$QS(N,1),"TCI",$QS(N,5),$QS(N,4),$QS(N,3))=""
"RTN","SYNDHPMAP",108,0)
 Q
"RTN","SYNDHPMAP",109,0)
ALLSCO ; missing content
"RTN","SYNDHPMAP",110,0)
 ;
"RTN","SYNDHPMAP",111,0)
 S N=0,FN=120.82,S1="ALLERGENS",S2="ICT"
"RTN","SYNDHPMAP",112,0)
 F  S N=$O(^GMRD(FN,N)) Q:+N=0  D
"RTN","SYNDHPMAP",113,0)
 .I $D(^SYN("2002.010",S1,S2,N)) Q
"RTN","SYNDHPMAP",114,0)
 .S T=^GMRD(FN,N,0)
"RTN","SYNDHPMAP",115,0)
 .W !,T
"RTN","SYNDHPMAP",116,0)
 .R !,"SCT ",SCT
"RTN","SYNDHPMAP",117,0)
 .S ^SYN("2002.010",S1,S2,N,SCT,T)=""
"RTN","SYNDHPMAP",118,0)
 .S ^SYN("2002.010",S1,"TCI",T,SCT,N)=""
"RTN","SYNDHPMAP",119,0)
 Q
"RTN","SYNDHPMAP",120,0)
CLNMAPR3 ; remove carets from index
"RTN","SYNDHPMAP",121,0)
 S N="^SYN(""2002.010"",""REACTIONS"",""TCI"")"
"RTN","SYNDHPMAP",122,0)
 F  S N=$Q(@N) Q:N=""  Q:$QS(N,2)'="TCI"  D
"RTN","SYNDHPMAP",123,0)
 .I $QS(N,3)'["^" Q
"RTN","SYNDHPMAP",124,0)
 .S S3=$P($QS(N,3),"^")
"RTN","SYNDHPMAP",125,0)
 .S ^SYN("2002.010",$QS(N,1),$QS(N,2),S3,$QS(N,4),$QS(N,5))=""
"RTN","SYNDHPMAP",126,0)
 .K ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3))
"RTN","SYNDHPMAP",127,0)
 .W !,N,!,S3
"RTN","SYNDHPMAP",128,0)
 Q
"RTN","SYNDHPMAP",129,0)
CLNMAPA3 ; remove carets from index
"RTN","SYNDHPMAP",130,0)
 S N="^SYN(""2002.010"",""ALLERGENS"",""TCI"")"
"RTN","SYNDHPMAP",131,0)
 F  S N=$Q(@N) Q:N=""  Q:$QS(N,2)'="TCI"  D
"RTN","SYNDHPMAP",132,0)
 .I $QS(N,3)'["^" Q
"RTN","SYNDHPMAP",133,0)
 .S S3=$P($QS(N,3),"^")
"RTN","SYNDHPMAP",134,0)
 .S ^SYN("2002.010",$QS(N,1),$QS(N,2),S3,$QS(N,4),$QS(N,5))=""
"RTN","SYNDHPMAP",135,0)
 .K ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3))
"RTN","SYNDHPMAP",136,0)
 .W !,N,!,S3
"RTN","SYNDHPMAP",137,0)
 Q
"RTN","SYNDHPMAP",138,0)
CLNMAPA5 ; remove carets from index
"RTN","SYNDHPMAP",139,0)
 S N="^SYN(""2002.010"",""ALLERGENS"",""ICT"")"
"RTN","SYNDHPMAP",140,0)
 F  S N=$Q(@N) Q:N=""  Q:$QS(N,2)'="ICT"  D
"RTN","SYNDHPMAP",141,0)
 .I $QS(N,5)'["^" Q
"RTN","SYNDHPMAP",142,0)
 .S S5=$P($QS(N,5),"^")
"RTN","SYNDHPMAP",143,0)
 .S ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3),$QS(N,4),S5)=""
"RTN","SYNDHPMAP",144,0)
 .K ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3),$QS(N,4),$QS(N,5))
"RTN","SYNDHPMAP",145,0)
 .W !,N,!,S5
"RTN","SYNDHPMAP",146,0)
 Q
"RTN","SYNDHPMAP",147,0)
CLNMAPR5 ; remove carets from index
"RTN","SYNDHPMAP",148,0)
 S N="^SYN(""2002.010"",""REACTIONS"",""ICT"")"
"RTN","SYNDHPMAP",149,0)
 F  S N=$Q(@N) Q:N=""  Q:$QS(N,2)'="ICT"  D
"RTN","SYNDHPMAP",150,0)
 .I $QS(N,5)'["^" Q
"RTN","SYNDHPMAP",151,0)
 .S S5=$P($QS(N,5),"^")
"RTN","SYNDHPMAP",152,0)
 .S ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3),$QS(N,4),S5)=""
"RTN","SYNDHPMAP",153,0)
 .K ^SYN("2002.010",$QS(N,1),$QS(N,2),$QS(N,3),$QS(N,4),$QS(N,5))
"RTN","SYNDHPMAP",154,0)
 .W !,N,!,S5
"RTN","SYNDHPMAP",155,0)
 Q
"RTN","SYNDHPMAP",156,0)
igrxnorm ; ingest RxNorm
"RTN","SYNDHPMAP",157,0)
 s fil="RXNCONSO.txt"
"RTN","SYNDHPMAP",158,0)
 s dir="/tmp/"
"RTN","SYNDHPMAP",159,0)
 d OPEN^%ZISH("rxnorm",dir,fil,"R")
"RTN","SYNDHPMAP",160,0)
 f  u IO r t q:t=""  d
"RTN","SYNDHPMAP",161,0)
 .s ^syndhprxn($i(^syndhprxn))=t
"RTN","SYNDHPMAP",162,0)
 d CLOSE^%ZISH("rxnorm")
"RTN","SYNDHPMAP",163,0)
 ; remove ordure from beginning of line 1
"RTN","SYNDHPMAP",164,0)
 s t=^syndhprxn(1)
"RTN","SYNDHPMAP",165,0)
 s t="3"_$p(t,"3",2,$l(t,"3"))
"RTN","SYNDHPMAP",166,0)
 s ^syndhprxn(1)=t 
"RTN","SYNDHPMAP",167,0)
 q
"RTN","SYNDHPMAP",168,0)
idxrxnorm ; index RxNorm
"RTN","SYNDHPMAP",169,0)
 k ^SYN("2002.020")
"RTN","SYNDHPMAP",170,0)
 s n="",p="|"
"RTN","SYNDHPMAP",171,0)
 f  s n=$o(^syndhprxn(n)) q:n=""  d
"RTN","SYNDHPMAP",172,0)
 .s tx=^syndhprxn(n)
"RTN","SYNDHPMAP",173,0)
 .s rxcui=$p(tx,p)
"RTN","SYNDHPMAP",174,0)
 .s code=$p(tx,p,14)
"RTN","SYNDHPMAP",175,0)
 .s codeSystem=$p(tx,p,12)
"RTN","SYNDHPMAP",176,0)
 .s surfaceFormType=$p(tx,p,13)
"RTN","SYNDHPMAP",177,0)
 .s surfaceForm=$p(tx,p,15)
"RTN","SYNDHPMAP",178,0)
 .s ct=$i(^SYN("2002.020",rxcui,codeSystem,code,surfaceFormType))
"RTN","SYNDHPMAP",179,0)
 .s ^SYN("2002.020",rxcui,codeSystem,code,surfaceFormType,ct)=surfaceForm
"RTN","SYNDHPMAP",180,0)
 .i $l(surfaceForm)<200 S ^SYN("2002.020","sf",surfaceForm,surfaceFormType,codeSystem,code)=rxcui
"RTN","SYNDHPMAP",181,0)
 q
"RTN","SYNDHPMAP",182,0)
 ;
"RTN","SYNDHPMAP",183,0)
cVANDFidx ; create VANDF index
"RTN","SYNDHPMAP",184,0)
 ; ^SYN("2002.020","IVANDF",VUID,rxcui)=""
"RTN","SYNDHPMAP",185,0)
 k ^SYN("2002.020","IXVANDF")
"RTN","SYNDHPMAP",186,0)
 s n=0
"RTN","SYNDHPMAP",187,0)
 f  s n=$o(^SYN("2002.020",n)) q:+n=0  d
"RTN","SYNDHPMAP",188,0)
 .i '$d(^SYN("2002.020",n,"VANDF")) q
"RTN","SYNDHPMAP",189,0)
 .s vuid=""
"RTN","SYNDHPMAP",190,0)
 .s vuid=$o(^SYN("2002.020",n,"VANDF",vuid)) q:vuid=""  d
"RTN","SYNDHPMAP",191,0)
 ..s ^SYN("2002.020","IXVANDF",vuid,n)=""
"RTN","SYNDHPMAP",192,0)
 q 
"RTN","SYNDHPMAP",193,0)
LYNX ;
"RTN","SYNDHPMAP",194,0)
 S N=0,F=120.8
"RTN","SYNDHPMAP",195,0)
 F  S N=$O(^GMR(F,N)) Q:+N=0  D
"RTN","SYNDHPMAP",196,0)
 .S INT=$$GET1^DIQ(F,N_",",1,"I")
"RTN","SYNDHPMAP",197,0)
 .S EXT=$$GET1^DIQ(F,N_",",1,"E")
"RTN","SYNDHPMAP",198,0)
 .I $P(INT,";",2)["GMRD" Q
"RTN","SYNDHPMAP",199,0)
 .I $P(INT,";",2)["PSDRUG" D LPSDRUG Q
"RTN","SYNDHPMAP",200,0)
 .I $P(INT,";",2)["PSNDF" D LPSNDF Q
"RTN","SYNDHPMAP",201,0)
 .W !,N,"  -  ",INT,"  -  ",EXT
"RTN","SYNDHPMAP",202,0)
 Q
"RTN","SYNDHPMAP",203,0)
LPSDRUG ;
"RTN","SYNDHPMAP",204,0)
 Q
"RTN","SYNDHPMAP",205,0)
 W !,N,"  -  ",INT,"  -  ",EXT
"RTN","SYNDHPMAP",206,0)
 S PSDIEN=+$P(INT,";")
"RTN","SYNDHPMAP",207,0)
 W !,$$GET1^DIQ(50,PSDIEN_",",64,"E")
"RTN","SYNDHPMAP",208,0)
 S GENNAM=$$GET1^DIQ(50,PSDIEN_",",64,"E")
"RTN","SYNDHPMAP",209,0)
 W !,$O(^PS(50.416,"B",GENNAM,""))
"RTN","SYNDHPMAP",210,0)
 I '$D(^PS(50.416,"B",GENNAM)) W !,"Not found" Q
"RTN","SYNDHPMAP",211,0)
 S FPFOS=$O(^PS(50.416,"B",GENNAM,""))
"RTN","SYNDHPMAP",212,0)
 S VUID=$$GET1^DIQ(50.416,FPFOS_",","VUID")
"RTN","SYNDHPMAP",213,0)
 W !,VUID
"RTN","SYNDHPMAP",214,0)
 Q
"RTN","SYNDHPMAP",215,0)
LPSNDF ;
"RTN","SYNDHPMAP",216,0)
 Q
"RTN","SYNDHPMAP",217,0)
 W !,N,"  -  ",INT,"  -  ",EXT
"RTN","SYNDHPMAP",218,0)
 S PSDIEN=+$P(INT,";")
"RTN","SYNDHPMAP",219,0)
 S VUID=$$GET1^DIQ(50.6,PSDIEN_",","VUID")
"RTN","SYNDHPMAP",220,0)
 W !,VUID
"RTN","SYNDHPMAP",221,0)
 Q
"RTN","SYNDHPMAP",222,0)
sct2icd ;
"RTN","SYNDHPMAP",223,0)
 s n=0,U="^"
"RTN","SYNDHPMAP",224,0)
 s map="sct2icd"
"RTN","SYNDHPMAP",225,0)
 k ^SYN("2002.030",map)
"RTN","SYNDHPMAP",226,0)
 f  s n=$o(^syndhpraw(map,n)) q:n=""  d
"RTN","SYNDHPMAP",227,0)
 .s tx=^syndhpraw(map,n)
"RTN","SYNDHPMAP",228,0)
 .s sct=$p(tx,U,6)
"RTN","SYNDHPMAP",229,0)
 .s surface=$p(tx,U,7)
"RTN","SYNDHPMAP",230,0)
 .s icd=$p(tx,U,12)
"RTN","SYNDHPMAP",231,0)
 .s ^SYN("2002.030",map,n)=sct_U_icd_U_surface
"RTN","SYNDHPMAP",232,0)
 q
"RTN","SYNDHPMAP",233,0)
sct2icdmix ; SNOMED CT to ICD map create indices
"RTN","SYNDHPMAP",234,0)
 ;
"RTN","SYNDHPMAP",235,0)
 s n=0,U="^"
"RTN","SYNDHPMAP",236,0)
 s map="sct2icd"
"RTN","SYNDHPMAP",237,0)
 k ^SYN("2002.030",map,"direct"),^SYN("2002.030",map,"inverse")
"RTN","SYNDHPMAP",238,0)
 f  s n=$o(^SYN("2002.030",map,n)) q:+n=0  d
"RTN","SYNDHPMAP",239,0)
 .s tx=^SYN("2002.030",map,n)
"RTN","SYNDHPMAP",240,0)
 .s sct=$p(tx,U),icd=$p(tx,U,2)
"RTN","SYNDHPMAP",241,0)
 .q:sct=""
"RTN","SYNDHPMAP",242,0)
 .q:icd=""
"RTN","SYNDHPMAP",243,0)
 .s surface=$p(tx,U,3)
"RTN","SYNDHPMAP",244,0)
 .i surface'["(disorder)",surface["(finding)" q
"RTN","SYNDHPMAP",245,0)
 .s ^SYN("2002.030",map,"direct",sct,icd,n)=$p(tx,U,3)
"RTN","SYNDHPMAP",246,0)
 .s ^SYN("2002.030",map,"inverse",icd,sct,n)=$p(tx,U,3)
"RTN","SYNDHPMAP",247,0)
 q
"RTN","SYNDHPMAP",248,0)
sct2icddl ; SNOMED CT to ICD-10 map data load from source file
"RTN","SYNDHPMAP",249,0)
 ; source is UMLS SNOMED CT to ICD10 map
"RTN","SYNDHPMAP",250,0)
 s tb=$c(9),U="^"
"RTN","SYNDHPMAP",251,0)
 s map="sct2icd"
"RTN","SYNDHPMAP",252,0)
 s file="snomed_icd10.txt"
"RTN","SYNDHPMAP",253,0)
 s dir="/tmp/"
"RTN","SYNDHPMAP",254,0)
 d OPEN^%ZISH("maps",dir,file,"R")
"RTN","SYNDHPMAP",255,0)
 i POP=1 w !,"lamentably, I can't see your file" q
"RTN","SYNDHPMAP",256,0)
 u IO f i=1:1 r tx q:tx=""  d
"RTN","SYNDHPMAP",257,0)
 .s ^syndhpraw(map,i)=$tr(tx,tb,U)
"RTN","SYNDHPMAP",258,0)
 d CLOSE^%ZISH("maps")
"RTN","SYNDHPMAP",259,0)
 q
"RTN","SYNDHPMAP",260,0)
MAP(MAP,CODE,DIR) ; Return a mapped code for a given code
"RTN","SYNDHPMAP",261,0)
 ; Input:
"RTN","SYNDHPMAP",262,0)
 ; MAP - mapping to be used
"RTN","SYNDHPMAP",263,0)
 ; CODE - map source code
"RTN","SYNDHPMAP",264,0)
 ; DIR - direction of mapping
"RTN","SYNDHPMAP",265,0)
 ; D for direct (default)
"RTN","SYNDHPMAP",266,0)
 ; I for inverse
"RTN","SYNDHPMAP",267,0)
 ; 
"RTN","SYNDHPMAP",268,0)
 ; Output:
"RTN","SYNDHPMAP",269,0)
 ; 1^map target code
"RTN","SYNDHPMAP",270,0)
 ; or -1^exception
"RTN","SYNDHPMAP",271,0)
 ;
"RTN","SYNDHPMAP",272,0)
 n DOI
"RTN","SYNDHPMAP",273,0)
 s DIR=$G(DIR,"D")
"RTN","SYNDHPMAP",274,0)
 s DOI=$S(DIR="I":"inverse",1:"direct")
"RTN","SYNDHPMAP",275,0)
 i '$d(^SYN("2002.030",MAP)) q "-1^map not recognised"
"RTN","SYNDHPMAP",276,0)
 i '$d(^SYN("2002.030",MAP,DOI,CODE)) q "-1^code not mapped"
"RTN","SYNDHPMAP",277,0)
 q "1^"_$o(^SYN("2002.030",MAP,DOI,CODE,""))
"RTN","SYNDHPMAP",278,0)
 
"RTN","SYNFALG")
0^1^B115948190
"RTN","SYNFALG",1,0)
SYNFALG ;ven/gpl - fhir loader utilities ; 2/20/18 4:11am
"RTN","SYNFALG",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFALG",3,0)
 ;
"RTN","SYNFALG",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFALG",5,0)
 ;
"RTN","SYNFALG",6,0)
 q
"RTN","SYNFALG",7,0)
 ;
"RTN","SYNFALG",8,0)
importAllergy(rtn,ien,args) ; entry point for loading Allergy for a patient
"RTN","SYNFALG",9,0)
 ; calls the intake Allergy web service directly
"RTN","SYNFALG",10,0)
 ;
"RTN","SYNFALG",11,0)
 n grtn
"RTN","SYNFALG",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",13,0)
 d wsIntakeAllergy(.args,,.grtn,ien)
"RTN","SYNFALG",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFALG",15,0)
 . k @root@(ien,"load","allergy")
"RTN","SYNFALG",16,0)
 . m @root@(ien,"load","allergy")=grtn("allergy")
"RTN","SYNFALG",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFALG",18,0)
 s rtn("conditionsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFALG",19,0)
 s rtn("conditionsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFALG",20,0)
 s rtn("conditionsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFALG",21,0)
 ;b
"RTN","SYNFALG",22,0)
 ;
"RTN","SYNFALG",23,0)
 ;
"RTN","SYNFALG",24,0)
 q
"RTN","SYNFALG",25,0)
 ;
"RTN","SYNFALG",26,0)
wsIntakeAllergy(args,body,result,ien) ; web service entry (post)
"RTN","SYNFALG",27,0)
 ; for intake of one or more Allergy. input are fhir resources
"RTN","SYNFALG",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFALG",29,0)
 ; args include patientId
"RTN","SYNFALG",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFALG",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFALG",32,0)
 ;i $g(ien)'="" if $$loadStatus("allergy","",ien)=1 d  q  ;
"RTN","SYNFALG",33,0)
 ;. s result("allergytatus","status")="alreadyLoaded"
"RTN","SYNFALG",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFALG",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"AllergyIntolerance",ien,1)
"RTN","SYNFALG",36,0)
 e  d  ; 
"RTN","SYNFALG",37,0)
 . s args("load")=0
"RTN","SYNFALG",38,0)
 . merge jtmp=BODY
"RTN","SYNFALG",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFALG",40,0)
 ;
"RTN","SYNFALG",41,0)
 i '$d(json) d getRandomAllergy(.json)
"RTN","SYNFALG",42,0)
 ;
"RTN","SYNFALG",43,0)
 i '$d(json) q  ;
"RTN","SYNFALG",44,0)
 m ^gpl("gjson")=json
"RTN","SYNFALG",45,0)
 ;
"RTN","SYNFALG",46,0)
 ; determine the patient
"RTN","SYNFALG",47,0)
 ;
"RTN","SYNFALG",48,0)
 n dfn,eval
"RTN","SYNFALG",49,0)
 if $g(ien)'="" d  ;
"RTN","SYNFALG",50,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFALG",51,0)
 else  d  ;
"RTN","SYNFALG",52,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFALG",53,0)
 . i dfn="" d  ;
"RTN","SYNFALG",54,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFALG",55,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFALG",56,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFALG",57,0)
 . s result("allergy",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFALG",58,0)
 ;
"RTN","SYNFALG",59,0)
 new zi s zi=0
"RTN","SYNFALG",60,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFALG",61,0)
 . ;
"RTN","SYNFALG",62,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFALG",63,0)
 . ;
"RTN","SYNFALG",64,0)
 . new jlog set jlog=$name(eval("allergy",zi))
"RTN","SYNFALG",65,0)
 . ;
"RTN","SYNFALG",66,0)
 . ; insure that the resourceType is AllergyIntolerance
"RTN","SYNFALG",67,0)
 . ;
"RTN","SYNFALG",68,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFALG",69,0)
 . if type'="AllergyIntolerance" do  quit  ;
"RTN","SYNFALG",70,0)
 . . set eval("allergy",zi,"vars","resourceType")=type
"RTN","SYNFALG",71,0)
 . . do log(jlog,"Resource type not AllergyIntolerance, skipping entry")
"RTN","SYNFALG",72,0)
 . set eval("allergy",zi,"vars","resourceType")=type
"RTN","SYNFALG",73,0)
 . ;
"RTN","SYNFALG",74,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFALG",75,0)
 . ;
"RTN","SYNFALG",76,0)
 . if $g(ien)'="" if $$loadStatus("allergy",zi,ien)=1 do  quit  ;
"RTN","SYNFALG",77,0)
 . . d log(jlog,"Allergy already loaded, skipping")
"RTN","SYNFALG",78,0)
 . ;
"RTN","SYNFALG",79,0)
 . ; determine Allergy snomed code, coding system, and display text
"RTN","SYNFALG",80,0)
 . ;
"RTN","SYNFALG",81,0)
 . ;
"RTN","SYNFALG",82,0)
 . ; determine the id of the resource
"RTN","SYNFALG",83,0)
 . ;
"RTN","SYNFALG",84,0)
 . ;new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFALG",85,0)
 . ;set eval("allergy",zi,"vars","id")=id
"RTN","SYNFALG",86,0)
 . ;d log(jlog,"ID is: "_id)
"RTN","SYNFALG",87,0)
 . ;
"RTN","SYNFALG",88,0)
 . new sctcode set sctcode=$get(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFALG",89,0)
 . do log(jlog,"code is: "_sctcode)
"RTN","SYNFALG",90,0)
 . set eval("allergy",zi,"vars","code")=sctcode
"RTN","SYNFALG",91,0)
 . ;
"RTN","SYNFALG",92,0)
 . ;
"RTN","SYNFALG",93,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","code","coding",1,"system"))
"RTN","SYNFALG",94,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFALG",95,0)
 . set eval("allergy",zi,"vars","codeSystem")=codesystem
"RTN","SYNFALG",96,0)
 . ;
"RTN","SYNFALG",97,0)
 . ; determine the onset date and time
"RTN","SYNFALG",98,0)
 . ;
"RTN","SYNFALG",99,0)
 . new onsetdate set onsetdate=$get(json("entry",zi,"resource","assertedDate"))
"RTN","SYNFALG",100,0)
 . do log(jlog,"onsetDateTime is: "_onsetdate)
"RTN","SYNFALG",101,0)
 . set eval("allergy",zi,"vars","onsetDateTime")=onsetdate
"RTN","SYNFALG",102,0)
 . new fmOnsetDateTime s fmOnsetDateTime=$$fhirTfm^SYNFUTL(onsetdate)
"RTN","SYNFALG",103,0)
 . d log(jlog,"fileman onsetDateTime is: "_fmOnsetDateTime)
"RTN","SYNFALG",104,0)
 . set eval("allergy",zi,"vars","fmOnsetDateTime")=fmOnsetDateTime ;
"RTN","SYNFALG",105,0)
 . new hl7OnsetDateTime s hl7OnsetDateTime=$$fhirThl7^SYNFUTL(onsetdate)
"RTN","SYNFALG",106,0)
 . d log(jlog,"hl7 onsetDateTime is: "_hl7OnsetDateTime)
"RTN","SYNFALG",107,0)
 . set eval("allergy",zi,"vars","hl7OnsetDateTime")=hl7OnsetDateTime ;
"RTN","SYNFALG",108,0)
 . ;
"RTN","SYNFALG",109,0)
 . ; determine clinical status (active vs inactive)
"RTN","SYNFALG",110,0)
 . ;
"RTN","SYNFALG",111,0)
 . n clinicalstatus set clinicalstatus=$get(json("entry",zi,"resource","verificationStatus"))
"RTN","SYNFALG",112,0)
 . ;
"RTN","SYNFALG",113,0)
 . ;
"RTN","SYNFALG",114,0)
 . ; set up to call the data loader
"RTN","SYNFALG",115,0)
 . ;
"RTN","SYNFALG",116,0)
 . ;ALLERGY^ISIIMP10(ISIRESUL,ISIMISC)          
"RTN","SYNFALG",117,0)
 .;;NAME             |TYPE       |FILE,FIELD |DESC
"RTN","SYNFALG",118,0)
 .;;-----------------------------------------------------------------------
"RTN","SYNFALG",119,0)
 .;;ALLERGEN         |FIELD      |120.82,.01 |
"RTN","SYNFALG",120,0)
 .;;SYMPTOM          |MULTIPLE   |120.83,.01 |Multiple,"|" (bar) delimited, working off #120.83
"RTN","SYNFALG",121,0)
 .;;PAT_SSN          |FIELD      |120.86,.01 |PATIENT (#2, .09) pointer
"RTN","SYNFALG",122,0)
 .;;ORIG_DATE        |FIELD      |120.8,4    |
"RTN","SYNFALG",123,0)
 .;;ORIGINTR         |FIELD      |120.8,5    |PERSON (#200)
"RTN","SYNFALG",124,0)
 .;;HISTORIC         |BOOLEEN    |           |1=HISTORICAL, 0=OBSERVED
"RTN","SYNFALG",125,0)
 .;;OBSRV_DT         |FIELD      |           |Observation Date (if HISTORIC=0)
"RTN","SYNFALG",126,0)
 .;
"RTN","SYNFALG",127,0)
 . n RESTA,ISIMISC
"RTN","SYNFALG",128,0)
 . ;
"RTN","SYNFALG",129,0)
 . s ISIMISC("ALLERGEN")=$get(json("entry",zi,"resource","code","coding",1,"display"))
"RTN","SYNFALG",130,0)
 . n algy s algy=$$ISGMR(sctcode)
"RTN","SYNFALG",131,0)
 . i algy'=-1 s ISIMISC("ALLERGEN")=$p(algy,"^",2)
"RTN","SYNFALG",132,0)
 . s eval("allergy",zi,"parms","ALLERGEN")=ISIMISC("ALLERGEN")
"RTN","SYNFALG",133,0)
 . ;
"RTN","SYNFALG",134,0)
 . s ISIMISC("SYMPTOM")=$get(json("entry",zi,"resource","reaction",1,"description"))
"RTN","SYNFALG",135,0)
 . s eval("allergy",zi,"parms","SYMPTOM")=ISIMISC("SYMPTOM")
"RTN","SYNFALG",136,0)
 . ;
"RTN","SYNFALG",137,0)
 . s ISIMISC("ORIGINTR")="USER,THREE"
"RTN","SYNFALG",138,0)
 . s eval("allergy",zi,"parms","ORIGINTR")=ISIMISC("ORIGINTR")
"RTN","SYNFALG",139,0)
 . ;
"RTN","SYNFALG",140,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFALG",141,0)
 . s eval("allergy",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFALG",142,0)
 . s ISIMISC("PAT_SSN")=$$GET1^DIQ(2,dfn_",",.09)
"RTN","SYNFALG",143,0)
 . s eval("allergy",zi,"parms","PAT_SSN")=ISIMISC("PAT_SSN")
"RTN","SYNFALG",144,0)
 . ;
"RTN","SYNFALG",145,0)
 . s DHPSCT=sctcode
"RTN","SYNFALG",146,0)
 . s eval("allergy",zi,"parms","DHPSCT")=DHPSCT
"RTN","SYNFALG",147,0)
 . ;
"RTN","SYNFALG",148,0)
 . s DHPCLNST=$S(clinicalstatus="Active":"A",1:"I")
"RTN","SYNFALG",149,0)
 . s eval("allergy",zi,"parms","DHPCLNST")=DHPCLNST
"RTN","SYNFALG",150,0)
 . ;
"RTN","SYNFALG",151,0)
 . s DHPONS=hl7OnsetDateTime
"RTN","SYNFALG",152,0)
 . s eval("allergy",zi,"parms","DHPONS")=DHPONS
"RTN","SYNFALG",153,0)
 . s ISIMISC("ORIG_DATE")=fmOnsetDateTime
"RTN","SYNFALG",154,0)
 . s eval("allergy",zi,"parms","ORIG_DATE")=ISIMISC("ORIG_DATE")
"RTN","SYNFALG",155,0)
 . s ISIMISC("HISTORIC")=1
"RTN","SYNFALG",156,0)
 . s eval("allergy",zi,"parms","HISTORIC")=ISIMISC("HISTORIC")
"RTN","SYNFALG",157,0)
 . ;
"RTN","SYNFALG",158,0)
 . s DHPPROV=$$MAP^SYNQLDM("OP","provider") ; map should return the NPI number
"RTN","SYNFALG",159,0)
 . s eval("allergy",zi,"parms","DHPPROV")=DHPPROV
"RTN","SYNFALG",160,0)
 . d log(jlog,"Provider NPI for outpatient is: "_DHPPROV)
"RTN","SYNFALG",161,0)
 . ;
"RTN","SYNFALG",162,0)
 . ;s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFALG",163,0)
 . ;n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFALG",164,0)
 . ;if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFALG",165,0)
 . ;s eval("allergy",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFALG",166,0)
 . ;d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFALG",167,0)
 . ;
"RTN","SYNFALG",168,0)
 . s eval("allergy",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFALG",169,0)
 . ;
"RTN","SYNFALG",170,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFALG",171,0)
 . . if $g(ien)'="" if $$loadStatus("allergy",zi,ien)=1 do  quit  ;
"RTN","SYNFALG",172,0)
 . . . d log(jlog,"Allergy already loaded, skipping")
"RTN","SYNFALG",173,0)
 . . d log(jlog,"Calling ALLERGY^ISIIMP10 to add allergy")
"RTN","SYNFALG",174,0)
 . . D ALLERGY^ISIIMP10(.RETSTA,.ISIMISC)
"RTN","SYNFALG",175,0)
 . . m eval("allergy",zi,"status")=RESTA
"RTN","SYNFALG",176,0)
 . . d log(jlog,"Return from data loader was: "_$g(ISIRC))
"RTN","SYNFALG",177,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFALG",178,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFALG",179,0)
 . . . s eval("allergy",zi,"status","loadstatus")="loaded"
"RTN","SYNFALG",180,0)
 . . else  d  ;
"RTN","SYNFALG",181,0)
 . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFALG",182,0)
 . . . s eval("allergy",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFALG",183,0)
 . . . s eval("allergy",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFALG",184,0)
 . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",185,0)
 . . k @root@(ien,"load","allergy",zi)
"RTN","SYNFALG",186,0)
 . . m @root@(ien,"load","allergy",zi)=eval("allergy",zi)
"RTN","SYNFALG",187,0)
 ;
"RTN","SYNFALG",188,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFALG",189,0)
 . m jrslt("source")=json
"RTN","SYNFALG",190,0)
 . m jrslt("args")=args
"RTN","SYNFALG",191,0)
 . m jrslt("eval")=eval
"RTN","SYNFALG",192,0)
 m jrslt("allergyStatus")=eval("allergyStatus")
"RTN","SYNFALG",193,0)
 set jrslt("result","status")="ok"
"RTN","SYNFALG",194,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFALG",195,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFALG",196,0)
 . m result=eval
"RTN","SYNFALG",197,0)
 . m result("status")=jrslt("result")
"RTN","SYNFALG",198,0)
 . m result("dfn")=dfn
"RTN","SYNFALG",199,0)
 . m result("ien")=ien
"RTN","SYNFALG",200,0)
 . ;b
"RTN","SYNFALG",201,0)
 e  d  ;
"RTN","SYNFALG",202,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFALG",203,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFALG",204,0)
 q
"RTN","SYNFALG",205,0)
 ;
"RTN","SYNFALG",206,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFALG",207,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFALG",208,0)
 q
"RTN","SYNFALG",209,0)
 ;
"RTN","SYNFALG",210,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFALG",211,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",212,0)
 n rt s rt=0
"RTN","SYNFALG",213,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFALG",214,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFALG",215,0)
 q rt
"RTN","SYNFALG",216,0)
 ;
"RTN","SYNFALG",217,0)
testall ; run the allergy import on all imported patients
"RTN","SYNFALG",218,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",219,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFALG",220,0)
 n dfn,ien,filter,reslt
"RTN","SYNFALG",221,0)
 s dfn=0
"RTN","SYNFALG",222,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFALG",223,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFALG",224,0)
 . q:ien=""
"RTN","SYNFALG",225,0)
 . s filter("dfn")=dfn
"RTN","SYNFALG",226,0)
 . k reslt
"RTN","SYNFALG",227,0)
 . d wsIntakeAllergy(.filter,,.reslt,ien)
"RTN","SYNFALG",228,0)
 q
"RTN","SYNFALG",229,0)
 ;
"RTN","SYNFALG",230,0)
testone(reslt,doload) ; run the allergy import on one imported patient
"RTN","SYNFALG",231,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",232,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFALG",233,0)
 n dfn,ien,filter
"RTN","SYNFALG",234,0)
 n done s done=0
"RTN","SYNFALG",235,0)
 s dfn=0
"RTN","SYNFALG",236,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  q:done   d  ;
"RTN","SYNFALG",237,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFALG",238,0)
 . q:ien=""
"RTN","SYNFALG",239,0)
 . q:$d(@root@(ien,"load","allergy"))
"RTN","SYNFALG",240,0)
 . s filter("dfn")=dfn
"RTN","SYNFALG",241,0)
 . s filter("debug")=1
"RTN","SYNFALG",242,0)
 . i $g(doload)=1 s filter("load")=1
"RTN","SYNFALG",243,0)
 . k reslt
"RTN","SYNFALG",244,0)
 . d wsIntakeAllergy(.filter,,.reslt,ien)
"RTN","SYNFALG",245,0)
 . s done=1
"RTN","SYNFALG",246,0)
 q
"RTN","SYNFALG",247,0)
 ;
"RTN","SYNFALG",248,0)
getRandomAllergy(ary) ; make a web service call to get random allergies
"RTN","SYNFALG",249,0)
 n srvr
"RTN","SYNFALG",250,0)
 s srvr="http://postfhir.vistaplex.org:9080/"
"RTN","SYNFALG",251,0)
 i srvr["postfhir.vistaplex.org" s srvr="http://138.197.70.229:9080/"
"RTN","SYNFALG",252,0)
 i $g(^%WURL)["http://postfhir.vistaplex.org:9080" d  q  ;
"RTN","SYNFALG",253,0)
 . s srvr="localhost:9080/"
"RTN","SYNFALG",254,0)
 . n url
"RTN","SYNFALG",255,0)
 . s url=srvr_"randomAllergy"
"RTN","SYNFALG",256,0)
 . n ok,r1
"RTN","SYNFALG",257,0)
 . s ok=$$%^%WC(.r1,"GET",url)
"RTN","SYNFALG",258,0)
 . i '$d(r1) q  ;
"RTN","SYNFALG",259,0)
 . d DECODE^VPRJSON("r1","ary")
"RTN","SYNFALG",260,0)
 n url
"RTN","SYNFALG",261,0)
 s url=srvr_"randomAllergy"
"RTN","SYNFALG",262,0)
 n ret,json,jtmp
"RTN","SYNFALG",263,0)
 s ret=$$GETURL^XTHC10(url,,"jtmp")
"RTN","SYNFALG",264,0)
 d assemble^SYNFPUL("jtmp","json")
"RTN","SYNFALG",265,0)
 i '$d(json) q  ;
"RTN","SYNFALG",266,0)
 d DECODE^VPRJSON("json","ary")
"RTN","SYNFALG",267,0)
 q
"RTN","SYNFALG",268,0)
 ;
"RTN","SYNFALG",269,0)
ISGMR(CDE) ; extrinsic return the ien and allergy name in GMR ALLERGIES if any
"RTN","SYNFALG",270,0)
 ; CDE is a snomed code. returns -1 if not found
"RTN","SYNFALG",271,0)
 N VUID
"RTN","SYNFALG",272,0)
 S VUID=$$MAP^SYNQLDM(CDE)
"RTN","SYNFALG",273,0)
 W !,CDE," VUID:",VUID
"RTN","SYNFALG",274,0)
 I VUID="" Q -1
"RTN","SYNFALG",275,0)
 N IEN
"RTN","SYNFALG",276,0)
 S IEN=$O(^GMRD(120.82,"AVUID",VUID,""))
"RTN","SYNFALG",277,0)
 I IEN="" Q -1
"RTN","SYNFALG",278,0)
 N R1 S R1=IEN_"^"_$$GET1^DIQ(120.82,IEN_",",.01)
"RTN","SYNFALG",279,0)
 Q R1
"RTN","SYNFALG",280,0)
 ;
"RTN","SYNFALG",281,0)
QADDALGY(ALGY,ADATE,ien) ; adds an allergy to the queue to be processed
"RTN","SYNFALG",282,0)
 ; used by Problems processing include allergies in VistA allergies
"RTN","SYNFALG",283,0)
 ; ALGY is the name of the allergy. ADATE is the date of the allergy
"RTN","SYNFALG",284,0)
 ; ien is the patient being processed
"RTN","SYNFALG",285,0)
 i '$d(ien) q  ;
"RTN","SYNFALG",286,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFALG",287,0)
 n groot s groot=$na(@root@(ien,"load","ALLERGY2ADD"))
"RTN","SYNFALG",288,0)
 n aien s aien=$o(@groot@(" "),-1)+1
"RTN","SYNFALG",289,0)
 s @groot@(aien,"allergy")=$g(ALGY)
"RTN","SYNFALG",290,0)
 s @groot@(aien,"date")=$g(ADATE)
"RTN","SYNFALG",291,0)
 q
"RTN","SYNFALG",292,0)
 ;
"RTN","SYNFALG",293,0)
 
"RTN","SYNFAPT")
0^2^B88487131
"RTN","SYNFAPT",1,0)
SYNFAPT ;ven/gpl - fhir loader utilities ; 2/20/18 4:11am
"RTN","SYNFAPT",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFAPT",3,0)
 ;
"RTN","SYNFAPT",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFAPT",5,0)
 ;
"RTN","SYNFAPT",6,0)
 q
"RTN","SYNFAPT",7,0)
 ;
"RTN","SYNFAPT",8,0)
importAppointment(rtn,ien,args) ; entry point for loading Appointment for a patient
"RTN","SYNFAPT",9,0)
 ; calls the intake Appointment web service directly
"RTN","SYNFAPT",10,0)
 ;
"RTN","SYNFAPT",11,0)
 n grtn
"RTN","SYNFAPT",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFAPT",13,0)
 d wsIntakeAppointment(.args,,.grtn,ien)
"RTN","SYNFAPT",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFAPT",15,0)
 . k @root@(ien,"load","appointment")
"RTN","SYNFAPT",16,0)
 . m @root@(ien,"load","appointment")=grtn("appointment")
"RTN","SYNFAPT",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFAPT",18,0)
 s rtn("conditionsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFAPT",19,0)
 s rtn("conditionsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFAPT",20,0)
 s rtn("conditionsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFAPT",21,0)
 ;b
"RTN","SYNFAPT",22,0)
 ;
"RTN","SYNFAPT",23,0)
 ;
"RTN","SYNFAPT",24,0)
 q
"RTN","SYNFAPT",25,0)
 ;
"RTN","SYNFAPT",26,0)
wsIntakeAppointment(args,body,result,ien) ; web service entry (post)
"RTN","SYNFAPT",27,0)
 ; for intake of one or more Appointment. input are fhir resources
"RTN","SYNFAPT",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFAPT",29,0)
 ; args include patientId
"RTN","SYNFAPT",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFAPT",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFAPT",32,0)
 ;i $g(ien)'="" if $$loadStatus("appointment","",ien)=1 d  q  ;
"RTN","SYNFAPT",33,0)
 ;. s result("appointmenttatus","status")="alreadyLoaded"
"RTN","SYNFAPT",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFAPT",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Appointment",ien,1)
"RTN","SYNFAPT",36,0)
 e  d  ; 
"RTN","SYNFAPT",37,0)
 . s args("load")=0
"RTN","SYNFAPT",38,0)
 . merge jtmp=BODY
"RTN","SYNFAPT",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFAPT",40,0)
 if '$d(json) d  ; if no appointment, get a random set of appointments
"RTN","SYNFAPT",41,0)
 . d getRandomApt(.json) ; get a random set of appointments
"RTN","SYNFAPT",42,0)
 i '$d(json) q  ;
"RTN","SYNFAPT",43,0)
 m ^gpl("gjson")=json
"RTN","SYNFAPT",44,0)
 ;b
"RTN","SYNFAPT",45,0)
 ;
"RTN","SYNFAPT",46,0)
 ; determine the patient
"RTN","SYNFAPT",47,0)
 ;
"RTN","SYNFAPT",48,0)
 n dfn,eval
"RTN","SYNFAPT",49,0)
 if $g(ien)'="" d  ;
"RTN","SYNFAPT",50,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFAPT",51,0)
 else  d  ;
"RTN","SYNFAPT",52,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFAPT",53,0)
 . i dfn="" d  ;
"RTN","SYNFAPT",54,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFAPT",55,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFAPT",56,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFAPT",57,0)
 . s result("appointment",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFAPT",58,0)
 ;
"RTN","SYNFAPT",59,0)
 ;
"RTN","SYNFAPT",60,0)
 new zi s zi=0
"RTN","SYNFAPT",61,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFAPT",62,0)
 . ;
"RTN","SYNFAPT",63,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFAPT",64,0)
 . ;
"RTN","SYNFAPT",65,0)
 . new jlog set jlog=$name(eval("appointment",zi))
"RTN","SYNFAPT",66,0)
 . ;
"RTN","SYNFAPT",67,0)
 . ; insure that the resourceType is Apppointment
"RTN","SYNFAPT",68,0)
 . ;
"RTN","SYNFAPT",69,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFAPT",70,0)
 . if type'="Appointment" do  quit  ;
"RTN","SYNFAPT",71,0)
 . . set eval("appointment",zi,"vars","resourceType")=type
"RTN","SYNFAPT",72,0)
 . . do log(jlog,"Resource type not Appointment, skipping entry")
"RTN","SYNFAPT",73,0)
 . set eval("appointment",zi,"vars","resourceType")=type
"RTN","SYNFAPT",74,0)
 . ;
"RTN","SYNFAPT",75,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFAPT",76,0)
 . ;
"RTN","SYNFAPT",77,0)
 . if $g(ien)'="" if $$loadStatus("appointment",zi,ien)=1 do  quit  ;
"RTN","SYNFAPT",78,0)
 . . d log(jlog,"Appointment already loaded, skipping")
"RTN","SYNFAPT",79,0)
 . ;
"RTN","SYNFAPT",80,0)
 . ; determine the id of the resource
"RTN","SYNFAPT",81,0)
 . ;
"RTN","SYNFAPT",82,0)
 . ;new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFAPT",83,0)
 . ;set eval("appointment",zi,"vars","id")=id
"RTN","SYNFAPT",84,0)
 . ;d log(jlog,"ID is: "_id)
"RTN","SYNFAPT",85,0)
 . ;
"RTN","SYNFAPT",86,0)
 . ; determine the onset date and time
"RTN","SYNFAPT",87,0)
 . ;
"RTN","SYNFAPT",88,0)
 . new startdate set startdate=$get(json("entry",zi,"resource","start"))
"RTN","SYNFAPT",89,0)
 . do log(jlog,"startDateTime is: "_startdate)
"RTN","SYNFAPT",90,0)
 . set eval("appointment",zi,"vars","startDateTime")=startdate
"RTN","SYNFAPT",91,0)
 . new fmStartDateTime s fmStartDateTime=$$fhirTfm^SYNFUTL(startdate)
"RTN","SYNFAPT",92,0)
 . d log(jlog,"fileman startDateTime is: "_fmStartDateTime)
"RTN","SYNFAPT",93,0)
 . set eval("appointment",zi,"vars","fmStarttDateTime")=fmStartDateTime ;
"RTN","SYNFAPT",94,0)
 . new hl7StartDateTime s hl7StartDateTime=$$fhirThl7^SYNFUTL(startdate)
"RTN","SYNFAPT",95,0)
 . d log(jlog,"hl7 startDateTime is: "_hl7StartDateTime)
"RTN","SYNFAPT",96,0)
 . set eval("appointment",zi,"vars","hl7StartDateTime")=hl7StartDateTime ;
"RTN","SYNFAPT",97,0)
 . ;
"RTN","SYNFAPT",98,0)
 . ; determine clinical status (active vs inactive)
"RTN","SYNFAPT",99,0)
 . ;
"RTN","SYNFAPT",100,0)
 . n clinicalstatus set clinicalstatus=$get(json("entry",zi,"resource","status"))
"RTN","SYNFAPT",101,0)
 . ;
"RTN","SYNFAPT",102,0)
 . ; set up to call the data loader
"RTN","SYNFAPT",103,0)
 . ;
"RTN","SYNFAPT",104,0)
 . ;APPTADD(RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN) ;Create appointment
"RTN","SYNFAPT",105,0)
 . ;
"RTN","SYNFAPT",106,0)
 . ; Input:
"RTN","SYNFAPT",107,0)
 . ;   DHPPAT   - Patient ICN (required)
"RTN","SYNFAPT",108,0)
 . ;   DHPCLIN  - Clinic Name (required)
"RTN","SYNFAPT",109,0)
 . ;   DHPAPTDT - Appointment Date & Time (required) all dates received in HL7 format
"RTN","SYNFAPT",110,0)
 . ;   DHPLEN   - Appointment length as minutes (optional, defaults to 15 mins.)
"RTN","SYNFAPT",111,0)
 . ;
"RTN","SYNFAPT",112,0)
 . ; Output:   RETSTA
"RTN","SYNFAPT",113,0)
 . ;  1 - success
"RTN","SYNFAPT",114,0)
 . ; -1 - failure -1^message
"RTN","SYNFAPT",115,0)
 . ;
"RTN","SYNFAPT",116,0)
 . n RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN,DHPCIDT,DHPCODT
"RTN","SYNFAPT",117,0)
 . s (RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN,DHPCIDT,DHPCODT)=""      ;Appointment update
"RTN","SYNFAPT",118,0)
 . ;
"RTN","SYNFAPT",119,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFAPT",120,0)
 . s eval("appointment",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFAPT",121,0)
 . ;
"RTN","SYNFAPT",122,0)
 . s DHPAPTDT=hl7StartDateTime
"RTN","SYNFAPT",123,0)
 . s eval("appointment",zi,"parms","DHPAPTDT")=DHPAPTDT
"RTN","SYNFAPT",124,0)
 . ;
"RTN","SYNFAPT",125,0)
 . ;s DHPPROV=$$MAP^SYNQLDM("OP","provider") ; map should return the NPI number
"RTN","SYNFAPT",126,0)
 . ;n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",DHPPROV,""))
"RTN","SYNFAPT",127,0)
 . ;if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFAPT",128,0)
 . ;s eval("appointment",zi,"parms","DHPPROV")=DHPPROV
"RTN","SYNFAPT",129,0)
 . ; log(jlog,"Provider NPI for outpatient is: "_DHPPROV)
"RTN","SYNFAPT",130,0)
 . ;
"RTN","SYNFAPT",131,0)
 . s DHPCLIN=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFAPT",132,0)
 . n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPCLIN,""))
"RTN","SYNFAPT",133,0)
 . if DHPLOCIEN="" S DHPLOCIEN=4 S DHPCLIN=$$GET1^DIQ(44,DHPLOCIEN_",",.01)
"RTN","SYNFAPT",134,0)
 . s eval("appointment",zi,"parms","DHPCLIN")=DHPCLIN
"RTN","SYNFAPT",135,0)
 . d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPCLIN)
"RTN","SYNFAPT",136,0)
 . ;
"RTN","SYNFAPT",137,0)
 . s eval("appointment",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFAPT",138,0)
 . ;
"RTN","SYNFAPT",139,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFAPT",140,0)
 . . if $g(ien)'="" if $$loadStatus("appointment",zi,ien)=1 do  quit  ;
"RTN","SYNFAPT",141,0)
 . . . d log(jlog,"Appointment already loaded, skipping")
"RTN","SYNFAPT",142,0)
 . . d log(jlog,"Calling APPTUPDT^SYNDHP62 to add appointment")
"RTN","SYNFAPT",143,0)
 . . D APPTADD^SYNDHP62(.RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN) ;Create appointment
"RTN","SYNFAPT",144,0)
 . . ;D APPTUPDT^SYNDHP62(.RETSTA,DHPPAT,DHPCLIN,DHPAPTDT,DHPLEN,DHPCIDT,DHPCODT)	;Appointment update
"RTN","SYNFAPT",145,0)
 . . m eval("appointment",zi,"status")=RETSTA
"RTN","SYNFAPT",146,0)
 . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFAPT",147,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFAPT",148,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFAPT",149,0)
 . . . s eval("appointment",zi,"status","loadstatus")="loaded"
"RTN","SYNFAPT",150,0)
 . . else  d  ;
"RTN","SYNFAPT",151,0)
 . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFAPT",152,0)
 . . . s eval("appointment",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFAPT",153,0)
 . . . s eval("appointment",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFAPT",154,0)
 . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFAPT",155,0)
 . . k @root@(ien,"load","appointment",zi)
"RTN","SYNFAPT",156,0)
 . . m @root@(ien,"load","appointment",zi)=eval("appointment",zi)
"RTN","SYNFAPT",157,0)
 ;
"RTN","SYNFAPT",158,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFAPT",159,0)
 . m jrslt("source")=json
"RTN","SYNFAPT",160,0)
 . m jrslt("args")=args
"RTN","SYNFAPT",161,0)
 . m jrslt("eval")=eval
"RTN","SYNFAPT",162,0)
 m jrslt("appointmentStatus")=eval("appointmentStatus")
"RTN","SYNFAPT",163,0)
 set jrslt("result","status")="ok"
"RTN","SYNFAPT",164,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFAPT",165,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFAPT",166,0)
 . m result=eval
"RTN","SYNFAPT",167,0)
 . m result("status")=jrslt("result")
"RTN","SYNFAPT",168,0)
 . m result("dfn")=dfn
"RTN","SYNFAPT",169,0)
 . m result("ien")=ien
"RTN","SYNFAPT",170,0)
 . ;b
"RTN","SYNFAPT",171,0)
 e  d  ;
"RTN","SYNFAPT",172,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFAPT",173,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFAPT",174,0)
 q
"RTN","SYNFAPT",175,0)
 ;
"RTN","SYNFAPT",176,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFAPT",177,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFAPT",178,0)
 q
"RTN","SYNFAPT",179,0)
 ;
"RTN","SYNFAPT",180,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFAPT",181,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFAPT",182,0)
 n rt s rt=0
"RTN","SYNFAPT",183,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFAPT",184,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFAPT",185,0)
 q rt
"RTN","SYNFAPT",186,0)
 ;
"RTN","SYNFAPT",187,0)
testall ; run the appointment import on all imported patients
"RTN","SYNFAPT",188,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFAPT",189,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFAPT",190,0)
 n dfn,ien,filter,reslt
"RTN","SYNFAPT",191,0)
 s dfn=0
"RTN","SYNFAPT",192,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFAPT",193,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFAPT",194,0)
 . q:ien=""
"RTN","SYNFAPT",195,0)
 . s filter("dfn")=dfn
"RTN","SYNFAPT",196,0)
 . k reslt
"RTN","SYNFAPT",197,0)
 . d wsIntakeAppointment(.filter,,.reslt,ien)
"RTN","SYNFAPT",198,0)
 q
"RTN","SYNFAPT",199,0)
 ;
"RTN","SYNFAPT",200,0)
testone(reslt,doload) ; run the appointment import on imported patient
"RTN","SYNFAPT",201,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFAPT",202,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFAPT",203,0)
 n dfn,ien,filter
"RTN","SYNFAPT",204,0)
 n done s done=0
"RTN","SYNFAPT",205,0)
 s dfn=0
"RTN","SYNFAPT",206,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  q:done   d  ;
"RTN","SYNFAPT",207,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFAPT",208,0)
 . q:ien=""
"RTN","SYNFAPT",209,0)
 . q:$d(@root@(ien,"load","appointment"))
"RTN","SYNFAPT",210,0)
 . s filter("dfn")=dfn
"RTN","SYNFAPT",211,0)
 . s filter("debug")=1
"RTN","SYNFAPT",212,0)
 . i $g(doload)=1 s filter("load")=1
"RTN","SYNFAPT",213,0)
 . k reslt
"RTN","SYNFAPT",214,0)
 . ;w !,"loading appointments for ien=",ien,!
"RTN","SYNFAPT",215,0)
 . d wsIntakeAppointment(.filter,,.reslt,ien)
"RTN","SYNFAPT",216,0)
 . ;zwr reslt
"RTN","SYNFAPT",217,0)
 . s done=1
"RTN","SYNFAPT",218,0)
 q
"RTN","SYNFAPT",219,0)
 ;
"RTN","SYNFAPT",220,0)
getRandomApt(ary) ; make a web service call to get random appointments
"RTN","SYNFAPT",221,0)
 n srvr
"RTN","SYNFAPT",222,0)
 s srvr="http://postfhir.vistaplex.org:9080/"
"RTN","SYNFAPT",223,0)
 i srvr["postfhir.vistaplex.org" s srvr="http://138.197.70.229:9080/"
"RTN","SYNFAPT",224,0)
 i $g(^%WURL)["http://postfhir.vistaplex.org:9080" d  q  ;
"RTN","SYNFAPT",225,0)
 . s srvr="localhost:9080/"
"RTN","SYNFAPT",226,0)
 . n url
"RTN","SYNFAPT",227,0)
 . s url=srvr_"randomappointment"
"RTN","SYNFAPT",228,0)
 . n ok,r1
"RTN","SYNFAPT",229,0)
 . s ok=$$%^%WC(.r1,"GET",url)
"RTN","SYNFAPT",230,0)
 . i '$d(r1) q  ;
"RTN","SYNFAPT",231,0)
 . d DECODE^VPRJSON("r1","ary")
"RTN","SYNFAPT",232,0)
 n url
"RTN","SYNFAPT",233,0)
 s url=srvr_"randomAllergy"
"RTN","SYNFAPT",234,0)
 n ret,json,jtmp
"RTN","SYNFAPT",235,0)
 s ret=$$GETURL^XTHC10(url,,"jtmp")
"RTN","SYNFAPT",236,0)
 d assemble^SYNFPUL("jtmp","json")
"RTN","SYNFAPT",237,0)
 i '$d(json) q  ;
"RTN","SYNFAPT",238,0)
 d DECODE^VPRJSON("json","ary")
"RTN","SYNFAPT",239,0)
 q
"RTN","SYNFAPT",240,0)
 ;
"RTN","SYNFCON")
0^3^B73890537
"RTN","SYNFCON",1,0)
SYNFCON ;ven/gpl - fhir loader utilities ; 10/19/17 4:33pm
"RTN","SYNFCON",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFCON",3,0)
 ;
"RTN","SYNFCON",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFCON",5,0)
 ;
"RTN","SYNFCON",6,0)
 q
"RTN","SYNFCON",7,0)
 ;
"RTN","SYNFCON",8,0)
importConditions(rtn,ien,args) ; entry point for loading conditions for a patient
"RTN","SYNFCON",9,0)
 ; calls the intake Conditions web service directly
"RTN","SYNFCON",10,0)
 ;
"RTN","SYNFCON",11,0)
 n grtn
"RTN","SYNFCON",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFCON",13,0)
 d wsIntakeConditions(.args,,.grtn,ien)
"RTN","SYNFCON",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFCON",15,0)
 . k @root@(ien,"load","conditions")
"RTN","SYNFCON",16,0)
 . m @root@(ien,"load","conditions")=grtn("conditions")
"RTN","SYNFCON",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFCON",18,0)
 s rtn("conditionsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFCON",19,0)
 s rtn("conditionsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFCON",20,0)
 s rtn("conditionsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFCON",21,0)
 ;b
"RTN","SYNFCON",22,0)
 ;
"RTN","SYNFCON",23,0)
 ;
"RTN","SYNFCON",24,0)
 q
"RTN","SYNFCON",25,0)
 ;
"RTN","SYNFCON",26,0)
wsIntakeConditions(args,body,result,ien) ; web service entry (post)
"RTN","SYNFCON",27,0)
 ; for intake of one or more Conditions. input are fhir resources
"RTN","SYNFCON",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFCON",29,0)
 ; args include patientId
"RTN","SYNFCON",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFCON",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFCON",32,0)
 ;i $g(ien)'="" if $$loadStatus("conditions","",ien)=1 d  q  ;
"RTN","SYNFCON",33,0)
 ;. s result("conditionsStatus","status")="alreadyLoaded"
"RTN","SYNFCON",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFCON",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Condition",ien,1)
"RTN","SYNFCON",36,0)
 e  d  ; 
"RTN","SYNFCON",37,0)
 . s args("load")=0
"RTN","SYNFCON",38,0)
 . merge jtmp=BODY
"RTN","SYNFCON",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFCON",40,0)
 i '$d(json) q  ;
"RTN","SYNFCON",41,0)
 m ^gpl("gjson")=json
"RTN","SYNFCON",42,0)
 ;
"RTN","SYNFCON",43,0)
 ; determine the patient
"RTN","SYNFCON",44,0)
 ;
"RTN","SYNFCON",45,0)
 n dfn,eval
"RTN","SYNFCON",46,0)
 if $g(ien)'="" d  ;
"RTN","SYNFCON",47,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFCON",48,0)
 else  d  ;
"RTN","SYNFCON",49,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFCON",50,0)
 . i dfn="" d  ;
"RTN","SYNFCON",51,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFCON",52,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFCON",53,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFCON",54,0)
 . s result("conditions",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFCON",55,0)
 ;
"RTN","SYNFCON",56,0)
 ;
"RTN","SYNFCON",57,0)
 new zi s zi=0
"RTN","SYNFCON",58,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFCON",59,0)
 . ;
"RTN","SYNFCON",60,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFCON",61,0)
 . ;
"RTN","SYNFCON",62,0)
 . new jlog set jlog=$name(eval("conditions",zi))
"RTN","SYNFCON",63,0)
 . ;
"RTN","SYNFCON",64,0)
 . ; insure that the resourceType is Condition
"RTN","SYNFCON",65,0)
 . ;
"RTN","SYNFCON",66,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFCON",67,0)
 . if type'="Condition" do  quit  ;
"RTN","SYNFCON",68,0)
 . . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFCON",69,0)
 . . do log(jlog,"Resource type not Condition, skipping entry")
"RTN","SYNFCON",70,0)
 . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFCON",71,0)
 . ;
"RTN","SYNFCON",72,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFCON",73,0)
 . ;
"RTN","SYNFCON",74,0)
 . if $g(ien)'="" if $$loadStatus("conditions",zi,ien)=1 do  quit  ;
"RTN","SYNFCON",75,0)
 . . d log(jlog,"Vital sign already loaded, skipping")
"RTN","SYNFCON",76,0)
 . ;
"RTN","SYNFCON",77,0)
 . ; determine Conditions code, coding system, and display text
"RTN","SYNFCON",78,0)
 . ;
"RTN","SYNFCON",79,0)
 . ;
"RTN","SYNFCON",80,0)
 . ; determine the id of the resource
"RTN","SYNFCON",81,0)
 . ;
"RTN","SYNFCON",82,0)
 . new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFCON",83,0)
 . set eval("conditions",zi,"vars","id")=id
"RTN","SYNFCON",84,0)
 . d log(jlog,"ID is: "_id)
"RTN","SYNFCON",85,0)
 . ;
"RTN","SYNFCON",86,0)
 . new concode set concode=$get(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFCON",87,0)
 . do log(jlog,"code is: "_concode)
"RTN","SYNFCON",88,0)
 . set eval("conditions",zi,"vars","code")=concode
"RTN","SYNFCON",89,0)
 . ;
"RTN","SYNFCON",90,0)
 . ;
"RTN","SYNFCON",91,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","code","coding",1,"system"))
"RTN","SYNFCON",92,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFCON",93,0)
 . set eval("conditions",zi,"vars","codeSystem")=codesystem
"RTN","SYNFCON",94,0)
 . ;
"RTN","SYNFCON",95,0)
 . ; determine the code display text
"RTN","SYNFCON",96,0)
 . ;
"RTN","SYNFCON",97,0)
 . new context s context=$get(json("entry",zi,"resource","code","coding",1,"display"))
"RTN","SYNFCON",98,0)
 . do log(jlog,"display text is: "_context)
"RTN","SYNFCON",99,0)
 . set eval("conditions",zi,"vars","text")=context
"RTN","SYNFCON",100,0)
 . ;
"RTN","SYNFCON",101,0)
 . ; determine the effective date
"RTN","SYNFCON",102,0)
 . ;
"RTN","SYNFCON",103,0)
 . new effdate set effdate=$get(json("entry",zi,"resource","onsetDateTime"))
"RTN","SYNFCON",104,0)
 . do log(jlog,"effectiveDateTime is: "_effdate)
"RTN","SYNFCON",105,0)
 . set eval("conditions",zi,"vars","effectiveDateTime")=effdate
"RTN","SYNFCON",106,0)
 . new fmtime s fmtime=$$fhirTfm^SYNFUTL(effdate)
"RTN","SYNFCON",107,0)
 . d log(jlog,"fileman dateTime is: "_fmtime)
"RTN","SYNFCON",108,0)
 . set eval("conditions",zi,"vars","fmDateTime")=fmtime ;
"RTN","SYNFCON",109,0)
 . new hl7time s hl7time=$$fhirThl7^SYNFUTL(effdate)
"RTN","SYNFCON",110,0)
 . d log(jlog,"hl7 dateTime is: "_hl7time)
"RTN","SYNFCON",111,0)
 . set eval("conditions",zi,"vars","hl7DateTime")=hl7time ;
"RTN","SYNFCON",112,0)
 . ;
"RTN","SYNFCON",113,0)
 . ; determine the abatement date
"RTN","SYNFCON",114,0)
 . ;
"RTN","SYNFCON",115,0)
 . new abatedate set abatedate=$get(json("entry",zi,"resource","abatementDateTime"))
"RTN","SYNFCON",116,0)
 . do log(jlog,"abatementDateTime is: "_abatedate)
"RTN","SYNFCON",117,0)
 . set eval("conditions",zi,"vars","abatementDateTime")=effdate
"RTN","SYNFCON",118,0)
 . new fmtime s fmtime=$$fhirTfm^SYNFUTL(abatedate)
"RTN","SYNFCON",119,0)
 . d log(jlog,"fileman abatementDateTime is: "_fmtime)
"RTN","SYNFCON",120,0)
 . set eval("conditions",zi,"vars","fmAbatementDateTime")=fmtime ;
"RTN","SYNFCON",121,0)
 . new hl7time s hl7time=$$fhirThl7^SYNFUTL(abatedate)
"RTN","SYNFCON",122,0)
 . d log(jlog,"hl7 abatementDateTime is: "_hl7time)
"RTN","SYNFCON",123,0)
 . set eval("conditions",zi,"vars","hl7AbatementDateTime")=hl7time ;
"RTN","SYNFCON",124,0)
 . ;
"RTN","SYNFCON",125,0)
 . ; determine the status
"RTN","SYNFCON",126,0)
 . ;
"RTN","SYNFCON",127,0)
 . n constatus s constatus=$get(json("entry",zi,"resource","clinicalStatus"))
"RTN","SYNFCON",128,0)
 . do log(jlog,"Clinical Status is: "_constatus)
"RTN","SYNFCON",129,0)
 . set eval("conditions",zi,"vars","clinicalStatus")=constatus
"RTN","SYNFCON",130,0)
 . ;
"RTN","SYNFCON",131,0)
 . ; set up to call the data loader
"RTN","SYNFCON",132,0)
 . ;
"RTN","SYNFCON",133,0)
 . n RETSTA,DHPPAT,DHPSCT,DHPDTM,DHPPROV,DHPLOC,DHPTXT
"RTN","SYNFCON",134,0)
 . ;
"RTN","SYNFCON",135,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFCON",136,0)
 . s eval("conditions",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFCON",137,0)
 . ;
"RTN","SYNFCON",138,0)
 . s DHPSCT=concode
"RTN","SYNFCON",139,0)
 . s eval("conditions",zi,"parms","DHPSCT")=DHPSCT
"RTN","SYNFCON",140,0)
 . ;
"RTN","SYNFCON",141,0)
 . s DHPTXT=context
"RTN","SYNFCON",142,0)
 . s eval("conditions",zi,"parms","DHPTXT")=DHPTXT
"RTN","SYNFCON",143,0)
 . ;
"RTN","SYNFCON",144,0)
 . ;
"RTN","SYNFCON",145,0)
 . s DHPDTM=hl7time
"RTN","SYNFCON",146,0)
 . s eval("conditions",zi,"parms","DHPDTM")=hl7time
"RTN","SYNFCON",147,0)
 . d log(jlog,"HL7 DateTime is: "_hl7time)
"RTN","SYNFCON",148,0)
 . ;
"RTN","SYNFCON",149,0)
 . s DHPPROV=$$MAP^SYNQLDM("OP","provider")
"RTN","SYNFCON",150,0)
 . n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",DHPPROV,""))
"RTN","SYNFCON",151,0)
 . if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFCON",152,0)
 . s eval("conditions",zi,"parms","DHPPROV")=DHPPROVIEN
"RTN","SYNFCON",153,0)
 . d log(jlog,"Provider for outpatient is: #"_DHPPROVIEN_" "_DHPPROV)
"RTN","SYNFCON",154,0)
 . ;
"RTN","SYNFCON",155,0)
 . s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFCON",156,0)
 . n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFCON",157,0)
 . if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFCON",158,0)
 . s eval("conditions",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFCON",159,0)
 . d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFCON",160,0)
 . ;
"RTN","SYNFCON",161,0)
 . s eval("conditions",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFCON",162,0)
 . ;
"RTN","SYNFCON",163,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFCON",164,0)
 . . if $g(ien)'="" if $$loadStatus("conditions",zi,ien)=1 do  quit  ;
"RTN","SYNFCON",165,0)
 . . . d log(jlog,"Vital sign already loaded, skipping")
"RTN","SYNFCON",166,0)
 . . d log(jlog,"Calling data loader to add encounter")
"RTN","SYNFCON",167,0)
 . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFCON",168,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFCON",169,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFCON",170,0)
 . . . s eval("conditions",zi,"status","loadstatus")="loaded"
"RTN","SYNFCON",171,0)
 . . else  s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFCON",172,0)
 ;
"RTN","SYNFCON",173,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFCON",174,0)
 . m jrslt("source")=json
"RTN","SYNFCON",175,0)
 . m jrslt("args")=args
"RTN","SYNFCON",176,0)
 . m jrslt("eval")=eval
"RTN","SYNFCON",177,0)
 m jrslt("conditionsStatus")=eval("conditionsStatus")
"RTN","SYNFCON",178,0)
 set jrslt("result","status")="ok"
"RTN","SYNFCON",179,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFCON",180,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFCON",181,0)
 . m result=eval
"RTN","SYNFCON",182,0)
 . m result("status")=jrslt("result")
"RTN","SYNFCON",183,0)
 . ;b
"RTN","SYNFCON",184,0)
 e  d  ;
"RTN","SYNFCON",185,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFCON",186,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFCON",187,0)
 q
"RTN","SYNFCON",188,0)
 ;
"RTN","SYNFCON",189,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFCON",190,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFCON",191,0)
 q
"RTN","SYNFCON",192,0)
 ;
"RTN","SYNFCON",193,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFCON",194,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFCON",195,0)
 n rt s rt=0
"RTN","SYNFCON",196,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFCON",197,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFCON",198,0)
 q rt
"RTN","SYNFCON",199,0)
 ;
"RTN","SYNFCON",200,0)
testall ; run the conditions import on all imported patients
"RTN","SYNFCON",201,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFCON",202,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFCON",203,0)
 n dfn,ien,filter,reslt
"RTN","SYNFCON",204,0)
 s dfn=0
"RTN","SYNFCON",205,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFCON",206,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFCON",207,0)
 . q:ien=""
"RTN","SYNFCON",208,0)
 . s filter("dfn")=dfn
"RTN","SYNFCON",209,0)
 . k reslt
"RTN","SYNFCON",210,0)
 . d wsIntakeConditions(.filter,,.reslt,ien)
"RTN","SYNFCON",211,0)
 q
"RTN","SYNFCON",212,0)
 ;
"RTN","SYNFENC")
0^4^B113932042
"RTN","SYNFENC",1,0)
SYNFENC ;ven/gpl - fhir loader utilities ; 2/24/18 9:56pm
"RTN","SYNFENC",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFENC",3,0)
 ;
"RTN","SYNFENC",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFENC",5,0)
 ;
"RTN","SYNFENC",6,0)
 q
"RTN","SYNFENC",7,0)
 ;
"RTN","SYNFENC",8,0)
importEncounters(rtn,ien,args) ; entry point for loading encounters for a patient
"RTN","SYNFENC",9,0)
 ; calls the intake Encounters web service directly
"RTN","SYNFENC",10,0)
 ;
"RTN","SYNFENC",11,0)
 n grtn
"RTN","SYNFENC",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",13,0)
 d wsIntakeEncounters(.args,,.grtn,ien)
"RTN","SYNFENC",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFENC",15,0)
 . k @root@(ien,"load","encounters")
"RTN","SYNFENC",16,0)
 . m @root@(ien,"load","encounters")=grtn("encounters")
"RTN","SYNFENC",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFENC",18,0)
 s rtn("encountersStatus","status")=$g(grtn("status","status"))
"RTN","SYNFENC",19,0)
 s rtn("encountersStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFENC",20,0)
 s rtn("encountersStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFENC",21,0)
 ;b
"RTN","SYNFENC",22,0)
 ;
"RTN","SYNFENC",23,0)
 ;
"RTN","SYNFENC",24,0)
 q
"RTN","SYNFENC",25,0)
 ;
"RTN","SYNFENC",26,0)
wsIntakeEncounters(args,body,result,ien) ; web service entry (post)
"RTN","SYNFENC",27,0)
 ; for intake of one or more Encounters. input are fhir resources
"RTN","SYNFENC",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFENC",29,0)
 ; args include patientId
"RTN","SYNFENC",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFENC",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFENC",32,0)
 ;i $g(ien)'="" if $$loadStatus("encounters","",ien)=1 d  q  ;
"RTN","SYNFENC",33,0)
 ;. s result("encountersStatus","status")="alreadyLoaded"
"RTN","SYNFENC",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFENC",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Encounter",ien,1)
"RTN","SYNFENC",36,0)
 e  d  ; 
"RTN","SYNFENC",37,0)
 . ;s args("load")=0
"RTN","SYNFENC",38,0)
 . merge jtmp=BODY
"RTN","SYNFENC",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFENC",40,0)
 i '$d(json) q  ;
"RTN","SYNFENC",41,0)
 m ^gpl("gjson")=json
"RTN","SYNFENC",42,0)
 ;
"RTN","SYNFENC",43,0)
 ; determine the patient
"RTN","SYNFENC",44,0)
 ;
"RTN","SYNFENC",45,0)
 n dfn,eval
"RTN","SYNFENC",46,0)
 if $g(ien)'="" d  ;
"RTN","SYNFENC",47,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFENC",48,0)
 else  d  ;
"RTN","SYNFENC",49,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFENC",50,0)
 . i dfn="" d  ;
"RTN","SYNFENC",51,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFENC",52,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFENC",53,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFENC",54,0)
 . s result("encounters",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFENC",55,0)
 ;
"RTN","SYNFENC",56,0)
 ;
"RTN","SYNFENC",57,0)
 new zi s zi=0
"RTN","SYNFENC",58,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFENC",59,0)
 . ;
"RTN","SYNFENC",60,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFENC",61,0)
 . ;
"RTN","SYNFENC",62,0)
 . new jlog set jlog=$name(eval("encounters",zi))
"RTN","SYNFENC",63,0)
 . ;
"RTN","SYNFENC",64,0)
 . ; insure that the resourceType is Observation
"RTN","SYNFENC",65,0)
 . ;
"RTN","SYNFENC",66,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFENC",67,0)
 . if type'="Encounter" do  quit  ;
"RTN","SYNFENC",68,0)
 . . set eval("encounters",zi,"vars","resourceType")=type
"RTN","SYNFENC",69,0)
 . . do log(jlog,"Resource type not Observation, skipping entry")
"RTN","SYNFENC",70,0)
 . set eval("encounters",zi,"vars","resourceType")=type
"RTN","SYNFENC",71,0)
 . ;
"RTN","SYNFENC",72,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFENC",73,0)
 . ;
"RTN","SYNFENC",74,0)
 . if $g(ien)'="" if $$loadStatus("encounters",zi,ien)=1 do  quit  ;
"RTN","SYNFENC",75,0)
 . . d log(jlog,"Vital sign already loaded, skipping")
"RTN","SYNFENC",76,0)
 . ;
"RTN","SYNFENC",77,0)
 . ; determine Encounters code, coding system, and display text
"RTN","SYNFENC",78,0)
 . ;
"RTN","SYNFENC",79,0)
 . ;
"RTN","SYNFENC",80,0)
 . ; determine the id of the resource
"RTN","SYNFENC",81,0)
 . ;
"RTN","SYNFENC",82,0)
 . new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFENC",83,0)
 . set eval("encounters",zi,"vars","id")=id
"RTN","SYNFENC",84,0)
 . d log(jlog,"ID is: "_id)
"RTN","SYNFENC",85,0)
 . ;
"RTN","SYNFENC",86,0)
 . new enccode set enccode=$get(json("entry",zi,"resource","type",1,"coding",1,"code"))
"RTN","SYNFENC",87,0)
 . do log(jlog,"code is: "_enccode)
"RTN","SYNFENC",88,0)
 . set eval("encounters",zi,"vars","code")=enccode
"RTN","SYNFENC",89,0)
 . ;
"RTN","SYNFENC",90,0)
 . ;
"RTN","SYNFENC",91,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","type",1,"coding",1,"system"))
"RTN","SYNFENC",92,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFENC",93,0)
 . set eval("encounters",zi,"vars","codeSystem")=codesystem
"RTN","SYNFENC",94,0)
 . ;
"RTN","SYNFENC",95,0)
 . ; determine the reason code and system (Encounter Diagnosis)
"RTN","SYNFENC",96,0)
 . ;
"RTN","SYNFENC",97,0)
 . n reasoncode s reasoncode=$get(json("entry",zi,"resource","reason","coding",1,"code"))
"RTN","SYNFENC",98,0)
 . d log(jlog,"reasonCode is: "_reasoncode)
"RTN","SYNFENC",99,0)
 . set eval("encounters",zi,"vars","reasonCode")=reasoncode
"RTN","SYNFENC",100,0)
 . ;
"RTN","SYNFENC",101,0)
 . ; determine reason code system
"RTN","SYNFENC",102,0)
 . ;
"RTN","SYNFENC",103,0)
 . new reasoncdsys set reasoncdsys=$get(json("entry",zi,"resource","reason","coding",1,"system"))
"RTN","SYNFENC",104,0)
 . d log(jlog,"reasonCode system is: "_reasoncdsys)
"RTN","SYNFENC",105,0)
 . set eval("encounters",zi,"vars","reasonCodeSys")=reasoncdsys
"RTN","SYNFENC",106,0)
 . ;
"RTN","SYNFENC",107,0)
 . ; determine the effective date
"RTN","SYNFENC",108,0)
 . ;
"RTN","SYNFENC",109,0)
 . new effdate set effdate=$get(json("entry",zi,"resource","period","start"))
"RTN","SYNFENC",110,0)
 . do log(jlog,"effectiveDateTime is: "_effdate)
"RTN","SYNFENC",111,0)
 . set eval("encounters",zi,"vars","effectiveDateTime")=effdate
"RTN","SYNFENC",112,0)
 . new fmtime s fmtime=$$fhirTfm^SYNFUTL(effdate)
"RTN","SYNFENC",113,0)
 . d log(jlog,"fileman dateTime is: "_fmtime)
"RTN","SYNFENC",114,0)
 . set eval("encounters",zi,"vars","fmDateTime")=fmtime ;
"RTN","SYNFENC",115,0)
 . new hl7time s hl7time=$$fhirThl7^SYNFUTL(effdate)
"RTN","SYNFENC",116,0)
 . d log(jlog,"hl7 dateTime is: "_hl7time)
"RTN","SYNFENC",117,0)
 . set eval("encounters",zi,"vars","hl7DateTime")=hl7time ;
"RTN","SYNFENC",118,0)
 . ;
"RTN","SYNFENC",119,0)
 . new effdateEnd set effdateEnd=$get(json("entry",zi,"resource","period","end"))
"RTN","SYNFENC",120,0)
 . do log(jlog,"endDateTime is: "_effdateEnd)
"RTN","SYNFENC",121,0)
 . set eval("encounters",zi,"vars","endDateTime")=effdateEnd
"RTN","SYNFENC",122,0)
 . new fmtimeEnd s fmtimeEnd=$$fhirTfm^SYNFUTL(effdateEnd)
"RTN","SYNFENC",123,0)
 . d log(jlog,"fileman endDateTime is: "_fmtimeEnd)
"RTN","SYNFENC",124,0)
 . set eval("encounters",zi,"vars","fmEndDateTime")=fmtimeEnd ;
"RTN","SYNFENC",125,0)
 . new hl7endTime s hl7endTime=$$fhirThl7^SYNFUTL(effdateEnd)
"RTN","SYNFENC",126,0)
 . d log(jlog,"hl7 endDateTime is: "_hl7endTime)
"RTN","SYNFENC",127,0)
 . set eval("encounters",zi,"vars","hl7endDateTime")=hl7endTime ;
"RTN","SYNFENC",128,0)
 . ;
"RTN","SYNFENC",129,0)
 . ; set up to call the data loader
"RTN","SYNFENC",130,0)
 . ;
"RTN","SYNFENC",131,0)
 . ;ENCTUPD(RETSTA,DHPPAT,STARTDT,ENDDT,ENCPROV,CLINIC,SCTDX,SCTCPT)	;Encounter update
"RTN","SYNFENC",132,0)
 . ;
"RTN","SYNFENC",133,0)
 . n RETSTA,DHPPAT,STARTDT,ENDDT,ENCPROV,CLINIC,SCTDX,SCTCPT
"RTN","SYNFENC",134,0)
 . ;
"RTN","SYNFENC",135,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFENC",136,0)
 . s eval("encounters",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFENC",137,0)
 . ;
"RTN","SYNFENC",138,0)
 . s SCTCPT=enccode
"RTN","SYNFENC",139,0)
 . s eval("encounters",zi,"parms","SCTCPT")=SCTCPT
"RTN","SYNFENC",140,0)
 . ;
"RTN","SYNFENC",141,0)
 . ; reason code
"RTN","SYNFENC",142,0)
 . s SCTDX=reasoncode
"RTN","SYNFENC",143,0)
 . s eval("encounters",zi,"parms","SCTDX")=SCTDX
"RTN","SYNFENC",144,0)
 . ;
"RTN","SYNFENC",145,0)
 . s STARTDT=hl7time
"RTN","SYNFENC",146,0)
 . s eval("encounters",zi,"parms","STARTDT")=hl7time
"RTN","SYNFENC",147,0)
 . d log(jlog,"HL7 StartDateTime is: "_hl7time)
"RTN","SYNFENC",148,0)
 . ;
"RTN","SYNFENC",149,0)
 . s ENDDT=hl7endTime
"RTN","SYNFENC",150,0)
 . s eval("encounters",zi,"parms","ENDDT")=ENDDT
"RTN","SYNFENC",151,0)
 . d log(jlog,"HL7 End DateTime is: "_ENDDT)
"RTN","SYNFENC",152,0)
 . ;
"RTN","SYNFENC",153,0)
 . s ENCPROV=$$MAP^SYNQLDM("OP","provider") ; map should return the NPI number
"RTN","SYNFENC",154,0)
 . ;n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",ENCPROV,"")) ; this has to be the NPI number
"RTN","SYNFENC",155,0)
 . ;if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFENC",156,0)
 . s eval("encounters",zi,"parms","ENCPROV")=ENCPROV
"RTN","SYNFENC",157,0)
 . d log(jlog,"Provider for outpatient is: "_ENCPROV)
"RTN","SYNFENC",158,0)
 . ;
"RTN","SYNFENC",159,0)
 . s CLINIC=$$MAP^SYNQLDM("OP","location") ; map containes the name of the clinic file #44
"RTN","SYNFENC",160,0)
 . ;n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",CLINIC,""))
"RTN","SYNFENC",161,0)
 . ;if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFENC",162,0)
 . s eval("encounters",zi,"parms","CLINIC")=CLINIC
"RTN","SYNFENC",163,0)
 . d log(jlog,"Location for outpatient is: "_CLINIC)
"RTN","SYNFENC",164,0)
 . ;
"RTN","SYNFENC",165,0)
 . s eval("encounters",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFENC",166,0)
 . ;
"RTN","SYNFENC",167,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFENC",168,0)
 . . if $g(ien)="" n ien s ien=$$dfn2ien^SYNFUTL(dfn)
"RTN","SYNFENC",169,0)
 . . i ien="" q  ;
"RTN","SYNFENC",170,0)
 . . if $$loadStatus("encounters",zi,ien)=1 do  quit  ;
"RTN","SYNFENC",171,0)
 . . . d log(jlog,"Encounter already loaded, skipping")
"RTN","SYNFENC",172,0)
 . . d log(jlog,"Calling data loader to add encounter")
"RTN","SYNFENC",173,0)
 . . d ENCTUPD^SYNDHP61(.RETSTA,DHPPAT,STARTDT,ENDDT,ENCPROV,CLINIC,SCTDX,SCTCPT)	;Encounter update
"RTN","SYNFENC",174,0)
 . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFENC",175,0)
 . . ;
"RTN","SYNFENC",176,0)
 . . m eval("encounters",zi,"status","return")=RETSTA
"RTN","SYNFENC",177,0)
 . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",178,0)
 . . n visitIen s visitIen=$p(RETSTA,"^",2) ; returned visit ien
"RTN","SYNFENC",179,0)
 . . i +visitIen>0 d
"RTN","SYNFENC",180,0)
 . . . ;
"RTN","SYNFENC",181,0)
 . . . n groot s groot=$na(@root@(ien))
"RTN","SYNFENC",182,0)
 . . . d setIndex^SYNFHIR(groot,id,"visitIen",visitIen) ; save the visit ien in the indexes
"RTN","SYNFENC",183,0)
 . . . s eval("encounters",zi,"visitIen")=visitIen
"RTN","SYNFENC",184,0)
 . . e  s visitIen=""
"RTN","SYNFENC",185,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFENC",186,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFENC",187,0)
 . . . s eval("encounters",zi,"status","loadstatus")="loaded"
"RTN","SYNFENC",188,0)
 . . else  d  ;
"RTN","SYNFENC",189,0)
 . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFENC",190,0)
 . . . s eval("encounters",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFENC",191,0)
 . . . s eval("encounters",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFENC",192,0)
 . . k @root@(ien,"load","encounters",zi)
"RTN","SYNFENC",193,0)
 . . m @root@(ien,"load","encounters",zi)=eval("encounters",zi)
"RTN","SYNFENC",194,0)
 ;
"RTN","SYNFENC",195,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFENC",196,0)
 . m jrslt("source")=json
"RTN","SYNFENC",197,0)
 . m jrslt("args")=args
"RTN","SYNFENC",198,0)
 . m jrslt("eval")=eval
"RTN","SYNFENC",199,0)
 m jrslt("encountersStatus")=eval("encountersStatus")
"RTN","SYNFENC",200,0)
 set jrslt("result","status")="ok"
"RTN","SYNFENC",201,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFENC",202,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFENC",203,0)
 . m result=eval
"RTN","SYNFENC",204,0)
 . m result("status")=jrslt("result")
"RTN","SYNFENC",205,0)
 . ;b
"RTN","SYNFENC",206,0)
 e  d  ;
"RTN","SYNFENC",207,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFENC",208,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFENC",209,0)
 q
"RTN","SYNFENC",210,0)
 ;
"RTN","SYNFENC",211,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFENC",212,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFENC",213,0)
 q
"RTN","SYNFENC",214,0)
 ;
"RTN","SYNFENC",215,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFENC",216,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",217,0)
 n rt s rt=0
"RTN","SYNFENC",218,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFENC",219,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFENC",220,0)
 q rt
"RTN","SYNFENC",221,0)
 ;
"RTN","SYNFENC",222,0)
visitIen(ien,encId) ; extrinsic returns the visit ien for the Encounter ID
"RTN","SYNFENC",223,0)
 ; returns -1 if none found
"RTN","SYNFENC",224,0)
 i $g(encId)="" q -1
"RTN","SYNFENC",225,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",226,0)
 n vrtn
"RTN","SYNFENC",227,0)
 s vrtn=$o(@root@(ien,"SPO",encId,"visitIen",""))
"RTN","SYNFENC",228,0)
 i vrtn="" s vrtn=-1
"RTN","SYNFENC",229,0)
 q vrtn
"RTN","SYNFENC",230,0)
 ;
"RTN","SYNFENC",231,0)
testall ; run the encounters import on all imported patients
"RTN","SYNFENC",232,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",233,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFENC",234,0)
 n dfn,ien,filter,reslt
"RTN","SYNFENC",235,0)
 s dfn=0
"RTN","SYNFENC",236,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFENC",237,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFENC",238,0)
 . q:ien=""
"RTN","SYNFENC",239,0)
 . s filter("dfn")=dfn
"RTN","SYNFENC",240,0)
 . k reslt
"RTN","SYNFENC",241,0)
 . d wsIntakeEncounters(.filter,,.reslt,ien)
"RTN","SYNFENC",242,0)
 q
"RTN","SYNFENC",243,0)
 ;
"RTN","SYNFENC",244,0)
IMPORT(rtn,ien) ; encounters, immunizations, problems for patient ien
"RTN","SYNFENC",245,0)
 n filter
"RTN","SYNFENC",246,0)
 k rtn
"RTN","SYNFENC",247,0)
 s filter("load")=1
"RTN","SYNFENC",248,0)
 s filter("debug")=1
"RTN","SYNFENC",249,0)
 d importEncounters^SYNFENC(.rtn,ien,.filter)
"RTN","SYNFENC",250,0)
 d importImmu^SYNFIMM(.rtn,ien,.filter)
"RTN","SYNFENC",251,0)
 d importConditions^SYNFPR2(.rtn,ien,.filter)
"RTN","SYNFENC",252,0)
 q
"RTN","SYNFENC",253,0)
 ;
"RTN","SYNFENC",254,0)
 ;
"RTN","SYNFENC",255,0)
LOADALL 
"RTN","SYNFENC",256,0)
 n root s groot=$$setroot^%wd("fhir-intake")
"RTN","SYNFENC",257,0)
 n %1 s %1=0
"RTN","SYNFENC",258,0)
 f  s %1=$o(@groot@(%1)) q:+%1=0  d  ;
"RTN","SYNFENC",259,0)
 . n eroot s eroot=$na(@groot@(%1,"load","encounters"))
"RTN","SYNFENC",260,0)
 . q:$d(@eroot)
"RTN","SYNFENC",261,0)
 . q:%1=33
"RTN","SYNFENC",262,0)
 . q:%1=82
"RTN","SYNFENC",263,0)
 . q:$g(@eroot@("loadstatus"))="started"
"RTN","SYNFENC",264,0)
 . s @eroot@("loadstatus")="started"
"RTN","SYNFENC",265,0)
 . n filter
"RTN","SYNFENC",266,0)
 . s filter("load")=1
"RTN","SYNFENC",267,0)
 . w !,"loading "_%1_" "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","SYNFENC",268,0)
 . n rtn
"RTN","SYNFENC",269,0)
 . d importEncounters^SYNFENC(.rtn,%1,.filter)
"RTN","SYNFENC",270,0)
 . d importImmu^SYNFIMM(.rtn,%1,.filter)
"RTN","SYNFENC",271,0)
 . d importConditions^SYNFPR2(.rtn,%1,.filter)
"RTN","SYNFENC",272,0)
 q
"RTN","SYNFENC",273,0)
 ;
"RTN","SYNFGR")
0^5^B5593226
"RTN","SYNFGR",1,0)
SYNFGR ;ven/gpl - fhir loader utilities ; 2/23/18 5:51am
"RTN","SYNFGR",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFGR",3,0)
 ;
"RTN","SYNFGR",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFGR",5,0)
 ;
"RTN","SYNFGR",6,0)
 q
"RTN","SYNFGR",7,0)
        ;
"RTN","SYNFGR",8,0)
resources(ary,lvl) ; finds all the fhir resources and counts them up
"RTN","SYNFGR",9,0)
 ; returns ary, passed by name
"RTN","SYNFGR",10,0)
 ;
"RTN","SYNFGR",11,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFGR",12,0)
 n ien,rien
"RTN","SYNFGR",13,0)
 s (ien,rien)=0
"RTN","SYNFGR",14,0)
 f  s ien=$o(@root@(ien)) q:+ien=0  d  ;
"RTN","SYNFGR",15,0)
 . s rien=0
"RTN","SYNFGR",16,0)
 . f  s rien=$o(@root@(ien,"json","entry",rien)) q:+rien=0  d  ;
"RTN","SYNFGR",17,0)
 . . n rtype,rtext,rcode
"RTN","SYNFGR",18,0)
 . . s rtype=$g(@root@(ien,"json","entry",rien,"resource","resourceType"))
"RTN","SYNFGR",19,0)
 . . q:rtype=""
"RTN","SYNFGR",20,0)
 . . s @ary@(rtype)=$g(@ary@(rtype))+1
"RTN","SYNFGR",21,0)
 . . q:$g(lvl)<2
"RTN","SYNFGR",22,0)
 . . i rtype="Goal" d  ;
"RTN","SYNFGR",23,0)
 . . . s rtext=$g(@root@(ien,"json","entry",rien,"resource","description","text"))
"RTN","SYNFGR",24,0)
 . . . q:rtext=""
"RTN","SYNFGR",25,0)
 . . . s @ary@(rtype,rtext)=$g(@ary@(rtype,rtext))+1
"RTN","SYNFGR",26,0)
 . . i rtype="Observation" d  ;
"RTN","SYNFGR",27,0)
 . . . s rtext=$g(@root@(ien,"json","entry",rien,"resource","category",1,"coding",1,"code"))
"RTN","SYNFGR",28,0)
 . . . q:rtext=""
"RTN","SYNFGR",29,0)
 . . . ;i rtext="procedure" b
"RTN","SYNFGR",30,0)
 . . . s @ary@(rtype,rtext)=$g(@ary@(rtype,rtext))+1
"RTN","SYNFGR",31,0)
 . . i rtype="Procedure" d  ;
"RTN","SYNFGR",32,0)
 . . . s rtext=$g(@root@(ien,"json","entry",rien,"resource","code","text"))
"RTN","SYNFGR",33,0)
 . . . q:rtext=""
"RTN","SYNFGR",34,0)
 . . . s rcode=$g(@root@(ien,"json","entry",rien,"resource","code","coding",1,"code"))
"RTN","SYNFGR",35,0)
 . . . q:rcode=""
"RTN","SYNFGR",36,0)
 . . . s @ary@(rtype,rtext,rcode)=$g(@ary@(rtype,rtext,rcode))+1
"RTN","SYNFGR",37,0)
 . . i rtype="DiagnosticReport" d  ;
"RTN","SYNFGR",38,0)
 . . . s rtext=$g(@root@(ien,"json","entry",rien,"resource","code","coding",1,"display"))
"RTN","SYNFGR",39,0)
 . . . q:rtext=""
"RTN","SYNFGR",40,0)
 . . . s @ary@(rtype,rtext)=$g(@ary@(rtype,rtext))+1
"RTN","SYNFGR",41,0)
 q
"RTN","SYNFGR",42,0)
 ;
"RTN","SYNFHIR")
0^6^B80488603
"RTN","SYNFHIR",1,0)
SYNFHIR ;ven/gpl - fhir loader utilities ; 2/24/18 8:23pm
"RTN","SYNFHIR",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFHIR",3,0)
 ;
"RTN","SYNFHIR",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFHIR",5,0)
 ;
"RTN","SYNFHIR",6,0)
 q
"RTN","SYNFHIR",7,0)
 ;
"RTN","SYNFHIR",8,0)
wsPostFHIR(ARGS,BODY,RESULT) ; recieve from addpatient
"RTN","SYNFHIR",9,0)
 ;
"RTN","SYNFHIR",10,0)
 s U="^"
"RTN","SYNFHIR",11,0)
 ;
"RTN","SYNFHIR",12,0)
 new json,ien,root,gr,id,return
"RTN","SYNFHIR",13,0)
 set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFHIR",14,0)
 set id=$get(ARGS("id"))
"RTN","SYNFHIR",15,0)
 ;
"RTN","SYNFHIR",16,0)
 set ien=$order(@root@(" "),-1)+1
"RTN","SYNFHIR",17,0)
 set gr=$name(@root@(ien,"json"))
"RTN","SYNFHIR",18,0)
 merge json=BODY
"RTN","SYNFHIR",19,0)
 do DECODE^VPRJSON("json",gr)
"RTN","SYNFHIR",20,0)
 do indexFhir(ien)
"RTN","SYNFHIR",21,0)
 ;
"RTN","SYNFHIR",22,0)
 if id'="" do  ;
"RTN","SYNFHIR",23,0)
 . set @root@("B",id,ien)=""
"RTN","SYNFHIR",24,0)
 else  do  ;
"RTN","SYNFHIR",25,0)
 . ;
"RTN","SYNFHIR",26,0)
 ;
"RTN","SYNFHIR",27,0)
 if $get(ARGS("returngraph"))=1 do  ;
"RTN","SYNFHIR",28,0)
 . merge return("graph")=@root@(ien,"graph")
"RTN","SYNFHIR",29,0)
 set return("status")="ok"
"RTN","SYNFHIR",30,0)
 set return("id")=id
"RTN","SYNFHIR",31,0)
 set return("ien")=ien
"RTN","SYNFHIR",32,0)
 ;
"RTN","SYNFHIR",33,0)
 do importPatient^SYNFPAT(.return,ien)
"RTN","SYNFHIR",34,0)
 ;
"RTN","SYNFHIR",35,0)
 new rdfn set rdfn=$get(return("dfn"))
"RTN","SYNFHIR",36,0)
 if rdfn'="" set @root@("DFN",rdfn,ien)=""
"RTN","SYNFHIR",37,0)
 ;
"RTN","SYNFHIR",38,0)
 if rdfn'="" do  ; patient creation was successful
"RTN","SYNFHIR",39,0)
 . if $g(ARGS("load"))="" s ARGS("load")=1
"RTN","SYNFHIR",40,0)
 . do importVitals^SYNFVIT(.return,ien,.ARGS)
"RTN","SYNFHIR",41,0)
 . do importEncounters^SYNFENC(.return,ien,.ARGS)
"RTN","SYNFHIR",42,0)
 . do importImmu^SYNFIMM(.return,ien,.ARGS)
"RTN","SYNFHIR",43,0)
 . do importConditions^SYNFPR2(.return,ien,.ARGS)
"RTN","SYNFHIR",44,0)
 ;
"RTN","SYNFHIR",45,0)
 do ENCODE^VPRJSON("return","RESULT")
"RTN","SYNFHIR",46,0)
 set HTTPRSP("mime")="application/json"
"RTN","SYNFHIR",47,0)
 ;
"RTN","SYNFHIR",48,0)
 quit 1
"RTN","SYNFHIR",49,0)
 ;
"RTN","SYNFHIR",50,0)
indexFhir(ien) ; generate indexes for parsed fhir json
"RTN","SYNFHIR",51,0)
 ;
"RTN","SYNFHIR",52,0)
 new root set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFHIR",53,0)
 if $get(ien)="" quit  ;
"RTN","SYNFHIR",54,0)
 ;
"RTN","SYNFHIR",55,0)
 new jroot set jroot=$name(@root@(ien,"json","entry")) ; root of the json
"RTN","SYNFHIR",56,0)
 if '$data(@jroot) quit  ; can't find the json to index
"RTN","SYNFHIR",57,0)
 ;
"RTN","SYNFHIR",58,0)
 new jindex set jindex=$name(@root@(ien)) ; root of the index
"RTN","SYNFHIR",59,0)
 d clearIndexes(jindex)
"RTN","SYNFHIR",60,0)
 ;
"RTN","SYNFHIR",61,0)
 new %wi s %wi=0
"RTN","SYNFHIR",62,0)
 for  set %wi=$order(@jroot@(%wi)) quit:+%wi=0  do  ;
"RTN","SYNFHIR",63,0)
 . new type
"RTN","SYNFHIR",64,0)
 . set type=$get(@jroot@(%wi,"resource","resourceType"))
"RTN","SYNFHIR",65,0)
 . if type="" do  quit  ;
"RTN","SYNFHIR",66,0)
 . . w !,"error resource type not found ien= ",ien," entry= ",%wi
"RTN","SYNFHIR",67,0)
 . set @jindex@("type",type,%wi)=""
"RTN","SYNFHIR",68,0)
 . d triples(jindex,$na(@jroot@(%wi)),%wi)
"RTN","SYNFHIR",69,0)
 quit
"RTN","SYNFHIR",70,0)
 ;
"RTN","SYNFHIR",71,0)
triples(index,ary,%wi) ; index and array are passed by name
"RTN","SYNFHIR",72,0)
 ;
"RTN","SYNFHIR",73,0)
 i type="Patient" d  q  ;
"RTN","SYNFHIR",74,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",75,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",76,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",77,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",78,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",79,0)
 i type="Encounter" d  q  ;
"RTN","SYNFHIR",80,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",81,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",82,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",83,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",84,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",85,0)
 . n sdate s sdate=$g(@ary@("resource","period","start")) q:sdate=""
"RTN","SYNFHIR",86,0)
 . n hl7date s hl7date=$$fhirThl7^SYNFUTL(sdate)
"RTN","SYNFHIR",87,0)
 . d setIndex(index,purl,"dateTime",sdate)
"RTN","SYNFHIR",88,0)
 . d setIndex(index,purl,"hl7dateTime",hl7date)
"RTN","SYNFHIR",89,0)
 . n class s class=$g(@ary@("resource","class","code")) q:class=""
"RTN","SYNFHIR",90,0)
 . d setIndex(index,purl,"class",class)
"RTN","SYNFHIR",91,0)
 i type="Condition" d  q  ;
"RTN","SYNFHIR",92,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",93,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",94,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",95,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",96,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",97,0)
 . n enc s enc=$g(@ary@("resource","context","reference")) q:enc=""
"RTN","SYNFHIR",98,0)
 . d setIndex(index,purl,"encounterReference",enc)
"RTN","SYNFHIR",99,0)
 . n pat s pat=$g(@ary@("resource","subject","reference")) q:pat=""
"RTN","SYNFHIR",100,0)
 . d setIndex(index,purl,"patientReference",pat)
"RTN","SYNFHIR",101,0)
 i type="Observation" d  q  ;
"RTN","SYNFHIR",102,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",103,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",104,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",105,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",106,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",107,0)
 . n enc s enc=$g(@ary@("resource","context","reference")) q:enc=""
"RTN","SYNFHIR",108,0)
 . d setIndex(index,purl,"encounterReference",enc)
"RTN","SYNFHIR",109,0)
 . n pat s pat=$g(@ary@("resource","subject","reference")) q:pat=""
"RTN","SYNFHIR",110,0)
 . d setIndex(index,purl,"patientReference",pat)
"RTN","SYNFHIR",111,0)
 i type="Medication" d  q  ;
"RTN","SYNFHIR",112,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",113,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",114,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",115,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",116,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",117,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",118,0)
 i type="medicationReference" d  q  ;
"RTN","SYNFHIR",119,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",120,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",121,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",122,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",123,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",124,0)
 . n enc s enc=$g(@ary@("resource","context","reference")) q:enc=""
"RTN","SYNFHIR",125,0)
 . d setIndex(index,purl,"encounterReference",enc)
"RTN","SYNFHIR",126,0)
 . n pat s pat=$g(@ary@("resource","subject","reference")) q:pat=""
"RTN","SYNFHIR",127,0)
 . d setIndex(index,purl,"patientReference",pat)
"RTN","SYNFHIR",128,0)
 i type="Immunizationi" d  q  ;
"RTN","SYNFHIR",129,0)
 . n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",130,0)
 . i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",131,0)
 . i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",132,0)
 . d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",133,0)
 . d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",134,0)
 . n enc s enc=$g(@ary@("resource","encounter","reference")) q:enc=""
"RTN","SYNFHIR",135,0)
 . d setIndex(index,purl,"encounterReference",enc)
"RTN","SYNFHIR",136,0)
 . n pat s pat=$g(@ary@("resource","patient","reference")) q:pat=""
"RTN","SYNFHIR",137,0)
 . d setIndex(index,purl,"patientReference",pat)
"RTN","SYNFHIR",138,0)
 n purl s purl=$g(@ary@("fullUrl"))
"RTN","SYNFHIR",139,0)
 i purl="" s purl=type_"/"_$g(@ary@("resource","id"))
"RTN","SYNFHIR",140,0)
 i $e(purl,$l(purl))="/" s purl=purl_%wi
"RTN","SYNFHIR",141,0)
 d setIndex(index,purl,"type",type)
"RTN","SYNFHIR",142,0)
 d setIndex(index,purl,"rien",%wi)
"RTN","SYNFHIR",143,0)
 n enc s enc=$g(@ary@("resource","context","reference")) q:enc=""
"RTN","SYNFHIR",144,0)
 d setIndex(index,purl,"encounterReference",enc)
"RTN","SYNFHIR",145,0)
 n pat s pat=$g(@ary@("resource","subject","reference")) q:pat=""
"RTN","SYNFHIR",146,0)
 d setIndex(index,purl,"patientReference",pat)
"RTN","SYNFHIR",147,0)
 q
"RTN","SYNFHIR",148,0)
 ;
"RTN","SYNFHIR",149,0)
setIndex(gn,sub,pred,obj) ; set the graph indexices
"RTN","SYNFHIR",150,0)
 ;n gn s gn=$$setroot^%wd("fhir-intake")
"RTN","SYNFHIR",151,0)
 q:sub=""
"RTN","SYNFHIR",152,0)
 q:pred=""
"RTN","SYNFHIR",153,0)
 q:obj=""
"RTN","SYNFHIR",154,0)
 s @gn@("SPO",sub,pred,obj)=""
"RTN","SYNFHIR",155,0)
 s @gn@("POS",pred,obj,sub)=""
"RTN","SYNFHIR",156,0)
 s @gn@("PSO",pred,sub,obj)=""
"RTN","SYNFHIR",157,0)
 s @gn@("OPS",obj,pred,sub)=""
"RTN","SYNFHIR",158,0)
 q
"RTN","SYNFHIR",159,0)
 ;
"RTN","SYNFHIR",160,0)
clearIndexes(gn) ; kill the indexes
"RTN","SYNFHIR",161,0)
 k @gn@("SPO")
"RTN","SYNFHIR",162,0)
 k @gn@("POS")
"RTN","SYNFHIR",163,0)
 k @gn@("PSO")
"RTN","SYNFHIR",164,0)
 k @gn@("OPS")
"RTN","SYNFHIR",165,0)
 q
"RTN","SYNFHIR",166,0)
 ;
"RTN","SYNFHIR",167,0)
wsShow(rtn,filter) ; web service to show the fhir
"RTN","SYNFHIR",168,0)
 new ien set ien=$g(filter("ien"))
"RTN","SYNFHIR",169,0)
 if ien="" quit  ;
"RTN","SYNFHIR",170,0)
 new type set type=$get(filter("type"))
"RTN","SYNFHIR",171,0)
 new root set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFHIR",172,0)
 new jroot set jroot=$name(@root@(ien,"json"))
"RTN","SYNFHIR",173,0)
 ;
"RTN","SYNFHIR",174,0)
 new jtmp,juse
"RTN","SYNFHIR",175,0)
 set juse=jroot
"RTN","SYNFHIR",176,0)
 if type'="" do  ;
"RTN","SYNFHIR",177,0)
 . do getIntakeFhir("jtmp",,type,ien,1)
"RTN","SYNFHIR",178,0)
 . set juse="jtmp"
"RTN","SYNFHIR",179,0)
 do ENCODE^VPRJSON(juse,"rtn")
"RTN","SYNFHIR",180,0)
 s HTTPRSP("mime")="application/json" 
"RTN","SYNFHIR",181,0)
 quit
"RTN","SYNFHIR",182,0)
 ;
"RTN","SYNFHIR",183,0)
getIntakeFhir(rtn,id,type,ien,plain) ; returns fhir vars for patient id resourceType type
"RTN","SYNFHIR",184,0)
 ; id is optional
"RTN","SYNFHIR",185,0)
 ; if id is not specified, ien can be passed instead. 
"RTN","SYNFHIR",186,0)
 ; if id and ien are passed, only ien is used
"RTN","SYNFHIR",187,0)
 ; rtn passed by name. it will overlay results in @rtn, so is additive
"RTN","SYNFHIR",188,0)
 ; if plain is 1 then the array is returned without the type as the first 
"RTN","SYNFHIR",189,0)
 ;    element of each node
"RTN","SYNFHIR",190,0)
 ;
"RTN","SYNFHIR",191,0)
 new root set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFHIR",192,0)
 if $g(ien)="" set ien=$order(@root@("B",id,""))
"RTN","SYNFHIR",193,0)
 if ien="" quit  ;
"RTN","SYNFHIR",194,0)
 ;
"RTN","SYNFHIR",195,0)
 if $get(type)="" set type="all"
"RTN","SYNFHIR",196,0)
 kill @rtn
"RTN","SYNFHIR",197,0)
 ;
"RTN","SYNFHIR",198,0)
 if type'="all" do  quit  ;
"RTN","SYNFHIR",199,0)
 . do get1FhirType(rtn,root,ien,type,$get(plain))
"RTN","SYNFHIR",200,0)
 ;
"RTN","SYNFHIR",201,0)
 new jindex set jindex=$name(@root@(ien))
"RTN","SYNFHIR",202,0)
 new %wj set %wj=""
"RTN","SYNFHIR",203,0)
 for  set %wj=$order(@jindex@("type",%wj)) quit:%wj=""  do  ;
"RTN","SYNFHIR",204,0)
 . ;w !,"type ",%wj
"RTN","SYNFHIR",205,0)
 . do get1FhirType(rtn,root,ien,%wj,$get(plain))
"RTN","SYNFHIR",206,0)
 ;
"RTN","SYNFHIR",207,0)
 quit
"RTN","SYNFHIR",208,0)
 ;
"RTN","SYNFHIR",209,0)
get1FhirType(rtn,root,ien,type,plain) ; get one resourceType from the json
"RTN","SYNFHIR",210,0)
 new %wi set %wi=0
"RTN","SYNFHIR",211,0)
 new jindex set jindex=$name(@root@(ien))
"RTN","SYNFHIR",212,0)
 if '$data(@jindex@("type",type)) quit  ;
"RTN","SYNFHIR",213,0)
 for  s %wi=$order(@jindex@("type",type,%wi)) quit:+%wi=0  do  ;
"RTN","SYNFHIR",214,0)
 . if $get(plain)=1 merge @rtn@("entry",%wi)=@root@(ien,"json","entry",%wi)
"RTN","SYNFHIR",215,0)
 . else  merge @rtn@(type,"entry",%wi)=@root@(ien,"json","entry",%wi)
"RTN","SYNFHIR",216,0)
 quit
"RTN","SYNFHIR",217,0)
 ;
"RTN","SYNFHIR",218,0)
fhir2graph(in,out) ; transforms fhir to a graph
"RTN","SYNFHIR",219,0)
 ; in and out are passed by name
"RTN","SYNFHIR",220,0)
 ; detects if json parser has been run and will run it if not
"RTN","SYNFHIR",221,0)
 ;
"RTN","SYNFHIR",222,0)
 new json
"RTN","SYNFHIR",223,0)
 if $ql($q(@in@("")))<2 do DECODE^VPRJSON(in,"json") set in="json"
"RTN","SYNFHIR",224,0)
 ;
"RTN","SYNFHIR",225,0)
 new rootj
"RTN","SYNFHIR",226,0)
 set rootj=$na(@in@("entry"))
"RTN","SYNFHIR",227,0)
 new i,cnt
"RTN","SYNFHIR",228,0)
 for i=1:1:$order(@rootj@(" "),-1) do  ;
"RTN","SYNFHIR",229,0)
 . new rname
"RTN","SYNFHIR",230,0)
 . set rname=$get(@rootj@(i,"resource","resourceType"))
"RTN","SYNFHIR",231,0)
 . if rname="" do  quit  ;
"RTN","SYNFHIR",232,0)
 . . w !,"error no resourceType in entry: ",i
"RTN","SYNFHIR",233,0)
 . . zwr @rootj@(i,*)
"RTN","SYNFHIR",234,0)
 . . b
"RTN","SYNFHIR",235,0)
 . if '$data(@out@(rname)) set cnt=1
"RTN","SYNFHIR",236,0)
 . else  set cnt=$order(@out@(rname,""),-1)+1
"RTN","SYNFHIR",237,0)
 . merge @out@(rname,cnt)=@rootj@(i,"resource")
"RTN","SYNFHIR",238,0)
 quit
"RTN","SYNFHIR",239,0)
 ;
"RTN","SYNFIMM")
0^7^B85486480
"RTN","SYNFIMM",1,0)
SYNFIMM ;ven/gpl - fhir loader utilities ; 2/18/18 7:29am
"RTN","SYNFIMM",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFIMM",3,0)
 ;
"RTN","SYNFIMM",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFIMM",5,0)
 ;
"RTN","SYNFIMM",6,0)
 q
"RTN","SYNFIMM",7,0)
 ;
"RTN","SYNFIMM",8,0)
importImmu(rtn,ien,args) ; entry point for loading Immunizations for a patient
"RTN","SYNFIMM",9,0)
 ; calls the intake Immunizations web service directly
"RTN","SYNFIMM",10,0)
 ;
"RTN","SYNFIMM",11,0)
 n grtn
"RTN","SYNFIMM",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFIMM",13,0)
 d wsIntakeImmu(.args,,.grtn,ien)
"RTN","SYNFIMM",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFIMM",15,0)
 . k @root@(ien,"load","immunizations")
"RTN","SYNFIMM",16,0)
 . m @root@(ien,"load","immunizations")=grtn("immunizations")
"RTN","SYNFIMM",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFIMM",18,0)
 s rtn("immunizationsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFIMM",19,0)
 s rtn("immunizationsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFIMM",20,0)
 s rtn("immunizationsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFIMM",21,0)
 ;b
"RTN","SYNFIMM",22,0)
 ;
"RTN","SYNFIMM",23,0)
 ;
"RTN","SYNFIMM",24,0)
 q
"RTN","SYNFIMM",25,0)
 ;
"RTN","SYNFIMM",26,0)
wsIntakeImmu(args,body,result,ien) ; web service entry (post)
"RTN","SYNFIMM",27,0)
 ; for intake of one or more Immunizations. input are fhir resources
"RTN","SYNFIMM",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFIMM",29,0)
 ; args include patientId
"RTN","SYNFIMM",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFIMM",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFIMM",32,0)
 ;i $g(ien)'="" if $$loadStatus("immunizations","",ien)=1 d  q  ;
"RTN","SYNFIMM",33,0)
 ;. s result("immunizationsStatus","status")="alreadyLoaded"
"RTN","SYNFIMM",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFIMM",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Immunization",ien,1)
"RTN","SYNFIMM",36,0)
 e  d  ; 
"RTN","SYNFIMM",37,0)
 . s args("load")=0
"RTN","SYNFIMM",38,0)
 . merge jtmp=BODY
"RTN","SYNFIMM",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFIMM",40,0)
 i '$d(json) q  ;
"RTN","SYNFIMM",41,0)
 m ^gpl("gjson")=json
"RTN","SYNFIMM",42,0)
 ;
"RTN","SYNFIMM",43,0)
 ; determine the patient
"RTN","SYNFIMM",44,0)
 ;
"RTN","SYNFIMM",45,0)
 n dfn,eval
"RTN","SYNFIMM",46,0)
 if $g(ien)'="" d  ;
"RTN","SYNFIMM",47,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFIMM",48,0)
 else  d  ;
"RTN","SYNFIMM",49,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFIMM",50,0)
 . i dfn="" d  ;
"RTN","SYNFIMM",51,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFIMM",52,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFIMM",53,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFIMM",54,0)
 . s result("immunizations",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFIMM",55,0)
 ;
"RTN","SYNFIMM",56,0)
 ;
"RTN","SYNFIMM",57,0)
 new zi s zi=0
"RTN","SYNFIMM",58,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFIMM",59,0)
 . ;
"RTN","SYNFIMM",60,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFIMM",61,0)
 . ;
"RTN","SYNFIMM",62,0)
 . new jlog set jlog=$name(eval("immunizations",zi))
"RTN","SYNFIMM",63,0)
 . ;
"RTN","SYNFIMM",64,0)
 . ; insure that the resourceType is Observation
"RTN","SYNFIMM",65,0)
 . ;
"RTN","SYNFIMM",66,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFIMM",67,0)
 . if type'="Immunization" do  quit  ;
"RTN","SYNFIMM",68,0)
 . . set eval("immunizations",zi,"vars","resourceType")=type
"RTN","SYNFIMM",69,0)
 . . do log(jlog,"Resource type not Immunization, skipping entry")
"RTN","SYNFIMM",70,0)
 . set eval("immunizations",zi,"vars","resourceType")=type
"RTN","SYNFIMM",71,0)
 . ;
"RTN","SYNFIMM",72,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFIMM",73,0)
 . ;
"RTN","SYNFIMM",74,0)
 . if $g(ien)'="" if $$loadStatus("immunization",zi,ien)=1 do  quit  ;
"RTN","SYNFIMM",75,0)
 . . d log(jlog,"Immunization already loaded, skipping")
"RTN","SYNFIMM",76,0)
 . ;
"RTN","SYNFIMM",77,0)
 . ; determine Immunization cvx code, coding system, and display text
"RTN","SYNFIMM",78,0)
 . ;
"RTN","SYNFIMM",79,0)
 . ;
"RTN","SYNFIMM",80,0)
 . ; determine the id of the resource
"RTN","SYNFIMM",81,0)
 . ;
"RTN","SYNFIMM",82,0)
 . ;new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFIMM",83,0)
 . ;set eval("immunizations",zi,"vars","id")=id
"RTN","SYNFIMM",84,0)
 . ;d log(jlog,"ID is: "_id)
"RTN","SYNFIMM",85,0)
 . ;
"RTN","SYNFIMM",86,0)
 . new cvxcode set cvxcode=$get(json("entry",zi,"resource","vaccineCode","coding",1,"code"))
"RTN","SYNFIMM",87,0)
 . do log(jlog,"code is: "_cvxcode)
"RTN","SYNFIMM",88,0)
 . set eval("immunizations",zi,"vars","code")=cvxcode
"RTN","SYNFIMM",89,0)
 . ;
"RTN","SYNFIMM",90,0)
 . ;
"RTN","SYNFIMM",91,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","vaccineCode","coding",1,"system"))
"RTN","SYNFIMM",92,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFIMM",93,0)
 . set eval("immunizations",zi,"vars","codeSystem")=codesystem
"RTN","SYNFIMM",94,0)
 . ;
"RTN","SYNFIMM",95,0)
 . ; determine the effective date
"RTN","SYNFIMM",96,0)
 . ;
"RTN","SYNFIMM",97,0)
 . new effdate set effdate=$get(json("entry",zi,"resource","date"))
"RTN","SYNFIMM",98,0)
 . do log(jlog,"effectiveDateTime is: "_effdate)
"RTN","SYNFIMM",99,0)
 . set eval("immunizations",zi,"vars","effectiveDateTime")=effdate
"RTN","SYNFIMM",100,0)
 . new fmtime s fmtime=$$fhirTfm^SYNFUTL(effdate)
"RTN","SYNFIMM",101,0)
 . d log(jlog,"fileman dateTime is: "_fmtime)
"RTN","SYNFIMM",102,0)
 . set eval("immunizations",zi,"vars","fmDateTime")=fmtime ;
"RTN","SYNFIMM",103,0)
 . new hl7time s hl7time=$$fhirThl7^SYNFUTL(effdate)
"RTN","SYNFIMM",104,0)
 . d log(jlog,"hl7 dateTime is: "_hl7time)
"RTN","SYNFIMM",105,0)
 . set eval("immunizations",zi,"vars","hl7DateTime")=hl7time ;
"RTN","SYNFIMM",106,0)
 . ;
"RTN","SYNFIMM",107,0)
 . ; determine the encounter visit ien
"RTN","SYNFIMM",108,0)
 . n encounterId
"RTN","SYNFIMM",109,0)
 . s encounterId=$g(json("entry",zi,"resource","encounter","reference"))
"RTN","SYNFIMM",110,0)
 . i encounterId["urn:uuid:" s encounterId=$p(encounterId,"urn:uuid:",2)
"RTN","SYNFIMM",111,0)
 . s eval("immunizations",zi,"vars","encounterId")=encounterId
"RTN","SYNFIMM",112,0)
 . d log(jlog,"reference encounter ID is : "_encounterId)
"RTN","SYNFIMM",113,0)
 . ;
"RTN","SYNFIMM",114,0)
 . n visitIen s visitIen=$$visitIen^SYNFENC(ien,encounterId)
"RTN","SYNFIMM",115,0)
 . s eval("immunizations",zi,"vars","visitIen")=visitIen
"RTN","SYNFIMM",116,0)
 . d log(jlog,"visit ien is: "_visitIen)
"RTN","SYNFIMM",117,0)
 . ;
"RTN","SYNFIMM",118,0)
 . ; set up to call the data loader
"RTN","SYNFIMM",119,0)
 . ;
"RTN","SYNFIMM",120,0)
 . ;IMMUNUPD(RETSTA,DHPPAT,VISIT,IMMUNIZ,ANATLOC,ADMINRT,DOSE,EVENTDT,IMMPROV)	;Immunization update
"RTN","SYNFIMM",121,0)
 . n RETSTA,DHPPAT,VISIT,IMMUNIZ,ANATLOC,ADMINRT,DOSE,EVENTDT,IMMPROV      ;Immunization update
"RTN","SYNFIMM",122,0)
 . s (DHPPAT,VISIT,IMMUNIZ,ANATLOC,ADMINRT,DOSE,EVENTDT,IMMPROV)=""      ;Immunization update
"RTN","SYNFIMM",123,0)
 . ;
"RTN","SYNFIMM",124,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFIMM",125,0)
 . s eval("immunizations",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFIMM",126,0)
 . ;
"RTN","SYNFIMM",127,0)
 . s VISIT=visitIen
"RTN","SYNFIMM",128,0)
 . s eval("immunizations",zi,"parms","VISIT")=visitIen
"RTN","SYNFIMM",129,0)
 . ;
"RTN","SYNFIMM",130,0)
 . s IMMUNIZ=cvxcode
"RTN","SYNFIMM",131,0)
 . s eval("immunizations",zi,"parms","IMMUNIZ")=IMMUNIZ
"RTN","SYNFIMM",132,0)
 . ;
"RTN","SYNFIMM",133,0)
 . ;
"RTN","SYNFIMM",134,0)
 . s EVENTDT=hl7time
"RTN","SYNFIMM",135,0)
 . s eval("immunizations",zi,"parms","EVENTDT")=hl7time
"RTN","SYNFIMM",136,0)
 . d log(jlog,"HL7 DateTime is: "_hl7time)
"RTN","SYNFIMM",137,0)
 . ;
"RTN","SYNFIMM",138,0)
 . s IMMPROV=$$MAP^SYNQLDM("OP","provider") ; should map to an NPI
"RTN","SYNFIMM",139,0)
 . ;n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",IMMPROV,""))
"RTN","SYNFIMM",140,0)
 . ;if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFIMM",141,0)
 . s eval("immunizations",zi,"parms","IMMPROV")=IMMPROV
"RTN","SYNFIMM",142,0)
 . d log(jlog,"Provider NPI for outpatient is: "_IMMPROV)
"RTN","SYNFIMM",143,0)
 . ;
"RTN","SYNFIMM",144,0)
 . s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFIMM",145,0)
 . n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFIMM",146,0)
 . if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFIMM",147,0)
 . s eval("immunizations",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFIMM",148,0)
 . d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFIMM",149,0)
 . ;
"RTN","SYNFIMM",150,0)
 . s eval("immunizations",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFIMM",151,0)
 . ;
"RTN","SYNFIMM",152,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFIMM",153,0)
 . . if $g(ien)'="" if $$loadStatus("immunizations",zi,ien)=1 do  quit  ;
"RTN","SYNFIMM",154,0)
 . . . d log(jlog,"Immunization already loaded, skipping")
"RTN","SYNFIMM",155,0)
 . . d log(jlog,"Calling IMMUNUPD^ZZDHP61 to add immunization")
"RTN","SYNFIMM",156,0)
 . . D IMMUNUPD^ZZDHP61(.RETSTA,DHPPAT,.VISIT,IMMUNIZ,ANATLOC,ADMINRT,DOSE,EVENTDT,IMMPROV) ;Immunization update
"RTN","SYNFIMM",157,0)
 . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFIMM",158,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFIMM",159,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFIMM",160,0)
 . . . s eval("immunizations",zi,"status","loadstatus")="loaded"
"RTN","SYNFIMM",161,0)
 . . else  d  ;
"RTN","SYNFIMM",162,0)
 . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFIMM",163,0)
 . . . s eval("immunizations",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFIMM",164,0)
 . . . s eval("immunizations",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFIMM",165,0)
 . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFIMM",166,0)
 . . k @root@(ien,"load","immunizations",zi)
"RTN","SYNFIMM",167,0)
 . . m @root@(ien,"load","immunizations",zi)=eval("immunizations",zi)
"RTN","SYNFIMM",168,0)
 ;
"RTN","SYNFIMM",169,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFIMM",170,0)
 . m jrslt("source")=json
"RTN","SYNFIMM",171,0)
 . m jrslt("args")=args
"RTN","SYNFIMM",172,0)
 . m jrslt("eval")=eval
"RTN","SYNFIMM",173,0)
 m jrslt("immunizationsStatus")=eval("immunizationsStatus")
"RTN","SYNFIMM",174,0)
 set jrslt("result","status")="ok"
"RTN","SYNFIMM",175,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFIMM",176,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFIMM",177,0)
 . m result=eval
"RTN","SYNFIMM",178,0)
 . m result("status")=jrslt("result")
"RTN","SYNFIMM",179,0)
 . m result("dfn")=dfn
"RTN","SYNFIMM",180,0)
 . m result("ien")=ien
"RTN","SYNFIMM",181,0)
 . ;b
"RTN","SYNFIMM",182,0)
 e  d  ;
"RTN","SYNFIMM",183,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFIMM",184,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFIMM",185,0)
 q
"RTN","SYNFIMM",186,0)
 ;
"RTN","SYNFIMM",187,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFIMM",188,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFIMM",189,0)
 q
"RTN","SYNFIMM",190,0)
 ;
"RTN","SYNFIMM",191,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFIMM",192,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFIMM",193,0)
 n rt s rt=0
"RTN","SYNFIMM",194,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFIMM",195,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFIMM",196,0)
 q rt
"RTN","SYNFIMM",197,0)
 ;
"RTN","SYNFIMM",198,0)
testall ; run the immunizations import on all imported patients
"RTN","SYNFIMM",199,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFIMM",200,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFIMM",201,0)
 n dfn,ien,filter,reslt
"RTN","SYNFIMM",202,0)
 s dfn=0
"RTN","SYNFIMM",203,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFIMM",204,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFIMM",205,0)
 . q:ien=""
"RTN","SYNFIMM",206,0)
 . s filter("dfn")=dfn
"RTN","SYNFIMM",207,0)
 . k reslt
"RTN","SYNFIMM",208,0)
 . d wsIntakeImmu(.filter,,.reslt,ien)
"RTN","SYNFIMM",209,0)
 q
"RTN","SYNFIMM",210,0)
 ;
"RTN","SYNFIMM",211,0)
testone(reslt,doload) ; run the immunizations import on all imported patients
"RTN","SYNFIMM",212,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFIMM",213,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFIMM",214,0)
 n dfn,ien,filter
"RTN","SYNFIMM",215,0)
 n done s done=0
"RTN","SYNFIMM",216,0)
 s dfn=0
"RTN","SYNFIMM",217,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  q:done   d  ;
"RTN","SYNFIMM",218,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFIMM",219,0)
 . q:ien=""
"RTN","SYNFIMM",220,0)
 . q:$d(@root@(ien,"load","immunizations"))
"RTN","SYNFIMM",221,0)
 . s filter("dfn")=dfn
"RTN","SYNFIMM",222,0)
 . s filter("debug")=1
"RTN","SYNFIMM",223,0)
 . i $g(doload)=1 s filter("load")=1
"RTN","SYNFIMM",224,0)
 . k reslt
"RTN","SYNFIMM",225,0)
 . d wsIntakeImmu(.filter,,.reslt,ien)
"RTN","SYNFIMM",226,0)
 . s done=1
"RTN","SYNFIMM",227,0)
 q
"RTN","SYNFIMM",228,0)
 ;
"RTN","SYNFPAT")
0^8^B96241829
"RTN","SYNFPAT",1,0)
SYNFPAT ;ven/gpl - fhir loader utilities ; 10/19/17 4:33pm
"RTN","SYNFPAT",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFPAT",3,0)
 ;
"RTN","SYNFPAT",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFPAT",5,0)
 ;
"RTN","SYNFPAT",6,0)
 q
"RTN","SYNFPAT",7,0)
 ;
"RTN","SYNFPAT",8,0)
importPatient(rtn,ien) ; register and import a fhir patient (demographics only)
"RTN","SYNFPAT",9,0)
 ;
"RTN","SYNFPAT",10,0)
 if $get(ien)="" quit
"RTN","SYNFPAT",11,0)
 new fhir
"RTN","SYNFPAT",12,0)
 do getIntakeFhir^SYNFHIR("fhir",,"Patient",ien)
"RTN","SYNFPAT",13,0)
 ;
"RTN","SYNFPAT",14,0)
 ; set up logging and parameter area
"RTN","SYNFPAT",15,0)
 ;
"RTN","SYNFPAT",16,0)
 new PLD merge PLD=@$$setPLD^SYNFUTL(ien,"Patient")
"RTN","SYNFPAT",17,0)
 new parms set parms=PLD("parms") ; global name of where to put the parms
"RTN","SYNFPAT",18,0)
 ;
"RTN","SYNFPAT",19,0)
 if $g(@PLD("status")@("loadStatus"))="loaded" do  quit  ;
"RTN","SYNFPAT",20,0)
 . new zdfn s zdfn=$g(@PLD("status")@("DFN"))
"RTN","SYNFPAT",21,0)
 . do log^SYNFUTL("Patient "_ien_" already loaded DFN= "_zdfn)
"RTN","SYNFPAT",22,0)
 . set rtn("loadStatus")="already loaded"
"RTN","SYNFPAT",23,0)
 . set rtn("dfn")=zdfn
"RTN","SYNFPAT",24,0)
 ;
"RTN","SYNFPAT",25,0)
 kill @PLD("parms")
"RTN","SYNFPAT",26,0)
 kill @PLD("log")
"RTN","SYNFPAT",27,0)
 ;
"RTN","SYNFPAT",28,0)
 do log^SYNFUTL("Patient load begins for fhirien= "_ien)
"RTN","SYNFPAT",29,0)
 ;
"RTN","SYNFPAT",30,0)
 ; name
"RTN","SYNFPAT",31,0)
 ;
"RTN","SYNFPAT",32,0)
 new patname
"RTN","SYNFPAT",33,0)
 set patname=$$patname("fhir") 
"RTN","SYNFPAT",34,0)
 if patname'="" do  ;
"RTN","SYNFPAT",35,0)
 . set @parms@("NAME")=patname
"RTN","SYNFPAT",36,0)
 . do log^SYNFUTL("Patient name is: "_patname)
"RTN","SYNFPAT",37,0)
 else  do log^SYNFUTL("Patient Name Error")
"RTN","SYNFPAT",38,0)
 ; need to find the entry for the Patient resource
"RTN","SYNFPAT",39,0)
 ;
"RTN","SYNFPAT",40,0)
 n zntry s zntry=$o(fhir("Patient","entry",""))
"RTN","SYNFPAT",41,0)
 ;
"RTN","SYNFPAT",42,0)
 ;
"RTN","SYNFPAT",43,0)
 ; gender
"RTN","SYNFPAT",44,0)
 ;
"RTN","SYNFPAT",45,0)
 new psex
"RTN","SYNFPAT",46,0)
 set psex=$get(fhir("Patient","entry",zntry,"resource","gender"))
"RTN","SYNFPAT",47,0)
 if psex'="" do  ;
"RTN","SYNFPAT",48,0)
 . do log^SYNFUTL("Patient gender is: "_psex)
"RTN","SYNFPAT",49,0)
 . set @parms@("SEX")=$select(psex="male":"M",psex="female":"F",1:"F")
"RTN","SYNFPAT",50,0)
 else  do log^SYNFUTL("Patient gender not found")
"RTN","SYNFPAT",51,0)
 ;
"RTN","SYNFPAT",52,0)
 ; date of birth
"RTN","SYNFPAT",53,0)
 ;
"RTN","SYNFPAT",54,0)
 new dob
"RTN","SYNFPAT",55,0)
 set dob=$get(fhir("Patient","entry",zntry,"resource","birthDate"))
"RTN","SYNFPAT",56,0)
 if dob'="" do  ;
"RTN","SYNFPAT",57,0)
 . new X,Y
"RTN","SYNFPAT",58,0)
 . set X=dob
"RTN","SYNFPAT",59,0)
 . do ^%DT
"RTN","SYNFPAT",60,0)
 . if Y=-1 do log^SYNFUTL("Patient date of birth error "_dob) quit  ;
"RTN","SYNFPAT",61,0)
 . set @parms@("DOB")=Y
"RTN","SYNFPAT",62,0)
 else  do log^SYNFUTL("Patient date of birth error "_dob)
"RTN","SYNFPAT",63,0)
 ;
"RTN","SYNFPAT",64,0)
 ; id - fhir id, not ICN
"RTN","SYNFPAT",65,0)
 ;
"RTN","SYNFPAT",66,0)
 new pid
"RTN","SYNFPAT",67,0)
 set pid=$get(fhir("Patient","entry",zntry,"resource","id"))
"RTN","SYNFPAT",68,0)
 if pid="" do log^SYNFUTL("Patient ID is missing")
"RTN","SYNFPAT",69,0)
 else  do  ;
"RTN","SYNFPAT",70,0)
 . set @parms@("ID")=pid
"RTN","SYNFPAT",71,0)
 . do log^SYNFUTL("Patient ID is "_pid)
"RTN","SYNFPAT",72,0)
 ;
"RTN","SYNFPAT",73,0)
 ; ethnicity code
"RTN","SYNFPAT",74,0)
 ;
"RTN","SYNFPAT",75,0)
 do INITMAPS^SYNQLDM
"RTN","SYNFPAT",76,0)
 new eary,ecd
"RTN","SYNFPAT",77,0)
 ;do adb^SYNFUTL("eary","fhir","text","ethnicity") ; array defined by 
"RTN","SYNFPAT",78,0)
 ;set ecd=$get(eary("coding",1,"code")) ; the ethnic code
"RTN","SYNFPAT",79,0)
 set ecd=$$deriveCode("fhir","us-core-ethnicity",zntry)
"RTN","SYNFPAT",80,0)
 if ecd'="" d  ;
"RTN","SYNFPAT",81,0)
 . do log^SYNFUTL("Ethnicity code is "_ecd)
"RTN","SYNFPAT",82,0)
 . new ecdn
"RTN","SYNFPAT",83,0)
 . set ecdn=$$MAP^SYNQLDM(ecd)
"RTN","SYNFPAT",84,0)
 . if ecdn="" do  quit  ;
"RTN","SYNFPAT",85,0)
 . . do log^SYNFUTL("Ethnicity code "_ecd_" does not map")
"RTN","SYNFPAT",86,0)
 . set @parms@("ETHNICITY")=ecdn
"RTN","SYNFPAT",87,0)
 else  do log^SYNFUTL("Ethnicity code missing")
"RTN","SYNFPAT",88,0)
 ;
"RTN","SYNFPAT",89,0)
 ; race code
"RTN","SYNFPAT",90,0)
 ;
"RTN","SYNFPAT",91,0)
 new rary,rcd
"RTN","SYNFPAT",92,0)
 ;do adb^SYNFUTL("rary","fhir","text","race") ; array defined by 
"RTN","SYNFPAT",93,0)
 ;set rcd=$get(rary("coding",1,"code")) ; the ethnic code
"RTN","SYNFPAT",94,0)
 set rcd=$$deriveCode("fhir","us-core-race",zntry)
"RTN","SYNFPAT",95,0)
 if rcd'="" d  ;
"RTN","SYNFPAT",96,0)
 . do log^SYNFUTL("Race code is "_rcd)
"RTN","SYNFPAT",97,0)
 . new rcdn
"RTN","SYNFPAT",98,0)
 . set rcdn=$$MAP^SYNQLDM(rcd)
"RTN","SYNFPAT",99,0)
 . if rcdn="" do  quit  ;
"RTN","SYNFPAT",100,0)
 . . do log^SYNFUTL("Race code "_rcd_" does not map")
"RTN","SYNFPAT",101,0)
 . set @parms@("RACE")=rcdn
"RTN","SYNFPAT",102,0)
 else  do log^SYNFUTL("Race code missing")
"RTN","SYNFPAT",103,0)
 ;
"RTN","SYNFPAT",104,0)
 ; address
"RTN","SYNFPAT",105,0)
 ;
"RTN","SYNFPAT",106,0)
 s @parms@("CITY")=$g(fhir("Patient","entry",zntry,"resource","address",1,"city"))
"RTN","SYNFPAT",107,0)
 s @parms@("STATE")=$g(fhir("Patient","entry",zntry,"resource","address",1,"state"))
"RTN","SYNFPAT",108,0)
 s @parms@("ZIP")=$g(fhir("Patient","entry",zntry,"resource","address",1,"postalCode"))
"RTN","SYNFPAT",109,0)
 s @parms@("STREET_ADD1")=$g(fhir("Patient","entry",zntry,"resource","address",1,"line",1))
"RTN","SYNFPAT",110,0)
 s @parms@("PH_NUM")=$g(fhir("Patient","entry",zntry,"resource","telecom",1,"value"))
"RTN","SYNFPAT",111,0)
 s @parms@("IMP_TYPE")="I" ; individual not batch load
"RTN","SYNFPAT",112,0)
 s @parms@("SSN")=$$patssn("fhir")
"RTN","SYNFPAT",113,0)
 s @parms@("MARITAL_STATUS")=$get(fhir("Patient","entry",zntry,"resource","maritalStatus","coding",1,"code"))
"RTN","SYNFPAT",114,0)
 ;
"RTN","SYNFPAT",115,0)
 ; call import routine
"RTN","SYNFPAT",116,0)
 ;
"RTN","SYNFPAT",117,0)
 n MISC
"RTN","SYNFPAT",118,0)
 m MISC=@parms
"RTN","SYNFPAT",119,0)
 d IMPORTPT^ISIIMP03(.MISC)
"RTN","SYNFPAT",120,0)
 d log^SYNFUTL("Called IMPORTPT^ISIIMP03 to import patient")
"RTN","SYNFPAT",121,0)
 d log^SYNFUTL("Return code from Import: "_ISIRC)
"RTN","SYNFPAT",122,0)
 d log^SYNFUTL("Return values from Import: "_$G(ISIRESUL(1)))
"RTN","SYNFPAT",123,0)
 i $g(ISIRC)="" do  quit  ;
"RTN","SYNFPAT",124,0)
 . d log^SYNFUTL("No return from patient load")
"RTN","SYNFPAT",125,0)
 . s rtn("status")="Patient load error"
"RTN","SYNFPAT",126,0)
 n zdfn s zdfn=0
"RTN","SYNFPAT",127,0)
 i $g(ISIRESUL(1))'="" s zdfn=$P(ISIRESUL(1),"^",1)
"RTN","SYNFPAT",128,0)
 ;
"RTN","SYNFPAT",129,0)
 ; load failed
"RTN","SYNFPAT",130,0)
 ;
"RTN","SYNFPAT",131,0)
 i +zdfn<1 d  q  ;
"RTN","SYNFPAT",132,0)
 . s rtn("loadStatus")="notLoaded"
"RTN","SYNFPAT",133,0)
 . s rtn("loadMessage")=$g(ISIRC)
"RTN","SYNFPAT",134,0)
 . s @PLD("status")@("loadStatus")="notLoaded"
"RTN","SYNFPAT",135,0)
 . s @PLD("status")@("loadMessage")=$g(ISIRC)
"RTN","SYNFPAT",136,0)
 ;
"RTN","SYNFPAT",137,0)
 ; load successful
"RTN","SYNFPAT",138,0)
 ;
"RTN","SYNFPAT",139,0)
 new icn set icn=$$newIcn(zdfn)
"RTN","SYNFPAT",140,0)
 if icn'=-1 s @PLD("status")@("ICN")=icn
"RTN","SYNFPAT",141,0)
 s @PLD("status")@("DFN")=zdfn
"RTN","SYNFPAT",142,0)
 s @PLD("status")@("loadStatus")="loaded"
"RTN","SYNFPAT",143,0)
 set @PLD("index")@("DFN",zdfn,ien)=""
"RTN","SYNFPAT",144,0)
 set @PLD("index")@("ICN",icn,ien)=""
"RTN","SYNFPAT",145,0)
 set @PLD("index")@(ien,"DFN",zdfn)=""
"RTN","SYNFPAT",146,0)
 set @PLD("index")@(ien,"ICN",icn)=""
"RTN","SYNFPAT",147,0)
 d setIndex^SYNFUTL(ien,"DFN",zdfn)
"RTN","SYNFPAT",148,0)
 d setIndex^SYNFUTL(ien,"ICN",icn)
"RTN","SYNFPAT",149,0)
 ;
"RTN","SYNFPAT",150,0)
 s rtn("dfn")=zdfn
"RTN","SYNFPAT",151,0)
 s rtn("loadStatus")="loaded" 
"RTN","SYNFPAT",152,0)
 if icn'=-1 s rtn("icn")=icn
"RTN","SYNFPAT",153,0)
 ;
"RTN","SYNFPAT",154,0)
 quit
"RTN","SYNFPAT",155,0)
 ;
"RTN","SYNFPAT",156,0)
deriveCode(zary,zname,zntry) ; finds the code for ethnicity and race
"RTN","SYNFPAT",157,0)
 ;
"RTN","SYNFPAT",158,0)
 n zary2,zdex,zz1,zurl,done,zcode
"RTN","SYNFPAT",159,0)
 s zcode=""
"RTN","SYNFPAT",160,0)
 s done=0
"RTN","SYNFPAT",161,0)
 s zzi=0
"RTN","SYNFPAT",162,0)
 f  s zzi=$o(@zary@("Patient","entry",zntry,"resource","extension",zzi)) q:+zzi=0  q:done  d  ;
"RTN","SYNFPAT",163,0)
 . s zurl=$g(@zary@("Patient","entry",zntry,"resource","extension",zzi,"url"))
"RTN","SYNFPAT",164,0)
 . i $$urlEnd^SYNFUTL(zurl)=zname d  ;
"RTN","SYNFPAT",165,0)
 . . m zary2=@zary@("Patient","entry",zntry,"resource","extension",zzi)
"RTN","SYNFPAT",166,0)
 . . d valueDex2^SYNFUTL("zary2","zdex")
"RTN","SYNFPAT",167,0)
 . . q:'$d(zdex)
"RTN","SYNFPAT",168,0)
 . . s zcode=$o(zdex("code",""))
"RTN","SYNFPAT",169,0)
 . . q:zcode=""
"RTN","SYNFPAT",170,0)
 . . s done=1
"RTN","SYNFPAT",171,0)
 q zcode
"RTN","SYNFPAT",172,0)
 ;
"RTN","SYNFPAT",173,0)
patname(ary) ; ary is passed by name
"RTN","SYNFPAT",174,0)
 new given,family
"RTN","SYNFPAT",175,0)
 n zntry s zntry=$o(@ary@("Patient","entry","")) ; which resource is the Patient
"RTN","SYNFPAT",176,0)
 ;
"RTN","SYNFPAT",177,0)
 ; Synthea patient resources are 1; new fhir Patient resources are 2
"RTN","SYNFPAT",178,0)
 ;
"RTN","SYNFPAT",179,0)
 set family=$get(@ary@("Patient","entry",zntry,"resource","name",1,"family"))
"RTN","SYNFPAT",180,0)
 set given=$get(@ary@("Patient","entry",zntry,"resource","name",1,"given",1))
"RTN","SYNFPAT",181,0)
 if family="" quit ""
"RTN","SYNFPAT",182,0)
 if given="" quit ""
"RTN","SYNFPAT",183,0)
 new X,Y
"RTN","SYNFPAT",184,0)
 set X=family
"RTN","SYNFPAT",185,0)
 x ^%ZOSF("UPPERCASE")
"RTN","SYNFPAT",186,0)
 set family=Y
"RTN","SYNFPAT",187,0)
 set X=given
"RTN","SYNFPAT",188,0)
 x ^%ZOSF("UPPERCASE")
"RTN","SYNFPAT",189,0)
 set given=Y
"RTN","SYNFPAT",190,0)
 ;
"RTN","SYNFPAT",191,0)
 quit family_","_given
"RTN","SYNFPAT",192,0)
 ;
"RTN","SYNFPAT",193,0)
patssn(fary) ; extrinsic returns the ssn of the patient extracted from
"RTN","SYNFPAT",194,0)
 ; the fhir array, passed by name
"RTN","SYNFPAT",195,0)
 new ssnref,tary,ssn
"RTN","SYNFPAT",196,0)
 ; set ssnref="http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-SocialSecurityNumber-extension"
"RTN","SYNFPAT",197,0)
 set ssnref="http://hl7.org/fhir/sid/us-ssn"
"RTN","SYNFPAT",198,0)
 do adb^SYNFUTL("tary",fary,"system",ssnref) ; array defined by
"RTN","SYNFPAT",199,0)
 ;
"RTN","SYNFPAT",200,0)
 set ssn=$get(tary("value"))
"RTN","SYNFPAT",201,0)
 if ssn["-" set ssn=$tr(ssn,"-","")
"RTN","SYNFPAT",202,0)
 quit ssn
"RTN","SYNFPAT",203,0)
 ;
"RTN","SYNFPAT",204,0)
 ; sample patient fhir
"RTN","SYNFPAT",205,0)
 ;g("Patient","entry",1,"fullUrl")="urn:uuid:a13f2440-a3ec-419a-8259-82710d695fdf"
"RTN","SYNFPAT",206,0)
 ;g("Patient","entry",1,"resource","address",1,"city")="Fitchburg"
"RTN","SYNFPAT",207,0)
 ;g("Patient","entry",1,"resource","address",1,"country")="US"
"RTN","SYNFPAT",208,0)
 ;g("Patient","entry",1,"resource","address",1,"extension",1,"extension",1,"url")="latitude"
"RTN","SYNFPAT",209,0)
 ;g("Patient","entry",1,"resource","address",1,"extension",1,"extension",1,"valueDecimal")=42.562168065623744
"RTN","SYNFPAT",210,0)
 ;g("Patient","entry",1,"resource","address",1,"extension",1,"extension",2,"url")="longitude"
"RTN","SYNFPAT",211,0)
 ;g("Patient","entry",1,"resource","address",1,"extension",1,"extension",2,"valueDecimal")=-71.81748413047194
"RTN","SYNFPAT",212,0)
 ;g("Patient","entry",1,"resource","address",1,"extension",1,"url")="http://hl7.org/fhir/StructureDefinition/geolocation"
"RTN","SYNFPAT",213,0)
 ;g("Patient","entry",1,"resource","address",1,"line",1)="9802 Bosco Field"
"RTN","SYNFPAT",214,0)
 ;g("Patient","entry",1,"resource","address",1,"line",2)="Suite 454"
"RTN","SYNFPAT",215,0)
 ;g("Patient","entry",1,"resource","address",1,"postalCode")="01420"
"RTN","SYNFPAT",216,0)
 ;g("Patient","entry",1,"resource","address",1,"state")="MA"
"RTN","SYNFPAT",217,0)
 ;g("Patient","entry",1,"resource","birthDate")="1925-06-02"
"RTN","SYNFPAT",218,0)
 ;g("Patient","entry",1,"resource","communication",1,"language","coding",1,"code")="en-US"
"RTN","SYNFPAT",219,0)
 ;g("Patient","entry",1,"resource","communication",1,"language","coding",1,"display")="English (United States)"
"RTN","SYNFPAT",220,0)
 ;g("Patient","entry",1,"resource","communication",1,"language","coding",1,"system")="http://hl7.org/fhir/ValueSet/languages"
"RTN","SYNFPAT",221,0)
 ;g("Patient","entry",1,"resource","deceasedDateTime")="2002-10-08T06:31:48-04:00"
"RTN","SYNFPAT",222,0)
 ;g("Patient","entry",1,"resource","extension",1,"url")="http://hl7.org/fhir/us/core/StructureDefinition/us-core-race"
"RTN","SYNFPAT",223,0)
 ;g("Patient","entry",1,"resource","extension",1,"valueCodeableConcept","coding",1,"code")="2106-3"
"RTN","SYNFPAT",224,0)
 ;g("Patient","entry",1,"resource","extension",1,"valueCodeableConcept","coding",1,"display")="White"
"RTN","SYNFPAT",225,0)
 ;g("Patient","entry",1,"resource","extension",1,"valueCodeableConcept","coding",1,"system")="http://hl7.org/fhir/v3/Race"
"RTN","SYNFPAT",226,0)
 ;g("Patient","entry",1,"resource","extension",1,"valueCodeableConcept","text")="race"
"RTN","SYNFPAT",227,0)
 ;g("Patient","entry",1,"resource","extension",2,"url")="http://hl7.org/fhir/us/core/StructureDefinition/us-core-ethnicity"
"RTN","SYNFPAT",228,0)
 ;g("Patient","entry",1,"resource","extension",2,"valueCodeableConcept","coding",1,"code")="2186-5"
"RTN","SYNFPAT",229,0)
 ;g("Patient","entry",1,"resource","extension",2,"valueCodeableConcept","coding",1,"display")="Nonhispanic"
"RTN","SYNFPAT",230,0)
 ;g("Patient","entry",1,"resource","extension",2,"valueCodeableConcept","coding",1,"system")="http://hl7.org/fhir/v3/Ethnicity"
"RTN","SYNFPAT",231,0)
 ;g("Patient","entry",1,"resource","extension",2,"valueCodeableConcept","text")="ethnicity"
"RTN","SYNFPAT",232,0)
 ;g("Patient","entry",1,"resource","extension",3,"url")="http://hl7.org/fhir/StructureDefinition/birthPlace"
"RTN","SYNFPAT",233,0)
 ;g("Patient","entry",1,"resource","extension",3,"valueAddress","city")="Easton"
"RTN","SYNFPAT",234,0)
 ;g("Patient","entry",1,"resource","extension",3,"valueAddress","country")="US"
"RTN","SYNFPAT",235,0)
 ;g("Patient","entry",1,"resource","extension",3,"valueAddress","state")="MA"
"RTN","SYNFPAT",236,0)
 ;g("Patient","entry",1,"resource","extension",4,"url")="http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName"
"RTN","SYNFPAT",237,0)
 ;g("Patient","entry",1,"resource","extension",4,"valueString")="Jeramie91 Waelchi310"
"RTN","SYNFPAT",238,0)
 ;g("Patient","entry",1,"resource","extension",5,"url")="http://hl7.org/fhir/us/core/StructureDefinition/us-core-birthsex"
"RTN","SYNFPAT",239,0)
 ;g("Patient","entry",1,"resource","extension",5,"valueCode")="M"
"RTN","SYNFPAT",240,0)
 ;g("Patient","entry",1,"resource","extension",6,"url")="http://hl7.org/fhir/StructureDefinition/patient-interpreterRequired"
"RTN","SYNFPAT",241,0)
 ;g("Patient","entry",1,"resource","extension",6,"valueBoolean")="false"
"RTN","SYNFPAT",242,0)
 ;g("Patient","entry",1,"resource","extension",7,"url")="http://standardhealthrecord.org/fhir/StructureDefinition/shr-actor-FictionalPerson-extension"
"RTN","SYNFPAT",243,0)
 ;g("Patient","entry",1,"resource","extension",7,"valueBoolean")="true"
"RTN","SYNFPAT",244,0)
 ;g("Patient","entry",1,"resource","extension",8,"url")="http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-FathersName-extension"
"RTN","SYNFPAT",245,0)
 ;g("Patient","entry",1,"resource","extension",8,"valueHumanName","text")="Veronica383 Abbott509"
"RTN","SYNFPAT",246,0)
 ;g("Patient","entry",1,"resource","extension",9,"url")="http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-SocialSecurityNumber-extension"
"RTN","SYNFPAT",247,0)
 ;g("Patient","entry",1,"resource","extension",9,"valueString")="999-67-7452"
"RTN","SYNFPAT",248,0)
 ;g("Patient","entry",1,"resource","gender")="male"
"RTN","SYNFPAT",249,0)
 ;g("Patient","entry",1,"resource","id")="a13f2440-a3ec-419a-8259-82710d695fdf"
"RTN","SYNFPAT",250,0)
 ;g("Patient","entry",1,"resource","identifier",1,"system")="https://github.com/synthetichealth/synthea"
"RTN","SYNFPAT",251,0)
 ;g("Patient","entry",1,"resource","identifier",1,"value")="72bcbb80-2cbd-4523-82c1-30a34e08a72a"
"RTN","SYNFPAT",252,0)
 ;g("Patient","entry",1,"resource","identifier",2,"system")="http://hl7.org/fhir/sid/us-ssn"
"RTN","SYNFPAT",253,0)
 ;g("Patient","entry",1,"resource","identifier",2,"type","coding",1,"code")="SB"
"RTN","SYNFPAT",254,0)
 ;g("Patient","entry",1,"resource","identifier",2,"type","coding",1,"system")="http://hl7.org/fhir/identifier-type"
"RTN","SYNFPAT",255,0)
 ;g("Patient","entry",1,"resource","identifier",2,"value")=999677452
"RTN","SYNFPAT",256,0)
 ;g("Patient","entry",1,"resource","identifier",2,"value","\s")=""
"RTN","SYNFPAT",257,0)
 ;g("Patient","entry",1,"resource","identifier",3,"system")="urn:oid:2.16.840.1.113883.4.3.25"
"RTN","SYNFPAT",258,0)
 ;g("Patient","entry",1,"resource","identifier",3,"type","coding",1,"code")="DL"
"RTN","SYNFPAT",259,0)
 ;g("Patient","entry",1,"resource","identifier",3,"type","coding",1,"system")="http://hl7.org/fhir/v2/0203"
"RTN","SYNFPAT",260,0)
 ;g("Patient","entry",1,"resource","identifier",3,"value")="S99925046"
"RTN","SYNFPAT",261,0)
 ;g("Patient","entry",1,"resource","maritalStatus","coding",1,"code")="M"
"RTN","SYNFPAT",262,0)
 ;g("Patient","entry",1,"resource","maritalStatus","coding",1,"system")="http://hl7.org/fhir/v3/MaritalStatus"
"RTN","SYNFPAT",263,0)
 ;g("Patient","entry",1,"resource","maritalStatus","text")="M"
"RTN","SYNFPAT",264,0)
 ;g("Patient","entry",1,"resource","meta","profile",1)="http://standardhealthrecord.org/fhir/StructureDefinition/shr-demographics-PersonOfRecord"
"RTN","SYNFPAT",265,0)
 ;g("Patient","entry",1,"resource","multipleBirthBoolean")="false"
"RTN","SYNFPAT",266,0)
 ;g("Patient","entry",1,"resource","name",1,"family")="Abbott509"
"RTN","SYNFPAT",267,0)
 ;g("Patient","entry",1,"resource","name",1,"given",1)="Arlie395"
"RTN","SYNFPAT",268,0)
 ;g("Patient","entry",1,"resource","name",1,"prefix",1)="Mr."
"RTN","SYNFPAT",269,0)
 ;g("Patient","entry",1,"resource","name",1,"use")="official"
"RTN","SYNFPAT",270,0)
 ;g("Patient","entry",1,"resource","resourceType")="Patient"
"RTN","SYNFPAT",271,0)
 ;g("Patient","entry",1,"resource","telecom",1,"system")="phone"
"RTN","SYNFPAT",272,0)
 ;g("Patient","entry",1,"resource","telecom",1,"use")="home"
"RTN","SYNFPAT",273,0)
 ;g("Patient","entry",1,"resource","telecom",1,"value")="(454) 841-5126"
"RTN","SYNFPAT",274,0)
 ;g("Patient","entry",1,"resource","text","div")="<div>Generated by <a href=""https://github.com/synthetichealth/synthea"""
"RTN","SYNFPAT",275,0)
 ;g("Patient","entry",1,"resource","text","div","\",1)=">Synthea</a>. Version identifier: 4d02400401b9fab839e47bf5b2f1f6a8c683ab55</div>"
"RTN","SYNFPAT",276,0)
 ;g("Patient","entry",1,"resource","text","status")="generated"
"RTN","SYNFPAT",277,0)
 ;
"RTN","SYNFPAT",278,0)
 ; patient load template (D LOADMISC^ISIIMPU1(.G))
"RTN","SYNFPAT",279,0)
 ;G("CITY")="FIELD|.114"
"RTN","SYNFPAT",280,0)
 ;G("DFN_NAME")="PARAM|"
"RTN","SYNFPAT",281,0)
 ;G("DOB")="FIELD|.03"
"RTN","SYNFPAT",282,0)
 ;G("EMPLOY_STAT")="FIELD|.31115"
"RTN","SYNFPAT",283,0)
 ;G("ETHNICITY")="FIELD|2.06,.01"
"RTN","SYNFPAT",284,0)
 ;G("IMP_BATCH_NUM")="PARAM|"
"RTN","SYNFPAT",285,0)
 ;G("IMP_TYPE")="PARAM|"
"RTN","SYNFPAT",286,0)
 ;G("INSUR_TYPE")="FIELD|2.312,.01"
"RTN","SYNFPAT",287,0)
 ;G("LOW_DOB")="PARAM|.03"
"RTN","SYNFPAT",288,0)
 ;G("MARITAL_STATUS")="FIELD|.05"
"RTN","SYNFPAT",289,0)
 ;G("MRG_SOURCE")="FIELD|.01"
"RTN","SYNFPAT",290,0)
 ;G("NAME")="FIELD|.01"
"RTN","SYNFPAT",291,0)
 ;G("NAME_MASK")="MASK|.01"
"RTN","SYNFPAT",292,0)
 ;G("OCCUPATION")="FIELD|.07"
"RTN","SYNFPAT",293,0)
 ;G("PH_NUM")="FIELD|.131"
"RTN","SYNFPAT",294,0)
 ;G("PH_NUM_MASK")="MASK|.131"
"RTN","SYNFPAT",295,0)
 ;G("RACE")="FIELD|2.02,.01"
"RTN","SYNFPAT",296,0)
 ;G("SEX")="FIELD|.02"
"RTN","SYNFPAT",297,0)
 ;G("SSN")="FIELD|.09"
"RTN","SYNFPAT",298,0)
 ;G("SSN_MASK")="MASK|.09"
"RTN","SYNFPAT",299,0)
 ;G("STATE")="FIELD|.115"
"RTN","SYNFPAT",300,0)
 ;G("STREET_ADD1")="FIELD|.111"
"RTN","SYNFPAT",301,0)
 ;G("STREET_ADD2")="FIELD|.112"
"RTN","SYNFPAT",302,0)
 ;G("TEMPLATE")="PARAM|"
"RTN","SYNFPAT",303,0)
 ;G("TYPE")="FIELD|391"
"RTN","SYNFPAT",304,0)
 ;G("UP_DOB")="PARAM|.03"
"RTN","SYNFPAT",305,0)
 ;G("VETERAN")="FIELD|1901"
"RTN","SYNFPAT",306,0)
 ;G("ZIP_4")="FIELD|.1112"
"RTN","SYNFPAT",307,0)
 ;G("ZIP_4_MASK")="MASK|.1112
"RTN","SYNFPAT",308,0)
 ;"
"RTN","SYNFPAT",309,0)
newIcn(dfn) ; extrinsic which creates a new ICN for the patient
"RTN","SYNFPAT",310,0)
 ; if none exists. returns the ICN
"RTN","SYNFPAT",311,0)
 ;
"RTN","SYNFPAT",312,0)
 new tmpicn
"RTN","SYNFPAT",313,0)
 set tmpicn=$$icn(dfn)
"RTN","SYNFPAT",314,0)
 if tmpicn'=-1 do  quit tmpicn  
"RTN","SYNFPAT",315,0)
 . n ien s ien=$$dfn2ien^SYNFUTL(dfn)
"RTN","SYNFPAT",316,0)
 . if ien'="" do setIndex^SYNFUTL(ien,"ICN",tmpicn)
"RTN","SYNFPAT",317,0)
 ;
"RTN","SYNFPAT",318,0)
 ; lock here
"RTN","SYNFPAT",319,0)
 ;
"RTN","SYNFPAT",320,0)
 set tmpicn=$o(^DPT("AICN",99999999999),-1)+1
"RTN","SYNFPAT",321,0)
 if tmpicn=1 s tmpicn=50000001 ; first ICN in the system
"RTN","SYNFPAT",322,0)
 ;
"RTN","SYNFPAT",323,0)
 ;991.01    INTEGRATION CONTROL NUMBER (NJ12,0Xa), [MPI;1]          
"RTN","SYNFPAT",324,0)
 ;991.02    ICN CHECKSUM (Fa), [MPI;2]
"RTN","SYNFPAT",325,0)
 ;991.1     FULL ICN (FXa), [MPI;10]
"RTN","SYNFPAT",326,0)
 ;
"RTN","SYNFPAT",327,0)
 new fda,tchk
"RTN","SYNFPAT",328,0)
 set tchk=$$CHECKDG^MPIFSPC(tmpicn)
"RTN","SYNFPAT",329,0)
 set fda(2,dfn_",",991.01)=tmpicn
"RTN","SYNFPAT",330,0)
 set fda(2,dfn_",",991.02)=tchk
"RTN","SYNFPAT",331,0)
 set fda(2,dfn_",",991.1)=tmpicn_"V"_tchk
"RTN","SYNFPAT",332,0)
 do UPDATE^DIE("","fda",,"err")
"RTN","SYNFPAT",333,0)
 if $data(err) do  quit -1
"RTN","SYNFPAT",334,0)
 . D ^ZTER
"RTN","SYNFPAT",335,0)
 ;
"RTN","SYNFPAT",336,0)
 new ficn s ficn=tmpicn_"V"_tchk
"RTN","SYNFPAT",337,0)
 S ^DPT("AFICN",ficn,dfn)=""
"RTN","SYNFPAT",338,0)
 S ^DPT("ARFICN",dfn,ficn)=""
"RTN","SYNFPAT",339,0)
 ;
"RTN","SYNFPAT",340,0)
 n ien s ien=$$dfn2ien^SYNFUTL(dfn)
"RTN","SYNFPAT",341,0)
 if ien'="" do setIndex^SYNFUTL(ien,"ICN",ficn)
"RTN","SYNFPAT",342,0)
 ;
"RTN","SYNFPAT",343,0)
 quit ficn
"RTN","SYNFPAT",344,0)
 ;
"RTN","SYNFPAT",345,0)
icn(dfn) ; extrinsic returns the ICN of the patient
"RTN","SYNFPAT",346,0)
 ; returns -1 if none exists
"RTN","SYNFPAT",347,0)
 new zicn
"RTN","SYNFPAT",348,0)
 set zicn=$$GET1^DIQ(2,dfn_",",991.01)
"RTN","SYNFPAT",349,0)
 ;set zicn=$o(^DPT("AICN",dfn,""))
"RTN","SYNFPAT",350,0)
 if zicn="" q -1
"RTN","SYNFPAT",351,0)
 ;
"RTN","SYNFPAT",352,0)
 quit zicn_"V"_$$CHECKDG^MPIFSPC(zicn)
"RTN","SYNFPAT",353,0)
 ;
"RTN","SYNFPAT",354,0)
fixindex1 ; create the ICN and DFN indexes
"RTN","SYNFPAT",355,0)
 d clearIndexes^SYNFUTL ; blow away the indexes
"RTN","SYNFPAT",356,0)
 n gn,zi
"RTN","SYNFPAT",357,0)
 s gn=$$setroot^%wd("fhir-intake")
"RTN","SYNFPAT",358,0)
 s zi=0
"RTN","SYNFPAT",359,0)
 f  s zi=$o(@gn@(zi)) q:+zi=0  d  ;
"RTN","SYNFPAT",360,0)
 . n gn2,dfn,icn
"RTN","SYNFPAT",361,0)
 . s gn2=$na(@gn@(zi,"load","Patient","status"))
"RTN","SYNFPAT",362,0)
 . w !,gn2," ",$g(@gn2@("DFN"))
"RTN","SYNFPAT",363,0)
 . s dfn=$g(@gn2@("DFN"))
"RTN","SYNFPAT",364,0)
 . q:dfn=""
"RTN","SYNFPAT",365,0)
 . ;s icn=$g(@gn2@("ICN"))
"RTN","SYNFPAT",366,0)
 . s icn=$o(^DPT("ARFICN",dfn,""))
"RTN","SYNFPAT",367,0)
 . q:icn=""
"RTN","SYNFPAT",368,0)
 . s @gn@(zi,"DFN",dfn)=""
"RTN","SYNFPAT",369,0)
 . d setIndex^SYNFUTL(zi,"DFN",dfn)
"RTN","SYNFPAT",370,0)
 . i icn'="" d  
"RTN","SYNFPAT",371,0)
 . . s @gn@(zi,"ICN",icn)=""
"RTN","SYNFPAT",372,0)
 . . d setIndex^SYNFUTL(zi,"ICN",icn)
"RTN","SYNFPAT",373,0)
 q
"RTN","SYNFPAT",374,0)
 ;
"RTN","SYNFPAT",375,0)
fixicn1 ; fix all DPT ICN indexes
"RTN","SYNFPAT",376,0)
 k ^DPT("AICN")
"RTN","SYNFPAT",377,0)
 K ^DPT("AFICN")
"RTN","SYNFPAT",378,0)
 K ^DPT("AFRICN")
"RTN","SYNFPAT",379,0)
 n zi s zi=0
"RTN","SYNFPAT",380,0)
 f  s zi=$o(^DPT(zi)) q:+zi=0  d  ;
"RTN","SYNFPAT",381,0)
 . n icn,icnck
"RTN","SYNFPAT",382,0)
 . s icn=$$GET1^DIQ(2,zi_",",991.01)
"RTN","SYNFPAT",383,0)
 . s icnck=$$GET1^DIQ(2,zi_",",991.02)
"RTN","SYNFPAT",384,0)
 . q:icn=""
"RTN","SYNFPAT",385,0)
 . q:icnck=""
"RTN","SYNFPAT",386,0)
 . n ficn s ficn=icn_"V"_icnck
"RTN","SYNFPAT",387,0)
 . s ^DPT("AICN",icn,zi)=""
"RTN","SYNFPAT",388,0)
 . s ^DPT("AFICN",ficn,zi)=""
"RTN","SYNFPAT",389,0)
 . s ^DPT("ARFICN",zi,ficn)=""
"RTN","SYNFPAT",390,0)
 q
"RTN","SYNFPAT",391,0)
 ;
"RTN","SYNFPR2")
0^9^B139580691
"RTN","SYNFPR2",1,0)
SYNFPR2 ;ven/gpl - fhir loader utilities ; 2/24/18 4:55am
"RTN","SYNFPR2",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFPR2",3,0)
 ;
"RTN","SYNFPR2",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFPR2",5,0)
        ;
"RTN","SYNFPR2",6,0)
 ; use SYNDHP61 instead of SYNDHP62 for problem update
"RTN","SYNFPR2",7,0)
 q
"RTN","SYNFPR2",8,0)
 ;
"RTN","SYNFPR2",9,0)
importConditions(rtn,ien,args)  ; entry point for loading Problems for a patient
"RTN","SYNFPR2",10,0)
        ; calls the intake Conditions web service directly
"RTN","SYNFPR2",11,0)
        ;
"RTN","SYNFPR2",12,0)
        n grtn
"RTN","SYNFPR2",13,0)
        n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPR2",14,0)
        d wsIntakeConditions(.args,,.grtn,ien)
"RTN","SYNFPR2",15,0)
        i $d(grtn) d  ; something was returned
"RTN","SYNFPR2",16,0)
        . k @root@(ien,"load","conditions")
"RTN","SYNFPR2",17,0)
        . m @root@(ien,"load","conditions")=grtn("conditions")
"RTN","SYNFPR2",18,0)
        . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFPR2",19,0)
        s rtn("conditionsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFPR2",20,0)
        s rtn("conditionsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFPR2",21,0)
        s rtn("conditionsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFPR2",22,0)
        ;b
"RTN","SYNFPR2",23,0)
        ;
"RTN","SYNFPR2",24,0)
        ;
"RTN","SYNFPR2",25,0)
        q
"RTN","SYNFPR2",26,0)
        ;
"RTN","SYNFPR2",27,0)
wsIntakeConditions(args,body,result,ien)        ; web service entry (post)
"RTN","SYNFPR2",28,0)
        ; for intake of one or more Conditions. input are fhir resources
"RTN","SYNFPR2",29,0)
        ; result is json and summarizes what was done
"RTN","SYNFPR2",30,0)
        ; args include patientId
"RTN","SYNFPR2",31,0)
        ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFPR2",32,0)
        n jtmp,json,jrslt,eval
"RTN","SYNFPR2",33,0)
        ;i $g(ien)'="" if $$loadStatus("conditions","",ien)=1 d  q  ;
"RTN","SYNFPR2",34,0)
        ;. s result("conditionsStatus","status")="alreadyLoaded"
"RTN","SYNFPR2",35,0)
        i $g(ien)'="" d  ; internal call
"RTN","SYNFPR2",36,0)
        . d getIntakeFhir^SYNFHIR("json",,"Condition",ien,1)
"RTN","SYNFPR2",37,0)
        e  d  ; 
"RTN","SYNFPR2",38,0)
        . s args("load")=0
"RTN","SYNFPR2",39,0)
        . merge jtmp=BODY
"RTN","SYNFPR2",40,0)
        . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFPR2",41,0)
        i '$d(json) q  ;
"RTN","SYNFPR2",42,0)
        m ^gpl("gjson")=json
"RTN","SYNFPR2",43,0)
        ;
"RTN","SYNFPR2",44,0)
        ; determine the patient
"RTN","SYNFPR2",45,0)
        ;
"RTN","SYNFPR2",46,0)
        n dfn,eval
"RTN","SYNFPR2",47,0)
        if $g(ien)'="" d  ;
"RTN","SYNFPR2",48,0)
        . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFPR2",49,0)
        else  d  ;
"RTN","SYNFPR2",50,0)
        . s dfn=$g(args("dfn"))
"RTN","SYNFPR2",51,0)
        . i dfn="" d  ;
"RTN","SYNFPR2",52,0)
        . . n icn s icn=$g(args("icn"))
"RTN","SYNFPR2",53,0)
        . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFPR2",54,0)
        i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFPR2",55,0)
        . s result("conditions",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFPR2",56,0)
        ;
"RTN","SYNFPR2",57,0)
        ;
"RTN","SYNFPR2",58,0)
        new zi s zi=0
"RTN","SYNFPR2",59,0)
        for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFPR2",60,0)
        . ;
"RTN","SYNFPR2",61,0)
        . ; define a place to log the processing of this entry
"RTN","SYNFPR2",62,0)
        . ;
"RTN","SYNFPR2",63,0)
        . new jlog set jlog=$name(eval("conditions",zi))
"RTN","SYNFPR2",64,0)
        . ;
"RTN","SYNFPR2",65,0)
        . ; insure that the resourceType is Observation
"RTN","SYNFPR2",66,0)
        . ;
"RTN","SYNFPR2",67,0)
        . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFPR2",68,0)
        . if type'="Condition" do  quit  ;
"RTN","SYNFPR2",69,0)
        . . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFPR2",70,0)
        . . do log(jlog,"Resource type not Condition, skipping entry")
"RTN","SYNFPR2",71,0)
        . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFPR2",72,0)
        . ;
"RTN","SYNFPR2",73,0)
        . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFPR2",74,0)
        . ;
"RTN","SYNFPR2",75,0)
        . if $g(ien)'="" if $$loadStatus("condition",zi,ien)=1 do  quit  ;
"RTN","SYNFPR2",76,0)
        . . d log(jlog,"Condition already loaded, skipping")
"RTN","SYNFPR2",77,0)
        . ;
"RTN","SYNFPR2",78,0)
        . ; determine Condition snomed code, coding system, and display text
"RTN","SYNFPR2",79,0)
        . ;
"RTN","SYNFPR2",80,0)
        . ;
"RTN","SYNFPR2",81,0)
        . ; determine the id of the resource
"RTN","SYNFPR2",82,0)
        . ;
"RTN","SYNFPR2",83,0)
        . ;new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFPR2",84,0)
        . ;set eval("conditions",zi,"vars","id")=id
"RTN","SYNFPR2",85,0)
        . ;d log(jlog,"ID is: "_id)
"RTN","SYNFPR2",86,0)
        . ;
"RTN","SYNFPR2",87,0)
        . new sctcode set sctcode=$get(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFPR2",88,0)
        . do log(jlog,"code is: "_sctcode)
"RTN","SYNFPR2",89,0)
        . set eval("conditions",zi,"vars","code")=sctcode
"RTN","SYNFPR2",90,0)
        . ;
"RTN","SYNFPR2",91,0)
        . ;
"RTN","SYNFPR2",92,0)
        . new codesystem set codesystem=$get(json("entry",zi,"resource","code","coding",1,"system"))
"RTN","SYNFPR2",93,0)
        . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFPR2",94,0)
        . set eval("conditions",zi,"vars","codeSystem")=codesystem
"RTN","SYNFPR2",95,0)
        . ;
"RTN","SYNFPR2",96,0)
        . ; determine the onset date and time
"RTN","SYNFPR2",97,0)
        . ;
"RTN","SYNFPR2",98,0)
        . new onsetdate set onsetdate=$get(json("entry",zi,"resource","onsetDateTime"))
"RTN","SYNFPR2",99,0)
        . do log(jlog,"onsetDateTime is: "_onsetdate)
"RTN","SYNFPR2",100,0)
        . set eval("conditions",zi,"vars","onsetDateTime")=onsetdate
"RTN","SYNFPR2",101,0)
        . new fmOnsetDateTime s fmOnsetDateTime=$$fhirTfm^SYNFUTL(onsetdate)
"RTN","SYNFPR2",102,0)
        . d log(jlog,"fileman onsetDateTime is: "_fmOnsetDateTime)
"RTN","SYNFPR2",103,0)
        . set eval("conditions",zi,"vars","fmOnsetDateTime")=fmOnsetDateTime ;
"RTN","SYNFPR2",104,0)
        . new hl7OnsetDateTime s hl7OnsetDateTime=$$fhirThl7^SYNFUTL(onsetdate)
"RTN","SYNFPR2",105,0)
        . d log(jlog,"hl7 onsetDateTime is: "_hl7OnsetDateTime)
"RTN","SYNFPR2",106,0)
        . set eval("conditions",zi,"vars","hl7OnsetDateTime")=hl7OnsetDateTime ;
"RTN","SYNFPR2",107,0)
        . ;
"RTN","SYNFPR2",108,0)
        . ; determine the abatement date and time, if any
"RTN","SYNFPR2",109,0)
        . ;
"RTN","SYNFPR2",110,0)
        . new abatementdate set abatementdate=$get(json("entry",zi,"resource","abatementDateTime"))
"RTN","SYNFPR2",111,0)
        . if abatementdate'="" d  ;
"RTN","SYNFPR2",112,0)
        . . do log(jlog,"abatementDateTime is: "_abatementdate)
"RTN","SYNFPR2",113,0)
        . . set eval("conditions",zi,"vars","abatementDateTime")=abatementdate
"RTN","SYNFPR2",114,0)
        . . new fmAbatementDateTime s fmAbatementDateTime=$$fhirTfm^SYNFUTL(abatementdate)
"RTN","SYNFPR2",115,0)
        . . d log(jlog,"fileman abatementDateTime is: "_fmAbatementDateTime)
"RTN","SYNFPR2",116,0)
        . . set eval("conditions",zi,"vars","fmAbatementDateTime")=fmAbatementDateTime ;
"RTN","SYNFPR2",117,0)
        . . new hl7AbatementDateTime s hl7AbatementDateTime=$$fhirThl7^SYNFUTL(abatementdate)
"RTN","SYNFPR2",118,0)
        . . d log(jlog,"hl7 abatementDateTime is: "_hl7AbatementDateTime)
"RTN","SYNFPR2",119,0)
        . . set eval("conditions",zi,"vars","hl7AbatementDateTime")=hl7AbatementDateTime ;
"RTN","SYNFPR2",120,0)
        . else  d log(jlog,"no abatementDateTime")
"RTN","SYNFPR2",121,0)
        . ;
"RTN","SYNFPR2",122,0)
        . ; determine clinical status (active vs inactive)
"RTN","SYNFPR2",123,0)
        . ;
"RTN","SYNFPR2",124,0)
        . n clinicalstatus set clinicalstatus=$get(json("entry",zi,"resource","clinicalStatus"))
"RTN","SYNFPR2",125,0)
        . i $get(abatementdate)'="" set clinicalstatus="inactive" ; VistA doesn't allow active problems with a resolution date
"RTN","SYNFPR2",126,0)
        . ;
"RTN","SYNFPR2",127,0)
        . ; determine the encounter visit ien
"RTN","SYNFPR2",128,0)
        . n encounterId
"RTN","SYNFPR2",129,0)
        . s encounterId=$g(json("entry",zi,"resource","context","reference"))
"RTN","SYNFPR2",130,0)
        . i encounterId["urn:uuid:" s encounterId=$p(encounterId,"urn:uuid:",2)
"RTN","SYNFPR2",131,0)
        . s eval("conditions",zi,"vars","encounterId")=encounterId
"RTN","SYNFPR2",132,0)
        . d log(jlog,"reference encounter ID is : "_encounterId)
"RTN","SYNFPR2",133,0)
        . ;
"RTN","SYNFPR2",134,0)
        . ; determine visit ien
"RTN","SYNFPR2",135,0)
        . ;
"RTN","SYNFPR2",136,0)
        . n visitIen s visitIen=$$visitIen^SYNFENC(ien,encounterId)
"RTN","SYNFPR2",137,0)
        . s eval("conditions",zi,"vars","visitIen")=visitIen
"RTN","SYNFPR2",138,0)
        . d log(jlog,"visit ien is: "_visitIen)
"RTN","SYNFPR2",139,0)
        . ;
"RTN","SYNFPR2",140,0)
        . ; ckeck to see if the problem is an allergy in VistA
"RTN","SYNFPR2",141,0)
        . ;
"RTN","SYNFPR2",142,0)
        . n algy s algy=$$ISGMR^SYNFALG(sctcode)
"RTN","SYNFPR2",143,0)
        . i algy'=-1 d  ; this condition is an allergy in VistA
"RTN","SYNFPR2",144,0)
        . . n aname s aname=$p(algy,"^",2)
"RTN","SYNFPR2",145,0)
        . . d QADDALGY^KBIAFALG(aname,fmOnsetDateTime,ien)
"RTN","SYNFPR2",146,0)
        . ;
"RTN","SYNFPR2",147,0)
        . ; set up to call the data loader
"RTN","SYNFPR2",148,0)
        . ;
"RTN","SYNFPR2",149,0)
        . ;PRBUPDT(RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)   ;Problem/Condition update - deprecated
"RTN","SYNFPR2",150,0)
        . ;PROBUPD(RETSTA,DHPPAT,DHPSCT,DHPSDES,DHPROV,DHPDTM,DHPRID) ; problems update - use this one
"RTN","SYNFPR2",151,0)
        . n RETSTA,DHPPAT,DHPSCT,DHPSDES,DHPROV,DHPDTM,DHPRID ;
"RTN","SYNFPR2",152,0)
        . ;n RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT ;Problem/Condition update
"RTN","SYNFPR2",153,0)
        . ;s (DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)=""      ;Condition update
"RTN","SYNFPR2",154,0)
        . s (DHPPAT,DHPSCT,DHPSDES,DHPROV,DHPDTM,DHPRID)=""
"RTN","SYNFPR2",155,0)
        . ;
"RTN","SYNFPR2",156,0)
        . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFPR2",157,0)
        . s eval("conditions",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFPR2",158,0)
        . ;
"RTN","SYNFPR2",159,0)
        . s DHPVST=visitIen
"RTN","SYNFPR2",160,0)
        . s eval("conditions",zi,"parms","DHPVST")=visitIen
"RTN","SYNFPR2",161,0)
        . ;
"RTN","SYNFPR2",162,0)
        . s DHPSCT=sctcode
"RTN","SYNFPR2",163,0)
        . s eval("conditions",zi,"parms","DHPSCT")=DHPSCT
"RTN","SYNFPR2",164,0)
        . ;
"RTN","SYNFPR2",165,0)
        . ;s DHPCLNST=$S(clinicalstatus="Active":"A",1:"I")
"RTN","SYNFPR2",166,0)
        . ;s eval("conditions",zi,"parms","DHPCLNST")=DHPCLNST
"RTN","SYNFPR2",167,0)
        . ;
"RTN","SYNFPR2",168,0)
        . s DHPDTM=hl7OnsetDateTime
"RTN","SYNFPR2",169,0)
        . s eval("conditions",zi,"parms","DHPDTM")=DHPDTM
"RTN","SYNFPR2",170,0)
        . ;
"RTN","SYNFPR2",171,0)
        . s DHPPROV=$$MAP^SYNQLDM("OP","provider") ; map should return the NPI number
"RTN","SYNFPR2",172,0)
        . ;n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",IMMPROV,""))
"RTN","SYNFPR2",173,0)
        . ;if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFPR2",174,0)
        . s eval("conditions",zi,"parms","DHPPROV")=DHPPROV
"RTN","SYNFPR2",175,0)
        . d log(jlog,"Provider NPI for outpatient is: "_DHPPROV)
"RTN","SYNFPR2",176,0)
        . ;
"RTN","SYNFPR2",177,0)
        . ;s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFPR2",178,0)
        . ;n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFPR2",179,0)
        . ;if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFPR2",180,0)
        . ;s eval("conditions",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFPR2",181,0)
        . ;d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFPR2",182,0)
        . ;
"RTN","SYNFPR2",183,0)
        . s eval("conditions",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFPR2",184,0)
        . ;
"RTN","SYNFPR2",185,0)
        . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFPR2",186,0)
        . . if $g(ien)'="" if $$loadStatus("conditions",zi,ien)=1 do  quit  ;
"RTN","SYNFPR2",187,0)
        . . . d log(jlog,"Condition already loaded, skipping")
"RTN","SYNFPR2",188,0)
        . . d log(jlog,"Calling PROBUPD^SYNDHP61 to add condition")
"RTN","SYNFPR2",189,0)
        . . D PROBUPD^SYNDHP61(.RETSTA,DHPPAT,DHPSCT,DHPSDES,DHPROV,DHPDTM,DHPRID) ; problems update - use this one
"RTN","SYNFPR2",190,0)
        . . ;D PRBUPDT^SYNDHP62(.RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)      ;Problem/Condition update
"RTN","SYNFPR2",191,0)
        . . m eval("conditions",zi,"status")=RETSTA
"RTN","SYNFPR2",192,0)
        . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFPR2",193,0)
        . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFPR2",194,0)
        . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFPR2",195,0)
        . . . s eval("conditions",zi,"status","loadstatus")="loaded"
"RTN","SYNFPR2",196,0)
        . . else  d  ;
"RTN","SYNFPR2",197,0)
        . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFPR2",198,0)
        . . . s eval("conditions",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFPR2",199,0)
        . . . s eval("conditions",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFPR2",200,0)
        . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPR2",201,0)
        . . k @root@(ien,"load","conditions",zi)
"RTN","SYNFPR2",202,0)
        . . m @root@(ien,"load","conditions",zi)=eval("conditions",zi)
"RTN","SYNFPR2",203,0)
        ;
"RTN","SYNFPR2",204,0)
        if $get(args("debug"))=1 do  ;
"RTN","SYNFPR2",205,0)
        . m jrslt("source")=json
"RTN","SYNFPR2",206,0)
        . m jrslt("args")=args
"RTN","SYNFPR2",207,0)
        . m jrslt("eval")=eval
"RTN","SYNFPR2",208,0)
        m jrslt("conditionsStatus")=eval("conditionsStatus")
"RTN","SYNFPR2",209,0)
        set jrslt("result","status")="ok"
"RTN","SYNFPR2",210,0)
        set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFPR2",211,0)
        i $g(ien)'="" d  ; called internally
"RTN","SYNFPR2",212,0)
        . m result=eval
"RTN","SYNFPR2",213,0)
        . m result("status")=jrslt("result")
"RTN","SYNFPR2",214,0)
        . m result("dfn")=dfn
"RTN","SYNFPR2",215,0)
        . m result("ien")=ien
"RTN","SYNFPR2",216,0)
        . ;b
"RTN","SYNFPR2",217,0)
        e  d  ;
"RTN","SYNFPR2",218,0)
        . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFPR2",219,0)
        . set HTTPRSP("mime")="application/json" 
"RTN","SYNFPR2",220,0)
        q
"RTN","SYNFPR2",221,0)
        ;
"RTN","SYNFPR2",222,0)
log(ary,txt)    ; adds a text line to @ary@("log")
"RTN","SYNFPR2",223,0)
        s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFPR2",224,0)
        q
"RTN","SYNFPR2",225,0)
        ;
"RTN","SYNFPR2",226,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFPR2",227,0)
        n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPR2",228,0)
        n rt s rt=0
"RTN","SYNFPR2",229,0)
        i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFPR2",230,0)
        i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFPR2",231,0)
        q rt
"RTN","SYNFPR2",232,0)
        ;
"RTN","SYNFPR2",233,0)
testall ; run the conditions import on all imported patients
"RTN","SYNFPR2",234,0)
        new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPR2",235,0)
        new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFPR2",236,0)
        n dfn,ien,filter,reslt
"RTN","SYNFPR2",237,0)
        s dfn=0
"RTN","SYNFPR2",238,0)
        f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFPR2",239,0)
        . s ien=$o(@indx@(dfn,""))
"RTN","SYNFPR2",240,0)
        . q:ien=""
"RTN","SYNFPR2",241,0)
        . s filter("dfn")=dfn
"RTN","SYNFPR2",242,0)
        . k reslt
"RTN","SYNFPR2",243,0)
        . d wsIntakeConditions(.filter,,.reslt,ien)
"RTN","SYNFPR2",244,0)
        q
"RTN","SYNFPR2",245,0)
        ;
"RTN","SYNFPR2",246,0)
testone(reslt,doload)   ; run the conditions import on all imported patients
"RTN","SYNFPR2",247,0)
        new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPR2",248,0)
        new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFPR2",249,0)
        n dfn,ien,filter
"RTN","SYNFPR2",250,0)
        n done s done=0
"RTN","SYNFPR2",251,0)
        s dfn=0
"RTN","SYNFPR2",252,0)
        f  s dfn=$o(@indx@(dfn)) q:+dfn=0  q:done   d  ;
"RTN","SYNFPR2",253,0)
        . s ien=$o(@indx@(dfn,""))
"RTN","SYNFPR2",254,0)
        . q:ien=""
"RTN","SYNFPR2",255,0)
        . q:$d(@root@(ien,"load","conditions"))
"RTN","SYNFPR2",256,0)
        . s filter("dfn")=dfn
"RTN","SYNFPR2",257,0)
        . s filter("debug")=1
"RTN","SYNFPR2",258,0)
        . i $g(doload)=1 s filter("load")=1
"RTN","SYNFPR2",259,0)
        . k reslt
"RTN","SYNFPR2",260,0)
        . d wsIntakeConditions(.filter,,.reslt,ien)
"RTN","SYNFPR2",261,0)
        . s done=1
"RTN","SYNFPR2",262,0)
        q
"RTN","SYNFPR2",263,0)
        ;
"RTN","SYNFPRB")
0^10^B109125369
"RTN","SYNFPRB",1,0)
SYNFPRB ;ven/gpl - fhir loader utilities ; 2/20/18 4:11am
"RTN","SYNFPRB",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFPRB",3,0)
 ;
"RTN","SYNFPRB",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFPRB",5,0)
 ;
"RTN","SYNFPRB",6,0)
 q
"RTN","SYNFPRB",7,0)
 ;
"RTN","SYNFPRB",8,0)
importConditions(rtn,ien,args) ; entry point for loading Problems for a patient
"RTN","SYNFPRB",9,0)
 ; calls the intake Conditions web service directly
"RTN","SYNFPRB",10,0)
 ;
"RTN","SYNFPRB",11,0)
 n grtn
"RTN","SYNFPRB",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPRB",13,0)
 d wsIntakeConditions(.args,,.grtn,ien)
"RTN","SYNFPRB",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFPRB",15,0)
 . k @root@(ien,"load","conditions")
"RTN","SYNFPRB",16,0)
 . m @root@(ien,"load","conditions")=grtn("conditions")
"RTN","SYNFPRB",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFPRB",18,0)
 s rtn("conditionsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFPRB",19,0)
 s rtn("conditionsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFPRB",20,0)
 s rtn("conditionsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFPRB",21,0)
 ;b
"RTN","SYNFPRB",22,0)
 ;
"RTN","SYNFPRB",23,0)
 ;
"RTN","SYNFPRB",24,0)
 q
"RTN","SYNFPRB",25,0)
 ;
"RTN","SYNFPRB",26,0)
wsIntakeConditions(args,body,result,ien) ; web service entry (post)
"RTN","SYNFPRB",27,0)
 ; for intake of one or more Conditions. input are fhir resources
"RTN","SYNFPRB",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFPRB",29,0)
 ; args include patientId
"RTN","SYNFPRB",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFPRB",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFPRB",32,0)
 ;i $g(ien)'="" if $$loadStatus("conditions","",ien)=1 d  q  ;
"RTN","SYNFPRB",33,0)
 ;. s result("conditionsStatus","status")="alreadyLoaded"
"RTN","SYNFPRB",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFPRB",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Condition",ien,1)
"RTN","SYNFPRB",36,0)
 e  d  ; 
"RTN","SYNFPRB",37,0)
 . s args("load")=0
"RTN","SYNFPRB",38,0)
 . merge jtmp=BODY
"RTN","SYNFPRB",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFPRB",40,0)
 i '$d(json) q  ;
"RTN","SYNFPRB",41,0)
 m ^gpl("gjson")=json
"RTN","SYNFPRB",42,0)
 ;
"RTN","SYNFPRB",43,0)
 ; determine the patient
"RTN","SYNFPRB",44,0)
 ;
"RTN","SYNFPRB",45,0)
 n dfn,eval
"RTN","SYNFPRB",46,0)
 if $g(ien)'="" d  ;
"RTN","SYNFPRB",47,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFPRB",48,0)
 else  d  ;
"RTN","SYNFPRB",49,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFPRB",50,0)
 . i dfn="" d  ;
"RTN","SYNFPRB",51,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFPRB",52,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFPRB",53,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFPRB",54,0)
 . s result("conditions",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFPRB",55,0)
 ;
"RTN","SYNFPRB",56,0)
 ;
"RTN","SYNFPRB",57,0)
 new zi s zi=0
"RTN","SYNFPRB",58,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFPRB",59,0)
 . ;
"RTN","SYNFPRB",60,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFPRB",61,0)
 . ;
"RTN","SYNFPRB",62,0)
 . new jlog set jlog=$name(eval("conditions",zi))
"RTN","SYNFPRB",63,0)
 . ;
"RTN","SYNFPRB",64,0)
 . ; insure that the resourceType is Observation
"RTN","SYNFPRB",65,0)
 . ;
"RTN","SYNFPRB",66,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFPRB",67,0)
 . if type'="Condition" do  quit  ;
"RTN","SYNFPRB",68,0)
 . . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFPRB",69,0)
 . . do log(jlog,"Resource type not Condition, skipping entry")
"RTN","SYNFPRB",70,0)
 . set eval("conditions",zi,"vars","resourceType")=type
"RTN","SYNFPRB",71,0)
 . ;
"RTN","SYNFPRB",72,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFPRB",73,0)
 . ;
"RTN","SYNFPRB",74,0)
 . if $g(ien)'="" if $$loadStatus("condition",zi,ien)=1 do  quit  ;
"RTN","SYNFPRB",75,0)
 . . d log(jlog,"Condition already loaded, skipping")
"RTN","SYNFPRB",76,0)
 . ;
"RTN","SYNFPRB",77,0)
 . ; determine Condition snomed code, coding system, and display text
"RTN","SYNFPRB",78,0)
 . ;
"RTN","SYNFPRB",79,0)
 . ;
"RTN","SYNFPRB",80,0)
 . ; determine the id of the resource
"RTN","SYNFPRB",81,0)
 . ;
"RTN","SYNFPRB",82,0)
 . ;new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFPRB",83,0)
 . ;set eval("conditions",zi,"vars","id")=id
"RTN","SYNFPRB",84,0)
 . ;d log(jlog,"ID is: "_id)
"RTN","SYNFPRB",85,0)
 . ;
"RTN","SYNFPRB",86,0)
 . new sctcode set sctcode=$get(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFPRB",87,0)
 . do log(jlog,"code is: "_sctcode)
"RTN","SYNFPRB",88,0)
 . set eval("conditions",zi,"vars","code")=sctcode
"RTN","SYNFPRB",89,0)
 . ;
"RTN","SYNFPRB",90,0)
 . ;
"RTN","SYNFPRB",91,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","code","coding",1,"system"))
"RTN","SYNFPRB",92,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFPRB",93,0)
 . set eval("conditions",zi,"vars","codeSystem")=codesystem
"RTN","SYNFPRB",94,0)
 . ;
"RTN","SYNFPRB",95,0)
 . ; determine the onset date and time
"RTN","SYNFPRB",96,0)
 . ;
"RTN","SYNFPRB",97,0)
 . new onsetdate set onsetdate=$get(json("entry",zi,"resource","onsetDateTime"))
"RTN","SYNFPRB",98,0)
 . do log(jlog,"onsetDateTime is: "_onsetdate)
"RTN","SYNFPRB",99,0)
 . set eval("conditions",zi,"vars","onsetDateTime")=onsetdate
"RTN","SYNFPRB",100,0)
 . new fmOnsetDateTime s fmOnsetDateTime=$$fhirTfm^SYNFUTL(onsetdate)
"RTN","SYNFPRB",101,0)
 . d log(jlog,"fileman onsetDateTime is: "_fmOnsetDateTime)
"RTN","SYNFPRB",102,0)
 . set eval("conditions",zi,"vars","fmOnsetDateTime")=fmOnsetDateTime ;
"RTN","SYNFPRB",103,0)
 . new hl7OnsetDateTime s hl7OnsetDateTime=$$fhirThl7^SYNFUTL(onsetdate)
"RTN","SYNFPRB",104,0)
 . d log(jlog,"hl7 onsetDateTime is: "_hl7OnsetDateTime)
"RTN","SYNFPRB",105,0)
 . set eval("conditions",zi,"vars","hl7OnsetDateTime")=hl7OnsetDateTime ;
"RTN","SYNFPRB",106,0)
 . ;
"RTN","SYNFPRB",107,0)
 . ; determine the abatement date and time, if any
"RTN","SYNFPRB",108,0)
 . ;
"RTN","SYNFPRB",109,0)
 . new abatementdate set abatementdate=$get(json("entry",zi,"resource","abatementDateTime"))
"RTN","SYNFPRB",110,0)
 . if abatementdate'="" d  ;
"RTN","SYNFPRB",111,0)
 . . do log(jlog,"abatementDateTime is: "_abatementdate)
"RTN","SYNFPRB",112,0)
 . . set eval("conditions",zi,"vars","abatementDateTime")=abatementdate
"RTN","SYNFPRB",113,0)
 . . new fmAbatementDateTime s fmAbatementDateTime=$$fhirTfm^SYNFUTL(abatementdate)
"RTN","SYNFPRB",114,0)
 . . d log(jlog,"fileman abatementDateTime is: "_fmAbatementDateTime)
"RTN","SYNFPRB",115,0)
 . . set eval("conditions",zi,"vars","fmAbatementDateTime")=fmAbatementDateTime ;
"RTN","SYNFPRB",116,0)
 . . new hl7AbatementDateTime s hl7AbatementDateTime=$$fhirThl7^SYNFUTL(abatementdate)
"RTN","SYNFPRB",117,0)
 . . d log(jlog,"hl7 abatementDateTime is: "_hl7AbatementDateTime)
"RTN","SYNFPRB",118,0)
 . . set eval("conditions",zi,"vars","hl7AbatementDateTime")=hl7AbatementDateTime ;
"RTN","SYNFPRB",119,0)
 . else  d log(jlog,"no abatementDateTime")
"RTN","SYNFPRB",120,0)
 . ;
"RTN","SYNFPRB",121,0)
 . ; determine clinical status (active vs inactive)
"RTN","SYNFPRB",122,0)
 . ;
"RTN","SYNFPRB",123,0)
 . n clinicalstatus set clinicalstatus=$get(json("entry",zi,"resource","clinicalStatus"))
"RTN","SYNFPRB",124,0)
 . i $get(abatementdate)'="" set clinicalstatus="inactive" ; VistA doesn't allow active problems with a resolution date
"RTN","SYNFPRB",125,0)
 . ;
"RTN","SYNFPRB",126,0)
 . ; determine the encounter visit ien
"RTN","SYNFPRB",127,0)
 . n encounterId
"RTN","SYNFPRB",128,0)
 . s encounterId=$g(json("entry",zi,"resource","context","reference"))
"RTN","SYNFPRB",129,0)
 . i encounterId["urn:uuid:" s encounterId=$p(encounterId,"urn:uuid:",2)
"RTN","SYNFPRB",130,0)
 . s eval("conditions",zi,"vars","encounterId")=encounterId
"RTN","SYNFPRB",131,0)
 . d log(jlog,"reference encounter ID is : "_encounterId)
"RTN","SYNFPRB",132,0)
 . ;
"RTN","SYNFPRB",133,0)
 . ; determine visit ien
"RTN","SYNFPRB",134,0)
 . ;
"RTN","SYNFPRB",135,0)
 . n visitIen s visitIen=$$visitIen^SYNFENC(ien,encounterId)
"RTN","SYNFPRB",136,0)
 . s eval("conditions",zi,"vars","visitIen")=visitIen
"RTN","SYNFPRB",137,0)
 . d log(jlog,"visit ien is: "_visitIen)
"RTN","SYNFPRB",138,0)
 . ;
"RTN","SYNFPRB",139,0)
 . ; set up to call the data loader
"RTN","SYNFPRB",140,0)
 . ;
"RTN","SYNFPRB",141,0)
 . ;PRBUPDT(RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)	;Problem/Condition update
"RTN","SYNFPRB",142,0)
 . n RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT ;Problem/Condition update
"RTN","SYNFPRB",143,0)
 . s (DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)=""      ;Condition update
"RTN","SYNFPRB",144,0)
 . ;
"RTN","SYNFPRB",145,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFPRB",146,0)
 . s eval("conditions",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFPRB",147,0)
 . ;
"RTN","SYNFPRB",148,0)
 . s DHPVST=visitIen
"RTN","SYNFPRB",149,0)
 . s eval("conditions",zi,"parms","DHPVST")=visitIen
"RTN","SYNFPRB",150,0)
 . ;
"RTN","SYNFPRB",151,0)
 . s DHPSCT=sctcode
"RTN","SYNFPRB",152,0)
 . s eval("conditions",zi,"parms","DHPSCT")=DHPSCT
"RTN","SYNFPRB",153,0)
 . ;
"RTN","SYNFPRB",154,0)
 . s DHPCLNST=$S(clinicalstatus="Active":"A",1:"I")
"RTN","SYNFPRB",155,0)
 . s eval("conditions",zi,"parms","DHPCLNST")=DHPCLNST
"RTN","SYNFPRB",156,0)
 . ;
"RTN","SYNFPRB",157,0)
 . s DHPONS=hl7OnsetDateTime
"RTN","SYNFPRB",158,0)
 . s eval("conditions",zi,"parms","DHPONS")=DHPONS
"RTN","SYNFPRB",159,0)
 . ;
"RTN","SYNFPRB",160,0)
 . s DHPPROV=$$MAP^SYNQLDM("OP","provider") ; map should return the NPI number
"RTN","SYNFPRB",161,0)
 . ;n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",IMMPROV,""))
"RTN","SYNFPRB",162,0)
 . ;if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFPRB",163,0)
 . s eval("conditions",zi,"parms","DHPPROV")=DHPPROV
"RTN","SYNFPRB",164,0)
 . d log(jlog,"Provider NPI for outpatient is: "_DHPPROV)
"RTN","SYNFPRB",165,0)
 . ;
"RTN","SYNFPRB",166,0)
 . ;s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFPRB",167,0)
 . ;n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFPRB",168,0)
 . ;if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFPRB",169,0)
 . ;s eval("conditions",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFPRB",170,0)
 . ;d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFPRB",171,0)
 . ;
"RTN","SYNFPRB",172,0)
 . s eval("conditions",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFPRB",173,0)
 . ;
"RTN","SYNFPRB",174,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFPRB",175,0)
 . . if $g(ien)'="" if $$loadStatus("conditions",zi,ien)=1 do  quit  ;
"RTN","SYNFPRB",176,0)
 . . . d log(jlog,"Condition already loaded, skipping")
"RTN","SYNFPRB",177,0)
 . . d log(jlog,"Calling PRBUPD^SYNDHP62 to add condition")
"RTN","SYNFPRB",178,0)
 . . D PRBUPDT^SYNDHP62(.RETSTA,DHPPAT,DHPVST,DHPROV,DHPONS,DHPABT,DHPCLNST,DHPSCT)	;Problem/Condition update
"RTN","SYNFPRB",179,0)
 . . m eval("conditions",zi,"status")=RETSTA
"RTN","SYNFPRB",180,0)
 . . d log(jlog,"Return from data loader was: "_$g(RETSTA))
"RTN","SYNFPRB",181,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFPRB",182,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFPRB",183,0)
 . . . s eval("conditions",zi,"status","loadstatus")="loaded"
"RTN","SYNFPRB",184,0)
 . . else  d  ;
"RTN","SYNFPRB",185,0)
 . . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFPRB",186,0)
 . . . s eval("conditions",zi,"status","loadstatus")="notLoaded"
"RTN","SYNFPRB",187,0)
 . . . s eval("conditions",zi,"status","loadMessage")=$g(RETSTA)
"RTN","SYNFPRB",188,0)
 . . n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPRB",189,0)
 . . k @root@(ien,"load","conditions",zi)
"RTN","SYNFPRB",190,0)
 . . m @root@(ien,"load","conditions",zi)=eval("conditions",zi)
"RTN","SYNFPRB",191,0)
 ;
"RTN","SYNFPRB",192,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFPRB",193,0)
 . m jrslt("source")=json
"RTN","SYNFPRB",194,0)
 . m jrslt("args")=args
"RTN","SYNFPRB",195,0)
 . m jrslt("eval")=eval
"RTN","SYNFPRB",196,0)
 m jrslt("conditionsStatus")=eval("conditionsStatus")
"RTN","SYNFPRB",197,0)
 set jrslt("result","status")="ok"
"RTN","SYNFPRB",198,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFPRB",199,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFPRB",200,0)
 . m result=eval
"RTN","SYNFPRB",201,0)
 . m result("status")=jrslt("result")
"RTN","SYNFPRB",202,0)
 . m result("dfn")=dfn
"RTN","SYNFPRB",203,0)
 . m result("ien")=ien
"RTN","SYNFPRB",204,0)
 . ;b
"RTN","SYNFPRB",205,0)
 e  d  ;
"RTN","SYNFPRB",206,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFPRB",207,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFPRB",208,0)
 q
"RTN","SYNFPRB",209,0)
 ;
"RTN","SYNFPRB",210,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFPRB",211,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFPRB",212,0)
 q
"RTN","SYNFPRB",213,0)
 ;
"RTN","SYNFPRB",214,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFPRB",215,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPRB",216,0)
 n rt s rt=0
"RTN","SYNFPRB",217,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFPRB",218,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFPRB",219,0)
 q rt
"RTN","SYNFPRB",220,0)
 ;
"RTN","SYNFPRB",221,0)
testall ; run the conditions import on all imported patients
"RTN","SYNFPRB",222,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPRB",223,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFPRB",224,0)
 n dfn,ien,filter,reslt
"RTN","SYNFPRB",225,0)
 s dfn=0
"RTN","SYNFPRB",226,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFPRB",227,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFPRB",228,0)
 . q:ien=""
"RTN","SYNFPRB",229,0)
 . s filter("dfn")=dfn
"RTN","SYNFPRB",230,0)
 . k reslt
"RTN","SYNFPRB",231,0)
 . d wsIntakeConditions(.filter,,.reslt,ien)
"RTN","SYNFPRB",232,0)
 q
"RTN","SYNFPRB",233,0)
 ;
"RTN","SYNFPRB",234,0)
testone(reslt,doload) ; run the conditions import on all imported patients
"RTN","SYNFPRB",235,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPRB",236,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFPRB",237,0)
 n dfn,ien,filter
"RTN","SYNFPRB",238,0)
 n done s done=0
"RTN","SYNFPRB",239,0)
 s dfn=0
"RTN","SYNFPRB",240,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  q:done   d  ;
"RTN","SYNFPRB",241,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFPRB",242,0)
 . q:ien=""
"RTN","SYNFPRB",243,0)
 . q:$d(@root@(ien,"load","conditions"))
"RTN","SYNFPRB",244,0)
 . s filter("dfn")=dfn
"RTN","SYNFPRB",245,0)
 . s filter("debug")=1
"RTN","SYNFPRB",246,0)
 . i $g(doload)=1 s filter("load")=1
"RTN","SYNFPRB",247,0)
 . k reslt
"RTN","SYNFPRB",248,0)
 . d wsIntakeConditions(.filter,,.reslt,ien)
"RTN","SYNFPRB",249,0)
 . s done=1
"RTN","SYNFPRB",250,0)
 q
"RTN","SYNFPRB",251,0)
 ;
"RTN","SYNFPUL")
0^11^B136655940
"RTN","SYNFPUL",1,0)
SYNFPUL ;ven/gpl - fhir loader utilities ; 2/23/18 5:27am
"RTN","SYNFPUL",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFPUL",3,0)
 ;
"RTN","SYNFPUL",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFPUL",5,0)
 ;
"RTN","SYNFPUL",6,0)
 ;
"RTN","SYNFPUL",7,0)
 ; patient list pull routines
"RTN","SYNFPUL",8,0)
 q
"RTN","SYNFPUL",9,0)
 ;
"RTN","SYNFPUL",10,0)
wsPull(rtn,filter) ; pull web service. assumes url to list is passed as filter("listurl")=url
"RTN","SYNFPUL",11,0)
 ;
"RTN","SYNFPUL",12,0)
 n groot s groot=$$setroot^%wd("patient-lists")
"RTN","SYNFPUL",13,0)
 ;
"RTN","SYNFPUL",14,0)
 n listurl s listurl=$g(filter("listurl"))
"RTN","SYNFPUL",15,0)
 q:listurl=""
"RTN","SYNFPUL",16,0)
 i listurl["synthea1m.vistaplex.org" d  ;
"RTN","SYNFPUL",17,0)
 . s listurl="http://138.197.147.128"_$p(listurl,"synthea1m.vistaplex.org",2)
"RTN","SYNFPUL",18,0)
 ;
"RTN","SYNFPUL",19,0)
 n listname
"RTN","SYNFPUL",20,0)
 s listname=$re($p($re(listurl),"/",1))
"RTN","SYNFPUL",21,0)
 i listname[":" s listname=$p(listname,":",2)
"RTN","SYNFPUL",22,0)
 i listname["?" s listname=$p(listname,"?",1)
"RTN","SYNFPUL",23,0)
 ;
"RTN","SYNFPUL",24,0)
 n ret,json,jtmp
"RTN","SYNFPUL",25,0)
 s ret=$$GETURL^XTHC10(listurl,,"jtmp")
"RTN","SYNFPUL",26,0)
 d assemble("jtmp","json")
"RTN","SYNFPUL",27,0)
 ;s ret=$$%^%WC(.json,"GET",listurl)
"RTN","SYNFPUL",28,0)
 w !,"return is: ",ret,!
"RTN","SYNFPUL",29,0)
 ;zwr json
"RTN","SYNFPUL",30,0)
 ;
"RTN","SYNFPUL",31,0)
 n lien,jary
"RTN","SYNFPUL",32,0)
 s lien=$o(@groot@("B",listname,""))
"RTN","SYNFPUL",33,0)
 i lien'="" k @groot@(lien)
"RTN","SYNFPUL",34,0)
 e  set lien=$order(@groot@(" "),-1)+1
"RTN","SYNFPUL",35,0)
 s @groot@("B",listname,lien)=""
"RTN","SYNFPUL",36,0)
 ;
"RTN","SYNFPUL",37,0)
 set gr=$name(@groot@(lien,"list"))
"RTN","SYNFPUL",38,0)
 do DECODE^VPRJSON("json",gr)
"RTN","SYNFPUL",39,0)
 s @gr@("listname")=listname
"RTN","SYNFPUL",40,0)
 do indexList(lien)
"RTN","SYNFPUL",41,0)
 s rtn("listien")=lien
"RTN","SYNFPUL",42,0)
 ;
"RTN","SYNFPUL",43,0)
 w !
"RTN","SYNFPUL",44,0)
 ;zwr @gr@(*)
"RTN","SYNFPUL",45,0)
 ;
"RTN","SYNFPUL",46,0)
 q
"RTN","SYNFPUL",47,0)
 ;
"RTN","SYNFPUL",48,0)
testpull ;
"RTN","SYNFPUL",49,0)
 s lurl="http://synthea1m.vistaplex.org:9080/see/tag:random-over50-notDead-M-10-2?format=json"
"RTN","SYNFPUL",50,0)
 s filter("listurl")=lurl
"RTN","SYNFPUL",51,0)
 d wsPull(.g,.filter)
"RTN","SYNFPUL",52,0)
 q
"RTN","SYNFPUL",53,0)
 ;
"RTN","SYNFPUL",54,0)
indexList(ien) ; produce the index for a patient list
"RTN","SYNFPUL",55,0)
 ;
"RTN","SYNFPUL",56,0)
 n lroot s lroot=$$setroot^%wd("patient-lists")
"RTN","SYNFPUL",57,0)
 n zi s zi=""
"RTN","SYNFPUL",58,0)
 f  s zi=$o(@lroot@(ien,"list","items",zi)) q:zi=""  d  ;
"RTN","SYNFPUL",59,0)
 . n title s title=$g(@lroot@(ien,"list","items",zi,"title"))
"RTN","SYNFPUL",60,0)
 . s @lroot@(ien,"B",title,zi)=""
"RTN","SYNFPUL",61,0)
 q
"RTN","SYNFPUL",62,0)
 ;
"RTN","SYNFPUL",63,0)
wsLol(rtn,filter) ; list of list web service
"RTN","SYNFPUL",64,0)
 ;
"RTN","SYNFPUL",65,0)
 n groot s groot=$$setroot^%wd("list-of-lists")
"RTN","SYNFPUL",66,0)
 ;
"RTN","SYNFPUL",67,0)
 n listurl s listurl="http://synthea1m.vistaplex.org:9080/see/rand*?format=json"
"RTN","SYNFPUL",68,0)
 ;n listurl s listurl="http://138.197.147.128:9080/see/rand*?format=json"
"RTN","SYNFPUL",69,0)
 ;
"RTN","SYNFPUL",70,0)
 n listname
"RTN","SYNFPUL",71,0)
 s listname=listurl
"RTN","SYNFPUL",72,0)
 ;s listname=$re($p($re(listurl),"/",1))
"RTN","SYNFPUL",73,0)
 ;i listname[":" s listname=$p(listname,":",2)
"RTN","SYNFPUL",74,0)
 i listname["?" s listname=$p(listname,"?",1)
"RTN","SYNFPUL",75,0)
 ;
"RTN","SYNFPUL",76,0)
 n zret,json,jtmp
"RTN","SYNFPUL",77,0)
 ;s zret=$$GETURL^XTHC10(listurl,,"jtmp")
"RTN","SYNFPUL",78,0)
 ;d assemble("jtmp","json")
"RTN","SYNFPUL",79,0)
 s zret=$$%^%WC(.json,"GET",listurl)
"RTN","SYNFPUL",80,0)
 ;w !,"return is: ",zret,!
"RTN","SYNFPUL",81,0)
 ;zwr json
"RTN","SYNFPUL",82,0)
 ;
"RTN","SYNFPUL",83,0)
 n lien,jary
"RTN","SYNFPUL",84,0)
 s lien=$o(@groot@("B",listname,""))
"RTN","SYNFPUL",85,0)
 i lien'="" k @groot@(lien)
"RTN","SYNFPUL",86,0)
 e  set lien=$order(@groot@(" "),-1)+1
"RTN","SYNFPUL",87,0)
 s @groot@("B",listname,lien)=""
"RTN","SYNFPUL",88,0)
 ;
"RTN","SYNFPUL",89,0)
 set gr=$name(@groot@(lien,"list"))
"RTN","SYNFPUL",90,0)
 do DECODE^VPRJSON("json",gr)
"RTN","SYNFPUL",91,0)
 s @gr@("listname")=listname
"RTN","SYNFPUL",92,0)
 do indexLol(lien)
"RTN","SYNFPUL",93,0)
 k @gr@("listname")
"RTN","SYNFPUL",94,0)
 ;
"RTN","SYNFPUL",95,0)
 s rtn=$na(^TMP("SYNFHIR",$J))
"RTN","SYNFPUL",96,0)
 k @rtn
"RTN","SYNFPUL",97,0)
 n jout m jout=@gr
"RTN","SYNFPUL",98,0)
 k jout("listname")
"RTN","SYNFPUL",99,0)
 ;m @rtn=json
"RTN","SYNFPUL",100,0)
 d ENCODE^VPRJSON("jout",rtn)
"RTN","SYNFPUL",101,0)
 set HTTPRSP("mime")="application/json"
"RTN","SYNFPUL",102,0)
 q
"RTN","SYNFPUL",103,0)
 ;
"RTN","SYNFPUL",104,0)
wsLol2(rtn,filter) ; list of list web service
"RTN","SYNFPUL",105,0)
 ;
"RTN","SYNFPUL",106,0)
 n groot s groot=$$setroot^%wd("list-of-lists")
"RTN","SYNFPUL",107,0)
 ;
"RTN","SYNFPUL",108,0)
 ;n listurl s listurl="http://synthea1m.vistaplex.org:9080/see/rand*?format=json"
"RTN","SYNFPUL",109,0)
 n listurl s listurl="http://138.197.147.128:9080/see/rand*?format=json"
"RTN","SYNFPUL",110,0)
 ;
"RTN","SYNFPUL",111,0)
 n listname
"RTN","SYNFPUL",112,0)
 s listname=listurl
"RTN","SYNFPUL",113,0)
 ;s listname=$re($p($re(listurl),"/",1))
"RTN","SYNFPUL",114,0)
 ;i listname[":" s listname=$p(listname,":",2)
"RTN","SYNFPUL",115,0)
 i listname["?" s listname=$p(listname,"?",1)
"RTN","SYNFPUL",116,0)
 ;
"RTN","SYNFPUL",117,0)
 n zret,json,jtmp
"RTN","SYNFPUL",118,0)
 ;s zret=$$GETURL^XTHC10(listurl,,"jtmp")
"RTN","SYNFPUL",119,0)
 ;d assemble("jtmp","json")
"RTN","SYNFPUL",120,0)
 s zret=$$%^%WC(.json,"GET",listurl)
"RTN","SYNFPUL",121,0)
 ;w !,"return is: ",zret,!
"RTN","SYNFPUL",122,0)
 ;zwr json
"RTN","SYNFPUL",123,0)
 ;
"RTN","SYNFPUL",124,0)
 ;n lien,jary
"RTN","SYNFPUL",125,0)
 ;s lien=$o(@groot@("B",listname,""))
"RTN","SYNFPUL",126,0)
 ;i lien'="" k @groot@(lien)
"RTN","SYNFPUL",127,0)
 ;e  set lien=$order(@groot@(" "),-1)+1
"RTN","SYNFPUL",128,0)
 ;s @groot@("B",listname,lien)=""
"RTN","SYNFPUL",129,0)
 ;
"RTN","SYNFPUL",130,0)
 ;set gr=$name(@groot@(lien,"list"))
"RTN","SYNFPUL",131,0)
 ;do DECODE^VPRJSON("json",gr)
"RTN","SYNFPUL",132,0)
 ;s @gr@("listname")=listname
"RTN","SYNFPUL",133,0)
 ;do indexLol(lien)
"RTN","SYNFPUL",134,0)
 ;k @gr@("listname")
"RTN","SYNFPUL",135,0)
 ;
"RTN","SYNFPUL",136,0)
 s rtn=$na(^TMP("SYNFHIR",$J))
"RTN","SYNFPUL",137,0)
 k @rtn
"RTN","SYNFPUL",138,0)
 ;n jout m jout=@gr
"RTN","SYNFPUL",139,0)
 ;k jout("listname")
"RTN","SYNFPUL",140,0)
 m @rtn=json
"RTN","SYNFPUL",141,0)
 ;d ENCODE^VPRJSON("jout",rtn)
"RTN","SYNFPUL",142,0)
 set HTTPRSP("mime")="application/json"
"RTN","SYNFPUL",143,0)
 q
"RTN","SYNFPUL",144,0)
 ;
"RTN","SYNFPUL",145,0)
indexLol(ien) ;
"RTN","SYNFPUL",146,0)
 ;
"RTN","SYNFPUL",147,0)
 n lroot s lroot=$$setroot^%wd("list-of-lists")
"RTN","SYNFPUL",148,0)
 n zi s zi=""
"RTN","SYNFPUL",149,0)
 f  s zi=$o(@lroot@(ien,"list","items",zi)) q:zi=""  d  ;
"RTN","SYNFPUL",150,0)
 . n title s title=$g(@lroot@(ien,"list","items",zi,"title"))
"RTN","SYNFPUL",151,0)
 . s @lroot@(ien,"B",title,zi)=""
"RTN","SYNFPUL",152,0)
 q
"RTN","SYNFPUL",153,0)
 ;
"RTN","SYNFPUL",154,0)
getlol ; get list of lists
"RTN","SYNFPUL",155,0)
 ;
"RTN","SYNFPUL",156,0)
 n groot s groot=$$setroot^%wd("list-of-lists")
"RTN","SYNFPUL",157,0)
 ;
"RTN","SYNFPUL",158,0)
 n listurl 
"RTN","SYNFPUL",159,0)
 ;s listurl="http://synthea1m.vistaplex.org:9080/see/dhp-vista*?format=json"
"RTN","SYNFPUL",160,0)
 s listurl="http://138.197.147.128:9080/see/dhp-vista*?format=json"
"RTN","SYNFPUL",161,0)
 ;
"RTN","SYNFPUL",162,0)
 n listname
"RTN","SYNFPUL",163,0)
 s listname=listurl
"RTN","SYNFPUL",164,0)
 i listname["?" s listname=$p(listname,"?",1)
"RTN","SYNFPUL",165,0)
 ;
"RTN","SYNFPUL",166,0)
 q:$d(@groot@("B",listname)) ; list already loaded
"RTN","SYNFPUL",167,0)
 ;
"RTN","SYNFPUL",168,0)
 n zret,json,jtmp
"RTN","SYNFPUL",169,0)
 ;s zret=$$%^%WC(.json,"GET",listurl)
"RTN","SYNFPUL",170,0)
 s zret=$$GETURL^XTHC10(listurl,,"jtmp")
"RTN","SYNFPUL",171,0)
 d assemble("jtmp","json")
"RTN","SYNFPUL",172,0)
 w !,"return is: ",zret,!
"RTN","SYNFPUL",173,0)
 ;zwr json
"RTN","SYNFPUL",174,0)
 ;
"RTN","SYNFPUL",175,0)
 n lien,jary
"RTN","SYNFPUL",176,0)
 s lien=$o(@groot@("B",listname,""))
"RTN","SYNFPUL",177,0)
 i lien'="" k @groot@(lien)
"RTN","SYNFPUL",178,0)
 e  set lien=$order(@groot@(" "),-1)+1
"RTN","SYNFPUL",179,0)
 s @groot@("B",listname,lien)=""
"RTN","SYNFPUL",180,0)
 ;
"RTN","SYNFPUL",181,0)
 set gr=$name(@groot@(lien,"list"))
"RTN","SYNFPUL",182,0)
 do DECODE^VPRJSON("json",gr)
"RTN","SYNFPUL",183,0)
 s @gr@("listname")=listname
"RTN","SYNFPUL",184,0)
 do indexLol(lien)
"RTN","SYNFPUL",185,0)
 ;
"RTN","SYNFPUL",186,0)
 q
"RTN","SYNFPUL",187,0)
 ;
"RTN","SYNFPUL",188,0)
assemble(in,out) ; reassemble json from the pieces
"RTN","SYNFPUL",189,0)
 n zi,zj
"RTN","SYNFPUL",190,0)
 s @out=""
"RTN","SYNFPUL",191,0)
 s zi=0
"RTN","SYNFPUL",192,0)
 f  s zi=$o(@in@(zi)) q:+zi=0  d  ;
"RTN","SYNFPUL",193,0)
 . s @out=@out_@in@(zi)
"RTN","SYNFPUL",194,0)
 . s zj=0
"RTN","SYNFPUL",195,0)
 . f  s zj=$o(@in@(zi,zj)) q:+zj=0  d  ;
"RTN","SYNFPUL",196,0)
 . . s @out=@out_$g(@in@(zi,zj))
"RTN","SYNFPUL",197,0)
 q
"RTN","SYNFPUL",198,0)
 ;
"RTN","SYNFPUL",199,0)
load1list(zlist) ;
"RTN","SYNFPUL",200,0)
 n lroot s lroot=$$setroot^%wd("patient-lists")
"RTN","SYNFPUL",201,0)
 n lolroot s lolroot=$$setroot^%wd("list-of-lists")
"RTN","SYNFPUL",202,0)
 n uselist 
"RTN","SYNFPUL",203,0)
 ;s uselist="http://synthea1m.vistaplex.org:9080/see/dhp-vista*"
"RTN","SYNFPUL",204,0)
 s uselist="http://138.197.147.128:9080/see/dhp-vista*"
"RTN","SYNFPUL",205,0)
 n lolien s lolien=$o(@lolroot@("B",uselist,"")) ; ien of the list of lists
"RTN","SYNFPUL",206,0)
 ;
"RTN","SYNFPUL",207,0)
 n uselist2 s uselist2=zlist
"RTN","SYNFPUL",208,0)
 n zl
"RTN","SYNFPUL",209,0)
 s zl=$o(@lolroot@(lolien,"B",uselist2,""))
"RTN","SYNFPUL",210,0)
 i zl="" d  q  ;
"RTN","SYNFPUL",211,0)
 . w !,"Error, list not found: "_uselist2
"RTN","SYNFPUL",212,0)
 ;
"RTN","SYNFPUL",213,0)
 n ltitle s ltitle=$g(@lolroot@(lolien,"list","items",zl,"title"))
"RTN","SYNFPUL",214,0)
 n lurl s lurl=$g(@lolroot@(lolien,"list","items",zl,"url"))
"RTN","SYNFPUL",215,0)
 ;
"RTN","SYNFPUL",216,0)
 i lurl="" d  q  ;
"RTN","SYNFPUL",217,0)
 . w !,"error list url not found"
"RTN","SYNFPUL",218,0)
 ;
"RTN","SYNFPUL",219,0)
 n lien
"RTN","SYNFPUL",220,0)
 s lien=$o(@lroot@("B",ltitle,""))
"RTN","SYNFPUL",221,0)
 i lien'="" d  q lien  ;
"RTN","SYNFPUL",222,0)
 . w !,"list already loaded: "_ltitle_" ien: "_lien
"RTN","SYNFPUL",223,0)
 ;
"RTN","SYNFPUL",224,0)
 w !,"title: ",ltitle
"RTN","SYNFPUL",225,0)
 w !,"url: ",lurl
"RTN","SYNFPUL",226,0)
 ;
"RTN","SYNFPUL",227,0)
 n filter s filter("listurl")=lurl
"RTN","SYNFPUL",228,0)
 n lret
"RTN","SYNFPUL",229,0)
 d wsPull(.lret,.filter)
"RTN","SYNFPUL",230,0)
 ;
"RTN","SYNFPUL",231,0)
 s lien=$g(lret("listien"))
"RTN","SYNFPUL",232,0)
 i lien="" d  q  ;
"RTN","SYNFPUL",233,0)
 . w !,"error, list ien not returned"
"RTN","SYNFPUL",234,0)
 ;
"RTN","SYNFPUL",235,0)
 q lien
"RTN","SYNFPUL",236,0)
 ;  
"RTN","SYNFPUL",237,0)
test1pat(rtn,start,end) ;
"RTN","SYNFPUL",238,0)
 k rtn
"RTN","SYNFPUL",239,0)
 n lroot s lroot=$$setroot^%wd("patient-lists")
"RTN","SYNFPUL",240,0)
 n uselist s uselist="dhp-vista-1000-1"
"RTN","SYNFPUL",241,0)
 n listien s listien=$o(@lroot@("B",uselist,""))
"RTN","SYNFPUL",242,0)
 q:listien=""
"RTN","SYNFPUL",243,0)
 n listroot s listroot=$na(@lroot@(listien,"list","items"))
"RTN","SYNFPUL",244,0)
 n pid,purl
"RTN","SYNFPUL",245,0)
 i $g(start)="" s start=1
"RTN","SYNFPUL",246,0)
 i $g(end)="" s end=start
"RTN","SYNFPUL",247,0)
 n num
"RTN","SYNFPUL",248,0)
 f num=start:1:end d  
"RTN","SYNFPUL",249,0)
 . s pid=$g(@listroot@(num,"title"))
"RTN","SYNFPUL",250,0)
 . s purl=$g(@listroot@(num,"url"))
"RTN","SYNFPUL",251,0)
 . n filter
"RTN","SYNFPUL",252,0)
 . s filter("id")=pid
"RTN","SYNFPUL",253,0)
 . s filter("url")=purl
"RTN","SYNFPUL",254,0)
 . q:purl=""
"RTN","SYNFPUL",255,0)
 . d wsLoadPat(.rtn,.filter)
"RTN","SYNFPUL",256,0)
 q
"RTN","SYNFPUL",257,0)
 ;
"RTN","SYNFPUL",258,0)
loadpats(rtn,listien) ;
"RTN","SYNFPUL",259,0)
 k rtn
"RTN","SYNFPUL",260,0)
 n lroot s lroot=$$setroot^%wd("patient-lists")
"RTN","SYNFPUL",261,0)
 n froot s froot=$$setroot^%wd("fhir-intake")
"RTN","SYNFPUL",262,0)
 q:listien=""
"RTN","SYNFPUL",263,0)
 n listroot s listroot=$na(@lroot@(listien,"list","items"))
"RTN","SYNFPUL",264,0)
 n pid,purl
"RTN","SYNFPUL",265,0)
 n num s num=0
"RTN","SYNFPUL",266,0)
 f  s num=$o(@listroot@(num)) q:+num=0  d  ;
"RTN","SYNFPUL",267,0)
 . s pid=$g(@listroot@(num,"title"))
"RTN","SYNFPUL",268,0)
 . s purl=$g(@listroot@(num,"url"))
"RTN","SYNFPUL",269,0)
 . n filter
"RTN","SYNFPUL",270,0)
 . s filter("id")=pid
"RTN","SYNFPUL",271,0)
 . s filter("url")=purl
"RTN","SYNFPUL",272,0)
 . q:purl=""
"RTN","SYNFPUL",273,0)
 . i $d(@froot@("B",pid)) d  q  ; already loaded
"RTN","SYNFPUL",274,0)
 . . w !,"patient already loaded: "_pid
"RTN","SYNFPUL",275,0)
 . w !,"loading patient "_pid
"RTN","SYNFPUL",276,0)
 . d wsLoadPat(.rtn,.filter)
"RTN","SYNFPUL",277,0)
 q
"RTN","SYNFPUL",278,0)
 ;
"RTN","SYNFPUL",279,0)
wsLoadPat(zrtn,zfilter) ; load one patient from a URL
"RTN","SYNFPUL",280,0)
 ; zfilter("url")=patienturl
"RTN","SYNFPUL",281,0)
 ; zfilter("id")=patientID
"RTN","SYNFPUL",282,0)
 ; returns same as wsPostFHIR^SYNFHIR
"RTN","SYNFPUL",283,0)
 ;
"RTN","SYNFPUL",284,0)
 s U="^"
"RTN","SYNFPUL",285,0)
 ;
"RTN","SYNFPUL",286,0)
 n ret,json,purl
"RTN","SYNFPUL",287,0)
 s purl=$g(zfilter("url"))
"RTN","SYNFPUL",288,0)
 q:purl=""
"RTN","SYNFPUL",289,0)
 i purl["synthea1m.vistaplex.org" d  ;
"RTN","SYNFPUL",290,0)
 . s purl="http://138.197.147.128"_$p(purl,"synthea1m.vistaplex.org",2)
"RTN","SYNFPUL",291,0)
 ;
"RTN","SYNFPUL",292,0)
 ;s ret=$$%^%WC(.json,"GET",purl)
"RTN","SYNFPUL",293,0)
 n jtmp
"RTN","SYNFPUL",294,0)
 s ret=$$GETURL^XTHC10(purl,,"jtmp")
"RTN","SYNFPUL",295,0)
 d assemble("jtmp","json")
"RTN","SYNFPUL",296,0)
 i +ret=-1 d  b
"RTN","SYNFPUL",297,0)
 . w !,ret," ",purl
"RTN","SYNFPUL",298,0)
 ;
"RTN","SYNFPUL",299,0)
 ;
"RTN","SYNFPUL",300,0)
 new ien,root,gr,id,return
"RTN","SYNFPUL",301,0)
 set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFPUL",302,0)
 set id=$get(zfilter("id"))
"RTN","SYNFPUL",303,0)
 ;
"RTN","SYNFPUL",304,0)
 set ien=$order(@root@(" "),-1)+1
"RTN","SYNFPUL",305,0)
 set gr=$name(@root@(ien,"json"))
"RTN","SYNFPUL",306,0)
 do DECODE^VPRJSON("json",gr)
"RTN","SYNFPUL",307,0)
 do indexFhir^SYNFHIR(ien)
"RTN","SYNFPUL",308,0)
 W:ien#500=0 !,"Patient # "_ien_" "_$$FMTE^XLFDT($$NOW^XLFDT)
"RTN","SYNFPUL",309,0)
 ;
"RTN","SYNFPUL",310,0)
 if id'="" do  ;
"RTN","SYNFPUL",311,0)
 . set @root@("B",id,ien)=""
"RTN","SYNFPUL",312,0)
 else  do  ;
"RTN","SYNFPUL",313,0)
 . ;
"RTN","SYNFPUL",314,0)
 ;
"RTN","SYNFPUL",315,0)
 if $get(ARGS("returngraph"))=1 do  ;
"RTN","SYNFPUL",316,0)
 . merge return("graph")=@root@(ien,"graph")
"RTN","SYNFPUL",317,0)
 set return("status")="ok"
"RTN","SYNFPUL",318,0)
 set return("id")=id
"RTN","SYNFPUL",319,0)
 set return("ien")=ien
"RTN","SYNFPUL",320,0)
 ;
"RTN","SYNFPUL",321,0)
 do importPatient^SYNFPAT(.return,ien)
"RTN","SYNFPUL",322,0)
 ;
"RTN","SYNFPUL",323,0)
 new rdfn set rdfn=$get(return("dfn"))
"RTN","SYNFPUL",324,0)
 if rdfn'="" set @root@("DFN",rdfn,ien)=""
"RTN","SYNFPUL",325,0)
 ;
"RTN","SYNFPUL",326,0)
 if rdfn'="" do  ; patient creation was successful
"RTN","SYNFPUL",327,0)
 . if $g(ARGS("load"))="" s ARGS("load")=1
"RTN","SYNFPUL",328,0)
 . do importVitals^SYNFVIT(.return,ien,.ARGS)
"RTN","SYNFPUL",329,0)
 . ;do importEncounters^SYNFENC(.return,ien,.ARGS)
"RTN","SYNFPUL",330,0)
 . ;do importImmu^SYNFIMM(.return,ien,.ARGS)
"RTN","SYNFPUL",331,0)
 ;
"RTN","SYNFPUL",332,0)
 ;do ENCODE^VPRJSON("return","RESULT")
"RTN","SYNFPUL",333,0)
 ;do ENCODE^VPRJSON("return","zrtn")
"RTN","SYNFPUL",334,0)
 set HTTPRSP("mime")="application/json"
"RTN","SYNFPUL",335,0)
 ;
"RTN","SYNFPUL",336,0)
 quit
"RTN","SYNFPUL",337,0)
 ;
"RTN","SYNFPUL",338,0)
TEST1K ; test loading first 1000 patients in the lists
"RTN","SYNFPUL",339,0)
 d getlol ; get the list of lists 
"RTN","SYNFPUL",340,0)
 n lstien ; ien in patient-lists that we will process
"RTN","SYNFPUL",341,0)
 n lname s lname="dhp-vista-1000-1" ; name of the first list
"RTN","SYNFPUL",342,0)
 s lstien=$$load1list(lname) ; load the first list and return the ien
"RTN","SYNFPUL",343,0)
 d loadpats(.return,lstien) ; load the patients from the first list
"RTN","SYNFPUL",344,0)
 q
"RTN","SYNFPUL",345,0)
 ;
"RTN","SYNFPUL",346,0)
LOADALL ; load all 50000 patients
"RTN","SYNFPUL",347,0)
 d getlol ; get the list of lists 
"RTN","SYNFPUL",348,0)
 n lstien ; ien in patient-lists that we will process
"RTN","SYNFPUL",349,0)
 n tlname s tlname="dhp-vista-1000-" ; template for the list names
"RTN","SYNFPUL",350,0)
 n ii
"RTN","SYNFPUL",351,0)
 f ii=1:1:50 d  ; for all 50 lists
"RTN","SYNFPUL",352,0)
 . s lname=tlname_ii ; name of the list
"RTN","SYNFPUL",353,0)
 . s lstien=$$load1list(lname) ; load the list and return the ien
"RTN","SYNFPUL",354,0)
 . d loadpats(.return,lstien) ; load the patients from the list
"RTN","SYNFPUL",355,0)
 q
"RTN","SYNFPUL",356,0)
 ;
"RTN","SYNFPUL",357,0)
CLEANGRAPH ;
"RTN","SYNFPUL",358,0)
 ;
"RTN","SYNFPUL",359,0)
 n groot s groot=$$setroot^%wd("fhir-intake")
"RTN","SYNFPUL",360,0)
 n zi,zj,zk
"RTN","SYNFPUL",361,0)
 s (zi,zj,zk)=""
"RTN","SYNFPUL",362,0)
 f  s zi=$o(@groot@("B",zi)) q:zi=""  d  ;
"RTN","SYNFPUL",363,0)
 . s zj=$o(@groot@("B",zi,""))
"RTN","SYNFPUL",364,0)
 . s zk=$o(@groot@("B",zi,zj))
"RTN","SYNFPUL",365,0)
 . i zk'="" d  ; a duplicate
"RTN","SYNFPUL",366,0)
 . . i $$ien2dfn^SYNFUTL(zk)'="" q  ; has a VistA record
"RTN","SYNFPUL",367,0)
 . . w !,"removing ien: "_zk_" name: "_zi
"RTN","SYNFPUL",368,0)
 . . k @groot@(zk) ; clear the graph
"RTN","SYNFPUL",369,0)
 . . k @groot@("B",zi,zk) ; remove from the index
"RTN","SYNFPUL",370,0)
 q
"RTN","SYNFPUL",371,0)
 ;
"RTN","SYNFUTL")
0^12^B26727967
"RTN","SYNFUTL",1,0)
SYNFUTL ;ven/gpl - fhir loader utilities ; 10/19/17 4:33pm
"RTN","SYNFUTL",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFUTL",3,0)
 ;
"RTN","SYNFUTL",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFUTL",5,0)
 ;
"RTN","SYNFUTL",6,0)
 q
"RTN","SYNFUTL",7,0)
 ;
"RTN","SYNFUTL",8,0)
initPLD(ien,element) ; initializes the PLD pointers in the fhir graph
"RTN","SYNFUTL",9,0)
 new root set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",10,0)
 set @root@(ien,"load",element,"PLD","parms")=$name(@root@(ien,"load",element,"parms"))
"RTN","SYNFUTL",11,0)
 set @root@(ien,"load",element,"PLD","log")=$name(@root@(ien,"load",element,"log"))
"RTN","SYNFUTL",12,0)
 set @root@(ien,"load",element,"PLD","verify")=$name(@root@(ien,"load",element,"verify"))
"RTN","SYNFUTL",13,0)
 set @root@(ien,"load",element,"PLD","status")=$name(@root@(ien,"load",element,"status"))
"RTN","SYNFUTL",14,0)
 set @root@(ien,"load",element,"PLD","index")=root
"RTN","SYNFUTL",15,0)
 quit
"RTN","SYNFUTL",16,0)
 ;
"RTN","SYNFUTL",17,0)
setPLD(ien,element) ; extrinsic which returns the global name containing the PLD for this element
"RTN","SYNFUTL",18,0)
 new root set root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",19,0)
 if '$data(@root@(ien,"load",element,"PLD")) do initPLD(ien,element)
"RTN","SYNFUTL",20,0)
 quit $name(@root@(ien,"load","Patient","PLD"))
"RTN","SYNFUTL",21,0)
 ;
"RTN","SYNFUTL",22,0)
log(txt) ; logs a line to the log array defined by PLD("log")
"RTN","SYNFUTL",23,0)
 if '$data(PLD("log")) do  quit  ;
"RTN","SYNFUTL",24,0)
 . w !,"Error log array not defined ",txt
"RTN","SYNFUTL",25,0)
 do addto(PLD("log"),txt)
"RTN","SYNFUTL",26,0)
 quit
"RTN","SYNFUTL",27,0)
 ;
"RTN","SYNFUTL",28,0)
addto(dest,string) ; add string to list dest
"RTN","SYNFUTL",29,0)
 ; dest is passed by name
"RTN","SYNFUTL",30,0)
 new %ii
"RTN","SYNFUTL",31,0)
 set %ii=$order(@dest@("AAAAA"),-1)+1
"RTN","SYNFUTL",32,0)
 set @dest@(%ii)=string
"RTN","SYNFUTL",33,0)
 set @dest@(0)=%ii ; count
"RTN","SYNFUTL",34,0)
 quit
"RTN","SYNFUTL",35,0)
 ;
"RTN","SYNFUTL",36,0)
addArray(dest,array) ; add array to list dest
"RTN","SYNFUTL",37,0)
 ; dest and array are passed by name
"RTN","SYNFUTL",38,0)
 new %ii
"RTN","SYNFUTL",39,0)
 set %ii=$order(@dest@("AAAAA"),-1)+1
"RTN","SYNFUTL",40,0)
 new %ij set %ij=0
"RTN","SYNFUTL",41,0)
 for  set %ij=$order(@array@(%ij)) quit:'%ij  do  ;
"RTN","SYNFUTL",42,0)
 . set @dest@(%ii)=$get(@array@(%ij))
"RTN","SYNFUTL",43,0)
 . set @dest@(0)=%ii ; count
"RTN","SYNFUTL",44,0)
 . set %ii=%ii+1
"RTN","SYNFUTL",45,0)
 quit
"RTN","SYNFUTL",46,0)
 ;
"RTN","SYNFUTL",47,0)
setIndex(sub,pred,obj) ; set the graph indexices
"RTN","SYNFUTL",48,0)
 n gn s gn=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",49,0)
 q:sub=""
"RTN","SYNFUTL",50,0)
 q:pred=""
"RTN","SYNFUTL",51,0)
 q:obj=""
"RTN","SYNFUTL",52,0)
 s @gn@("SPO",sub,pred,obj)=""
"RTN","SYNFUTL",53,0)
 s @gn@("POS",pred,obj,sub)=""
"RTN","SYNFUTL",54,0)
 s @gn@("PSO",pred,sub,obj)=""
"RTN","SYNFUTL",55,0)
 s @gn@("OPS",obj,pred,sub)=""
"RTN","SYNFUTL",56,0)
 q
"RTN","SYNFUTL",57,0)
 ;
"RTN","SYNFUTL",58,0)
clearIndexes ; do this carefully
"RTN","SYNFUTL",59,0)
 n gn s gn=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",60,0)
 k @gn@("SPO")
"RTN","SYNFUTL",61,0)
 k @gn@("POS")
"RTN","SYNFUTL",62,0)
 k @gn@("PSO")
"RTN","SYNFUTL",63,0)
 k @gn@("OPS")
"RTN","SYNFUTL",64,0)
 q
"RTN","SYNFUTL",65,0)
 ; 
"RTN","SYNFUTL",66,0)
fhirTfm(dtin) ; extrinsic which returns the fileman dateTime 
"RTN","SYNFUTL",67,0)
 ; for the FHIR format input ie 2017-04-28T01:28:28-04:00
"RTN","SYNFUTL",68,0)
 n tdt
"RTN","SYNFUTL",69,0)
 s tdt=$tr(dtin,":")
"RTN","SYNFUTL",70,0)
 s tdt=$tr(tdt,"T")
"RTN","SYNFUTL",71,0)
 s tdt=$e(tdt,1,4)_$e(tdt,6,7)_$e(tdt,9,21)
"RTN","SYNFUTL",72,0)
 q $$HL7TFM^XLFDT(tdt)
"RTN","SYNFUTL",73,0)
 ;
"RTN","SYNFUTL",74,0)
fhirThl7(dtin) ; extrinsic which returns the HL7 dateTime 
"RTN","SYNFUTL",75,0)
 ; for the FHIR format input ie 2017-04-28T01:28:28-04:00
"RTN","SYNFUTL",76,0)
 ; example hl7 returned: 20170428012828-0400
"RTN","SYNFUTL",77,0)
 n tdt
"RTN","SYNFUTL",78,0)
 s tdt=$tr(dtin,":")
"RTN","SYNFUTL",79,0)
 s tdt=$tr(tdt,"T")
"RTN","SYNFUTL",80,0)
 s tdt=$e(tdt,1,4)_$e(tdt,6,7)_$e(tdt,9,21)
"RTN","SYNFUTL",81,0)
 q tdt
"RTN","SYNFUTL",82,0)
 ;
"RTN","SYNFUTL",83,0)
ien2dfn(ien) ; extrinsic returns the patient DFN given the graph ien
"RTN","SYNFUTL",84,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",85,0)
 q $o(@root@("PSO","DFN",ien,""))
"RTN","SYNFUTL",86,0)
 ;
"RTN","SYNFUTL",87,0)
dfn2ien(dfn) ; extrinsic returns the graph ien given the DFN
"RTN","SYNFUTL",88,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",89,0)
 q $o(@root@("POS","DFN",dfn,""))
"RTN","SYNFUTL",90,0)
 ;
"RTN","SYNFUTL",91,0)
ien2icn(ien) ; extrinsic returns the patient ICN given the graph ien
"RTN","SYNFUTL",92,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",93,0)
 q $o(@root@("PSO","ICN",ien,""))
"RTN","SYNFUTL",94,0)
 ;
"RTN","SYNFUTL",95,0)
icn2ien(icn) ; extrinsic returns the graph ien given the DFN
"RTN","SYNFUTL",96,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFUTL",97,0)
 q $o(@root@("POS","ICN",icn,""))
"RTN","SYNFUTL",98,0)
 ;
"RTN","SYNFUTL",99,0)
dfn2icn(dfn) ; extrinsic returns the ICN given the patient DFN
"RTN","SYNFUTL",100,0)
 n ien s ien=$$dfn2ien(dfn)
"RTN","SYNFUTL",101,0)
 q $$ien2icn(ien)
"RTN","SYNFUTL",102,0)
 ;
"RTN","SYNFUTL",103,0)
icn2dfn(icn) ; extrinsic returns the DFN given the patient ICN
"RTN","SYNFUTL",104,0)
 n ien s ien=$$icn2ien(icn)
"RTN","SYNFUTL",105,0)
 q $$ien2dfn(ien)
"RTN","SYNFUTL",106,0)
 ;
"RTN","SYNFUTL",107,0)
urlEnd(zurl) ; extrinsic which return the last part of a url 
"RTN","SYNFUTL",108,0)
 ; (the part after the final /
"RTN","SYNFUTL",109,0)
 q $re($p($re(zurl),"/",1))
"RTN","SYNFUTL",110,0)
 ;
"RTN","SYNFUTL",111,0)
testValueDex() ; 
"RTN","SYNFUTL",112,0)
 ;new fhir
"RTN","SYNFUTL",113,0)
 do getIntakeFhir^SYNFHIR("testfhir",,"Patient",1)
"RTN","SYNFUTL",114,0)
 do valueDex("testfhir","value")
"RTN","SYNFUTL",115,0)
 ;zwrite fhir
"RTN","SYNFUTL",116,0)
 quit
"RTN","SYNFUTL",117,0)
 ;
"RTN","SYNFUTL",118,0)
valueDex(ary,indx) ; creates index indx of values of the array
"RTN","SYNFUTL",119,0)
 ;
"RTN","SYNFUTL",120,0)
 new ind
"RTN","SYNFUTL",121,0)
 new fi s fi=$query(@ary@(""))
"RTN","SYNFUTL",122,0)
 ;new fi s fi=""
"RTN","SYNFUTL",123,0)
 set ind(indx,@fi)=fi
"RTN","SYNFUTL",124,0)
 for  set fi=$query(@fi) quit:fi=""  do  ;
"RTN","SYNFUTL",125,0)
 . ;w !,@fi," ",fi
"RTN","SYNFUTL",126,0)
 . if @fi="" quit
"RTN","SYNFUTL",127,0)
 . set ind(indx,@fi)=fi
"RTN","SYNFUTL",128,0)
 . ;write !,fi," ",@fi
"RTN","SYNFUTL",129,0)
 ;zwrite ind
"RTN","SYNFUTL",130,0)
 merge @ary=ind
"RTN","SYNFUTL",131,0)
 quit
"RTN","SYNFUTL",132,0)
 ;
"RTN","SYNFUTL",133,0)
valueDex2(ary,indx) ; creates index indx of values of the array
"RTN","SYNFUTL",134,0)
 ; this one simplifies indx
"RTN","SYNFUTL",135,0)
 new ind
"RTN","SYNFUTL",136,0)
 new fi s fi=$query(@ary@(""))
"RTN","SYNFUTL",137,0)
 set ind(indx,@fi)=fi
"RTN","SYNFUTL",138,0)
 for  set fi=$query(@fi) quit:fi=""  do  ;
"RTN","SYNFUTL",139,0)
 . ;w !,@fi," ",fi
"RTN","SYNFUTL",140,0)
 . if @fi="" quit
"RTN","SYNFUTL",141,0)
 . set ind($qs(fi,$ql(fi)),@fi)=fi
"RTN","SYNFUTL",142,0)
 . ;write !,fi," ",@fi
"RTN","SYNFUTL",143,0)
 ;zwrite ind
"RTN","SYNFUTL",144,0)
 merge @indx=ind
"RTN","SYNFUTL",145,0)
 quit
"RTN","SYNFUTL",146,0)
 ;
"RTN","SYNFUTL",147,0)
testAdb() ; test Array Defined By
"RTN","SYNFUTL",148,0)
 new fhir
"RTN","SYNFUTL",149,0)
 do getIntakeFhir^SYNFHIR("fhir",,"Patient",1)
"RTN","SYNFUTL",150,0)
 do adb("fhirrace","fhir","text","race")
"RTN","SYNFUTL",151,0)
 zwrite fhirrace
"RTN","SYNFUTL",152,0)
 ;
"RTN","SYNFUTL",153,0)
 ; expected results:
"RTN","SYNFUTL",154,0)
 ;d testAdb^SYNFUTL
"RTN","SYNFUTL",155,0)
 ;fhirrace("coding",1,"code")="2106-3"
"RTN","SYNFUTL",156,0)
 ;fhirrace("coding",1,"display")="White"
"RTN","SYNFUTL",157,0)
 ;fhirrace("coding",1,"system")="http://hl7.org/fhir/v3/Race"
"RTN","SYNFUTL",158,0)
 ;fhirrace("text")="race"
"RTN","SYNFUTL",159,0)
 ;
"RTN","SYNFUTL",160,0)
 quit
"RTN","SYNFUTL",161,0)
 ;
"RTN","SYNFUTL",162,0)
adb(rtn,ary,pred,obj) ; returns the array defined by the predicate and object
"RTN","SYNFUTL",163,0)
 if '$d(@ary@("value")) do valueDex(ary,"value")
"RTN","SYNFUTL",164,0)
 new ref
"RTN","SYNFUTL",165,0)
 set ref=@ary@("value",obj) 
"RTN","SYNFUTL",166,0)
 if ref'[pred quit  ;
"RTN","SYNFUTL",167,0)
 do replace(.ref,","""_pred_"""","")
"RTN","SYNFUTL",168,0)
 ;w !,ref b
"RTN","SYNFUTL",169,0)
 merge @rtn=@ref
"RTN","SYNFUTL",170,0)
 quit
"RTN","SYNFUTL",171,0)
 ;
"RTN","SYNFUTL",172,0)
replace(ln,cur,repl) ; replace current with replacment in line ln
"RTN","SYNFUTL",173,0)
 new where set where=$find(ln,cur)
"RTN","SYNFUTL",174,0)
 quit:where=0 ; this might not work for cur at the end of ln, please test
"RTN","SYNFUTL",175,0)
 set ln=$extract(ln,1,where-$length(cur)-1)_repl_$extract(ln,where,$length(ln))
"RTN","SYNFUTL",176,0)
 quit
"RTN","SYNFUTL",177,0)
 ;
"RTN","SYNFUTL",178,0)
 
"RTN","SYNFVF")
0^13^B31900460
"RTN","SYNFVF",1,0)
SYNFVF ;ven/gpl - fhir loader utilities ; 2/20/18 4:11am
"RTN","SYNFVF",2,0)
 ;;1.0;fhirloader;;Apr 15, 2018;Build 2
"RTN","SYNFVF",3,0)
 ;
"RTN","SYNFVF",4,0)
 ; Authored by George P. Lilly 2018
"RTN","SYNFVF",5,0)
 ;
"RTN","SYNFVF",6,0)
 q
"RTN","SYNFVF",7,0)
 ;
"RTN","SYNFVF",8,0)
 ; utilities to pull FHIR resources for VistA patients
"RTN","SYNFVF",9,0)
 ;
"RTN","SYNFVF",10,0)
vurl() ; extrinsic returns the url for VistA get fhir
"RTN","SYNFVF",11,0)
 q "https://vista-fhir-dev.openplatform.healthcare/api/Patient/"
"RTN","SYNFVF",12,0)
 ;
"RTN","SYNFVF",13,0)
wsIcnList(rtn,filter) ; web service to return a list of ICNs for vista patients
"RTN","SYNFVF",14,0)
 n dnfmin,dfnmax
"RTN","SYNFVF",15,0)
 s dfnmin=$g(filter("dfnmin"))
"RTN","SYNFVF",16,0)
 i dfnmin="" s dfnmin=$o(^DPT(0))
"RTN","SYNFVF",17,0)
 s dfnmax=$g(filter("dfnmax"))
"RTN","SYNFVF",18,0)
 i dfnmax="" s dfnmax=$o(^DPT("  "),-1)
"RTN","SYNFVF",19,0)
 ;
"RTN","SYNFVF",20,0)
 n tbl ; table of full ICNs sorted by dfn
"RTN","SYNFVF",21,0)
 d sortAFICN(.tbl)
"RTN","SYNFVF",22,0)
 ;
"RTN","SYNFVF",23,0)
 n rtn1 ; json return before decode
"RTN","SYNFVF",24,0)
 n zi s zi=+$o(tbl(dfnmin),-1)
"RTN","SYNFVF",25,0)
 f  s zi=$o(tbl(zi)) q:+zi=0  q:zi>dfnmax  d  ;
"RTN","SYNFVF",26,0)
 . n zj s zj=""
"RTN","SYNFVF",27,0)
 . f  s zj=$o(tbl(zi,zj)) q:zj=""  d  ;
"RTN","SYNFVF",28,0)
 . . s rtn1("return",zi,zj,"icn")=zj
"RTN","SYNFVF",29,0)
 . . s rtn1("return",zi,zj,"dfn")=zi
"RTN","SYNFVF",30,0)
 ;m rtn=rtn1
"RTN","SYNFVF",31,0)
 d ENCODE^VPRJSON("rtn1","rtn")
"RTN","SYNFVF",32,0)
 q
"RTN","SYNFVF",33,0)
 ;
"RTN","SYNFVF",34,0)
sortAFICN(ary) ; sort the AFICN index by dfn
"RTN","SYNFVF",35,0)
 n zii s zii=""
"RTN","SYNFVF",36,0)
 f  s zii=$o(^DPT("AFICN",zii)) q:+zii=0  d  ;
"RTN","SYNFVF",37,0)
 . n zdfn
"RTN","SYNFVF",38,0)
 . s zdfn=$o(^DPT("AFICN",zii,""))
"RTN","SYNFVF",39,0)
 . s ary(zdfn,zii)=""
"RTN","SYNFVF",40,0)
 q
"RTN","SYNFVF",41,0)
 ;
"RTN","SYNFVF",42,0)
getVehuIcns ; get the Dev VEHU ICNs and stores them in a graph
"RTN","SYNFVF",43,0)
 n gn,root
"RTN","SYNFVF",44,0)
 d purgegraph^%wd("vehu-icns")
"RTN","SYNFVF",45,0)
 s root=$$setroot^%wd("vehu-icns")
"RTN","SYNFVF",46,0)
 s gn="http://wip.vistaplex.org:9080/icnlist?dfnmax=100000"
"RTN","SYNFVF",47,0)
 s ok=$$%^%WC(.g,"GET",gn)
"RTN","SYNFVF",48,0)
 d DECODE^VPRJSON("g","g2")
"RTN","SYNFVF",49,0)
 ;
"RTN","SYNFVF",50,0)
 n zi,zj s (zi,zj)=""
"RTN","SYNFVF",51,0)
 f  s zi=$o(g2("return",zi)) q:zi=""  d  ;
"RTN","SYNFVF",52,0)
 . f  s zj=$o(g2("return",zi,zj)) q:zj=""  d  ;
"RTN","SYNFVF",53,0)
 . . s @root@(zi,zj)=""
"RTN","SYNFVF",54,0)
 . . s @root@("ICN",zj,zi)=""
"RTN","SYNFVF",55,0)
 ;
"RTN","SYNFVF",56,0)
 q
"RTN","SYNFVF",57,0)
 ;
"RTN","SYNFVF",58,0)
getAllergies ; get VEHU allergies fhir resources
"RTN","SYNFVF",59,0)
 ;
"RTN","SYNFVF",60,0)
 n icnroot s icnroot=$$setroot^%wd("vehu-icns")
"RTN","SYNFVF",61,0)
 ;
"RTN","SYNFVF",62,0)
 d purgegraph^%wd("fhir-vista-AllergyIntolerance")
"RTN","SYNFVF",63,0)
 n zicn s zicn=""
"RTN","SYNFVF",64,0)
 f  s zicn=$o(@icnroot@("ICN",zicn)) q:zicn=""  d  ;
"RTN","SYNFVF",65,0)
 . n domain,entries
"RTN","SYNFVF",66,0)
 . s domain="AllergyIntolerance"
"RTN","SYNFVF",67,0)
 . d getDomain("entries",domain,zicn)
"RTN","SYNFVF",68,0)
 . i '$d(entries) q  ;
"RTN","SYNFVF",69,0)
 . s entries("ICN")=zicn
"RTN","SYNFVF",70,0)
 . s entries("DFN")=$o(@icnroot@("ICN",zicn,""))
"RTN","SYNFVF",71,0)
 . s zien=$$storeGraph("entries","fhir-vista-"_domain,zicn)
"RTN","SYNFVF",72,0)
 q
"RTN","SYNFVF",73,0)
 ;
"RTN","SYNFVF",74,0)
getAppointments ; get VEHU appointment fhir resources
"RTN","SYNFVF",75,0)
 ;
"RTN","SYNFVF",76,0)
 n icnroot s icnroot=$$setroot^%wd("vehu-icns")
"RTN","SYNFVF",77,0)
 ;
"RTN","SYNFVF",78,0)
 d purgegraph^%wd("fhir-vista-Appointment")
"RTN","SYNFVF",79,0)
 n zicn s zicn=""
"RTN","SYNFVF",80,0)
 f  s zicn=$o(@icnroot@("ICN",zicn)) q:zicn=""  d  ;
"RTN","SYNFVF",81,0)
 . n domain,entries
"RTN","SYNFVF",82,0)
 . s domain="Appointment"
"RTN","SYNFVF",83,0)
 . d getDomain("entries",domain,zicn)
"RTN","SYNFVF",84,0)
 . i '$d(entries) q  ;
"RTN","SYNFVF",85,0)
 . s entries("ICN")=zicn
"RTN","SYNFVF",86,0)
 . s entries("DFN")=$o(@icnroot@("ICN",zicn,""))
"RTN","SYNFVF",87,0)
 . s zien=$$storeGraph("entries","fhir-vista-"_domain,zicn)
"RTN","SYNFVF",88,0)
 q
"RTN","SYNFVF",89,0)
 ;
"RTN","SYNFVF",90,0)
getProcedures ; get VEHU procedure fhir resources
"RTN","SYNFVF",91,0)
 ;
"RTN","SYNFVF",92,0)
 n icnroot s icnroot=$$setroot^%wd("vehu-icns")
"RTN","SYNFVF",93,0)
 ;
"RTN","SYNFVF",94,0)
 d purgegraph^%wd("fhir-vista-Procedure")
"RTN","SYNFVF",95,0)
 n zicn s zicn=""
"RTN","SYNFVF",96,0)
 f  s zicn=$o(@icnroot@("ICN",zicn)) q:zicn=""  d  ;
"RTN","SYNFVF",97,0)
 . n domain,entries
"RTN","SYNFVF",98,0)
 . s domain="Procedure"
"RTN","SYNFVF",99,0)
 . d getDomain("entries",domain,zicn)
"RTN","SYNFVF",100,0)
 . i '$d(entries) q  ;
"RTN","SYNFVF",101,0)
 . s entries("ICN")=zicn
"RTN","SYNFVF",102,0)
 . s entries("DFN")=$o(@icnroot@("ICN",zicn,""))
"RTN","SYNFVF",103,0)
 . s zien=$$storeGraph("entries","fhir-vista-"_domain,zicn)
"RTN","SYNFVF",104,0)
 q
"RTN","SYNFVF",105,0)
 ;
"RTN","SYNFVF",106,0)
getDomain(rtn,domain,icn) ; pull domain entries for VistA patient ICN
"RTN","SYNFVF",107,0)
 n gn2
"RTN","SYNFVF",108,0)
 s gn2="https://vista-fhir-dev.openplatform.healthcare/api/Patient/"
"RTN","SYNFVF",109,0)
 ;
"RTN","SYNFVF",110,0)
 n url,fhir,r1
"RTN","SYNFVF",111,0)
 s url=gn2_icn_"/"_domain
"RTN","SYNFVF",112,0)
 s ok=$$%^%WC(.fhir,"GET",url)
"RTN","SYNFVF",113,0)
 d DECODE^VPRJSON("fhir","r1")
"RTN","SYNFVF",114,0)
 m @rtn@("entry")=r1("entry")
"RTN","SYNFVF",115,0)
 ;
"RTN","SYNFVF",116,0)
 q
"RTN","SYNFVF",117,0)
 ;
"RTN","SYNFVF",118,0)
storeGraph(ary,graph,id) ; stores an array ary, passed by name
"RTN","SYNFVF",119,0)
 ; into graphname graph with B index id
"RTN","SYNFVF",120,0)
 ; extrinsic, returns the ien
"RTN","SYNFVF",121,0)
 ;
"RTN","SYNFVF",122,0)
 i graph="" s graph="misc"
"RTN","SYNFVF",123,0)
 n root set root=$$setroot^%wd(graph)
"RTN","SYNFVF",124,0)
 ;
"RTN","SYNFVF",125,0)
 n ien,rien
"RTN","SYNFVF",126,0)
 s ien=$o(@root@(" "),-1)+1
"RTN","SYNFVF",127,0)
 ;
"RTN","SYNFVF",128,0)
 m @root@(ien)=@ary
"RTN","SYNFVF",129,0)
 ;
"RTN","SYNFVF",130,0)
 s @root@("B",id,ien)=""
"RTN","SYNFVF",131,0)
 ;
"RTN","SYNFVF",132,0)
 q ien
"RTN","SYNFVF",133,0)
 ;
"RTN","SYNFVF",134,0)
wsGetAllergy(rtn,filter) ; web service to pull a random allergy from 
"RTN","SYNFVF",135,0)
 ; graph fhir-vista-Allergy
"RTN","SYNFVF",136,0)
 ;
"RTN","SYNFVF",137,0)
 n root s root=$$setroot^%wd("fhir-vista-AllergyIntolerance")
"RTN","SYNFVF",138,0)
 n max
"RTN","SYNFVF",139,0)
 s max=$o(@root@(" "),-1)
"RTN","SYNFVF",140,0)
 i +max=0 q  ; nothing to pull
"RTN","SYNFVF",141,0)
 n ien s ien=$r(max)
"RTN","SYNFVF",142,0)
 i '$d(@root@(ien)) s ien=$r(max)
"RTN","SYNFVF",143,0)
 n r1
"RTN","SYNFVF",144,0)
 s r1=$na(@root@(ien))
"RTN","SYNFVF",145,0)
 i $g(filter("format"))="mumps" d  q  ;
"RTN","SYNFVF",146,0)
 . m rtn=@r1
"RTN","SYNFVF",147,0)
 d ENCODE^VPRJSON(r1,"rtn")
"RTN","SYNFVF",148,0)
 q
"RTN","SYNFVF",149,0)
 ; 
"RTN","SYNFVF",150,0)
wsGetAppointment(rtn,filter) ; web service to pull a random appointments from 
"RTN","SYNFVF",151,0)
 ; graph fhir-vista-Appointment
"RTN","SYNFVF",152,0)
 ;
"RTN","SYNFVF",153,0)
 n root s root=$$setroot^%wd("fhir-vista-Appointment")
"RTN","SYNFVF",154,0)
 n max
"RTN","SYNFVF",155,0)
 s max=$o(@root@(" "),-1)
"RTN","SYNFVF",156,0)
 i +max=0 q  ; nothing to pull
"RTN","SYNFVF",157,0)
 n ien s ien=$r(max)
"RTN","SYNFVF",158,0)
 i '$d(@root@(ien)) s ien=$r(max)
"RTN","SYNFVF",159,0)
 n r1
"RTN","SYNFVF",160,0)
 s r1=$na(@root@(ien))
"RTN","SYNFVF",161,0)
 i $g(filter("format"))="mumps" d  q  ;
"RTN","SYNFVF",162,0)
 . m rtn=@r1
"RTN","SYNFVF",163,0)
 d ENCODE^VPRJSON(r1,"rtn")
"RTN","SYNFVF",164,0)
 q
"RTN","SYNFVF",165,0)
 ; 
"RTN","SYNFVF",166,0)
wsGetProcedure(rtn,filter) ; web service to pull a random procedure from 
"RTN","SYNFVF",167,0)
 ; graph fhir-vista-Procedure
"RTN","SYNFVF",168,0)
 ;
"RTN","SYNFVF",169,0)
 n root s root=$$setroot^%wd("fhir-vista-Procedure")
"RTN","SYNFVF",170,0)
 n max
"RTN","SYNFVF",171,0)
 s max=$o(@root@(" "),-1)
"RTN","SYNFVF",172,0)
 i +max=0 q  ; nothing to pull
"RTN","SYNFVF",173,0)
 n ien s ien=$r(max)
"RTN","SYNFVF",174,0)
 i '$d(@root@(ien)) s ien=$r(max)
"RTN","SYNFVF",175,0)
 n r1
"RTN","SYNFVF",176,0)
 s r1=$na(@root@(ien))
"RTN","SYNFVF",177,0)
 i $g(filter("format"))="mumps" d  q  ;
"RTN","SYNFVF",178,0)
 . m rtn=@r1
"RTN","SYNFVF",179,0)
 d ENCODE^VPRJSON(r1,"rtn")
"RTN","SYNFVF",180,0)
 q
"RTN","SYNFVF",181,0)
 ; 
"RTN","SYNFVIT")
0^14^B133766199
"RTN","SYNFVIT",1,0)
SYNFVIT ;ven/gpl - fhir loader utilities ; 2/24/18 8:37pm
"RTN","SYNFVIT",2,0)
 ;;1.0;fhirloader;;oct 19, 2017;Build 2
"RTN","SYNFVIT",3,0)
 ;
"RTN","SYNFVIT",4,0)
 ; Authored by George P. Lilly 2017-2018
"RTN","SYNFVIT",5,0)
 ;
"RTN","SYNFVIT",6,0)
 q
"RTN","SYNFVIT",7,0)
 ;
"RTN","SYNFVIT",8,0)
importVitals(rtn,ien,args) ; entry point for loading vitals for a patient
"RTN","SYNFVIT",9,0)
 ; calls the intake Vitals web service directly
"RTN","SYNFVIT",10,0)
 ;
"RTN","SYNFVIT",11,0)
 n grtn
"RTN","SYNFVIT",12,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFVIT",13,0)
 d wsIntakeVitals(.args,,.grtn,ien)
"RTN","SYNFVIT",14,0)
 i $d(grtn) d  ; something was returned
"RTN","SYNFVIT",15,0)
 . k @root@(ien,"load","vitals")
"RTN","SYNFVIT",16,0)
 . m @root@(ien,"load","vitals")=grtn("vitals")
"RTN","SYNFVIT",17,0)
 . if $g(args("debug"))=1 m rtn=grtn
"RTN","SYNFVIT",18,0)
 s rtn("vitalsStatus","status")=$g(grtn("status","status"))
"RTN","SYNFVIT",19,0)
 s rtn("vitalsStatus","loaded")=$g(grtn("status","loaded"))
"RTN","SYNFVIT",20,0)
 s rtn("vitalsStatus","errors")=$g(grtn("status","errors"))
"RTN","SYNFVIT",21,0)
 ;b
"RTN","SYNFVIT",22,0)
 ;
"RTN","SYNFVIT",23,0)
 ;
"RTN","SYNFVIT",24,0)
 q
"RTN","SYNFVIT",25,0)
 ;
"RTN","SYNFVIT",26,0)
wsIntakeVitals(args,body,result,ien) ; web service entry (post)
"RTN","SYNFVIT",27,0)
 ; for intake of one or more Vital signs. input are fhir resources
"RTN","SYNFVIT",28,0)
 ; result is json and summarizes what was done
"RTN","SYNFVIT",29,0)
 ; args include patientId
"RTN","SYNFVIT",30,0)
 ; ien is specified for internal calls, where the json is already in a graph
"RTN","SYNFVIT",31,0)
 n jtmp,json,jrslt,eval
"RTN","SYNFVIT",32,0)
 ;i $g(ien)'="" if $$loadStatus("vitals","",ien)=1 d  q  ;
"RTN","SYNFVIT",33,0)
 ;. s result("vitalsStatus","status")="alreadyLoaded"
"RTN","SYNFVIT",34,0)
 i $g(ien)'="" d  ; internal call
"RTN","SYNFVIT",35,0)
 . d getIntakeFhir^SYNFHIR("json",,"Observation",ien,1)
"RTN","SYNFVIT",36,0)
 e  d  ; 
"RTN","SYNFVIT",37,0)
 . ;s args("load")=0
"RTN","SYNFVIT",38,0)
 . merge jtmp=BODY
"RTN","SYNFVIT",39,0)
 . do DECODE^VPRJSON("jtmp","json")
"RTN","SYNFVIT",40,0)
 i '$d(json) q  ;
"RTN","SYNFVIT",41,0)
 m ^gpl("gjson")=json
"RTN","SYNFVIT",42,0)
 ;
"RTN","SYNFVIT",43,0)
 ; determine the patient
"RTN","SYNFVIT",44,0)
 ;
"RTN","SYNFVIT",45,0)
 n dfn,eval
"RTN","SYNFVIT",46,0)
 if $g(ien)'="" d  ;
"RTN","SYNFVIT",47,0)
 . s dfn=$$ien2dfn^SYNFUTL(ien) ; look up dfn in the graph
"RTN","SYNFVIT",48,0)
 else  d  ;
"RTN","SYNFVIT",49,0)
 . s dfn=$g(args("dfn"))
"RTN","SYNFVIT",50,0)
 . i dfn="" d  ;
"RTN","SYNFVIT",51,0)
 . . n icn s icn=$g(args("icn"))
"RTN","SYNFVIT",52,0)
 . . i icn'="" s dfn=$$icn2dfn^SYNFUTL(icn)
"RTN","SYNFVIT",53,0)
 i $g(dfn)="" do  quit  ; need the patient
"RTN","SYNFVIT",54,0)
 . s result("vitals",1,"log",1)="Error, patient not found.. terminating"
"RTN","SYNFVIT",55,0)
 ;
"RTN","SYNFVIT",56,0)
 ;
"RTN","SYNFVIT",57,0)
 new zi s zi=0
"RTN","SYNFVIT",58,0)
 for  set zi=$order(json("entry",zi)) quit:+zi=0  do  ;
"RTN","SYNFVIT",59,0)
 . ;
"RTN","SYNFVIT",60,0)
 . ; define a place to log the processing of this entry
"RTN","SYNFVIT",61,0)
 . ;
"RTN","SYNFVIT",62,0)
 . new jlog set jlog=$name(eval("vitals",zi))
"RTN","SYNFVIT",63,0)
 . ;
"RTN","SYNFVIT",64,0)
 . ; insure that the resourceType is Observation
"RTN","SYNFVIT",65,0)
 . ;
"RTN","SYNFVIT",66,0)
 . new type set type=$get(json("entry",zi,"resource","resourceType"))
"RTN","SYNFVIT",67,0)
 . if type'="Observation" do  quit  ;
"RTN","SYNFVIT",68,0)
 . . set eval("vitals",zi,"vars","resourceType")=type
"RTN","SYNFVIT",69,0)
 . . do log(jlog,"Resource type not Observation, skipping entry")
"RTN","SYNFVIT",70,0)
 . set eval("vitals",zi,"vars","resourceType")=type
"RTN","SYNFVIT",71,0)
 . ;
"RTN","SYNFVIT",72,0)
 . ; determine the Observation category and quit if not vital-signs
"RTN","SYNFVIT",73,0)
 . ;
"RTN","SYNFVIT",74,0)
 . new obstype set obstype=$get(json("entry",zi,"resource","category",1,"coding",1,"code"))
"RTN","SYNFVIT",75,0)
 . if obstype="" do  ; category is missing, try mapping the code
"RTN","SYNFVIT",76,0)
 . . new trycode,trydisp,tryy 
"RTN","SYNFVIT",77,0)
 . . set trycode=$g(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFVIT",78,0)
 . . set trydisp=$g(json("entry",zi,"resource","code","coding",1,"display"))
"RTN","SYNFVIT",79,0)
 . . s tryy=$$loinc2sct(trycode)
"RTN","SYNFVIT",80,0)
 . . if tryy="" d  quit  ;
"RTN","SYNFVIT",81,0)
 . . . d log(jlog,"Observation Category missing, not vital signs; code is: "_trycode_" "_trydisp)
"RTN","SYNFVIT",82,0)
 . . if tryy'="" set obstype="vital-signs"
"RTN","SYNFVIT",83,0)
 . . d log(jlog,"Derived category is "_obstype)
"RTN","SYNFVIT",84,0)
 . ;
"RTN","SYNFVIT",85,0)
 . if obstype'="vital-signs" do  quit  ;
"RTN","SYNFVIT",86,0)
 . . set eval("vitals",zi,"vars","observationCategory")=obstype
"RTN","SYNFVIT",87,0)
 . . do log(jlog,"Observation Category is not vital-signs, skipping")
"RTN","SYNFVIT",88,0)
 . set eval("vitals",zi,"vars","observationCategory")=obstype
"RTN","SYNFVIT",89,0)
 . ;
"RTN","SYNFVIT",90,0)
 . ; see if this resource has already been loaded. if so, skip it
"RTN","SYNFVIT",91,0)
 . ;
"RTN","SYNFVIT",92,0)
 . if $g(ien)'="" if $$loadStatus("vitals",zi,ien)=1 do  quit  ;
"RTN","SYNFVIT",93,0)
 . . d log(jlog,"Vital sign already loaded, skipping")
"RTN","SYNFVIT",94,0)
 . ;
"RTN","SYNFVIT",95,0)
 . ; determine Vitals type, code, coding system, and display text
"RTN","SYNFVIT",96,0)
 . ;
"RTN","SYNFVIT",97,0)
 . new vittype set vittype=$get(json("entry",zi,"resource","code","text"))
"RTN","SYNFVIT",98,0)
 . if vittype="" set vittype=$get(json("entry",zi,"resource","code","coding",1,"display"))
"RTN","SYNFVIT",99,0)
 . do log(jlog,"Vitals type is: "_vittype)
"RTN","SYNFVIT",100,0)
 . set eval("vitals",zi,"vars","type")=vittype
"RTN","SYNFVIT",101,0)
 . ;
"RTN","SYNFVIT",102,0)
 . ; determine the id of the resource
"RTN","SYNFVIT",103,0)
 . ;
"RTN","SYNFVIT",104,0)
 . new id set id=$get(json("entry",zi,"resource","id"))
"RTN","SYNFVIT",105,0)
 . set eval("vitals",zi,"vars","id")=id
"RTN","SYNFVIT",106,0)
 . d log(jlog,"ID is: "_id)
"RTN","SYNFVIT",107,0)
 . ;
"RTN","SYNFVIT",108,0)
 . new obscode set obscode=$get(json("entry",zi,"resource","code","coding",1,"code"))
"RTN","SYNFVIT",109,0)
 . do log(jlog,"code is: "_obscode)
"RTN","SYNFVIT",110,0)
 . set eval("vitals",zi,"vars","code")=obscode
"RTN","SYNFVIT",111,0)
 . ;
"RTN","SYNFVIT",112,0)
 . s ^gpl("vitals",obscode,vittype)=""
"RTN","SYNFVIT",113,0)
 . ; here's what we got so far:
"RTN","SYNFVIT",114,0)
 . ;^gpl("vitals","29463-7","Body Weight")=""
"RTN","SYNFVIT",115,0)
 . ;^gpl("vitals","39156-5","Body Mass Index")=""
"RTN","SYNFVIT",116,0)
 . ;^gpl("vitals","55284-4","Blood Pressure")=""
"RTN","SYNFVIT",117,0)
 . ;^gpl("vitals","8302-2","Body Height")=""
"RTN","SYNFVIT",118,0)
 . ;^gpl("vitals","8331-1","Oral temperature")=""
"RTN","SYNFVIT",119,0)
 . ;
"RTN","SYNFVIT",120,0)
 . new codesystem set codesystem=$get(json("entry",zi,"resource","code","coding",1,"system"))
"RTN","SYNFVIT",121,0)
 . do log(jlog,"code system is: "_codesystem)
"RTN","SYNFVIT",122,0)
 . set eval("vitals",zi,"vars","codeSystem")=codesystem
"RTN","SYNFVIT",123,0)
 . ;
"RTN","SYNFVIT",124,0)
 . ; determine the value and units
"RTN","SYNFVIT",125,0)
 . ;
"RTN","SYNFVIT",126,0)
 . new value set value=$get(json("entry",zi,"resource","valueQuantity","value"))
"RTN","SYNFVIT",127,0)
 . do log(jlog,"value is: "_value)
"RTN","SYNFVIT",128,0)
 . set eval("vitals",zi,"vars","value")=value
"RTN","SYNFVIT",129,0)
 . ;
"RTN","SYNFVIT",130,0)
 . new unit set unit=$get(json("entry",zi,"resource","valueQuantity","unit"))
"RTN","SYNFVIT",131,0)
 . do log(jlog,"units are: "_unit)
"RTN","SYNFVIT",132,0)
 . set eval("vitals",zi,"vars","units")=unit
"RTN","SYNFVIT",133,0)
 . ;
"RTN","SYNFVIT",134,0)
 . ; fix blood preasure readings (combine two readings to one)
"RTN","SYNFVIT",135,0)
 . ;
"RTN","SYNFVIT",136,0)
 . if obscode="55284-4" do  ; Blood Pressure
"RTN","SYNFVIT",137,0)
 . . new tmpjson,systolic,diastolic,combined
"RTN","SYNFVIT",138,0)
 . . merge tmpjson=json("entry",zi)
"RTN","SYNFVIT",139,0)
 . . d log(jlog,"Combining Blood Pressure values")
"RTN","SYNFVIT",140,0)
 . . n tn s tn=$na(tmpjson("resource","component"))
"RTN","SYNFVIT",141,0)
 . . n tx
"RTN","SYNFVIT",142,0)
 . . f tx=1,2  d  ;
"RTN","SYNFVIT",143,0)
 . . . if $g(@tn@(tx,"code","coding",1,"code"))="8480-6" d  ; Systolic Blood Pressure
"RTN","SYNFVIT",144,0)
 . . . . s systolic("units")=$g(@tn@(tx,"valueQuantity","unit"))
"RTN","SYNFVIT",145,0)
 . . . . s unit=systolic("units")
"RTN","SYNFVIT",146,0)
 . . . . s systolic("value")=$g(@tn@(tx,"valueQuantity","value"))
"RTN","SYNFVIT",147,0)
 . . . . s value=systolic("value")
"RTN","SYNFVIT",148,0)
 . . . . d log(jlog,("Systolic value is: "_systolic("value")))
"RTN","SYNFVIT",149,0)
 . . . if $g(@tn@(tx,"code","coding",1,"code"))="8462-4" d  ; Diastolic Blood Pressure
"RTN","SYNFVIT",150,0)
 . . . . s diastolic("units")=$g(@tn@(tx,"valueQuantity","unit"))
"RTN","SYNFVIT",151,0)
 . . . . s unit=diastolic("units")
"RTN","SYNFVIT",152,0)
 . . . . s diastolic("value")=$g(@tn@(tx,"valueQuantity","value"))
"RTN","SYNFVIT",153,0)
 . . . . s value=diastolic("value")
"RTN","SYNFVIT",154,0)
 . . . . d log(jlog,("Diastolic value is: "_diastolic("value")))
"RTN","SYNFVIT",155,0)
 . . s combined=$g(systolic("value"))_"/"_$g(diastolic("value"))
"RTN","SYNFVIT",156,0)
 . . s value=combined
"RTN","SYNFVIT",157,0)
 . . d log(jlog,"Combined Blood Pressure value is: "_combined)
"RTN","SYNFVIT",158,0)
 . . set eval("vitals",zi,"vars","value")=combined
"RTN","SYNFVIT",159,0)
 . . set eval("vitals",zi,"vars","units")=$g(diastolic("units"))
"RTN","SYNFVIT",160,0)
 . . d log(jlog,"Blood Pressure units are: "_$g(diastolic("units")))
"RTN","SYNFVIT",161,0)
 . . ;b
"RTN","SYNFVIT",162,0)
 . ;
"RTN","SYNFVIT",163,0)
 . ; determine the effective date
"RTN","SYNFVIT",164,0)
 . ;
"RTN","SYNFVIT",165,0)
 . new effdate set effdate=$get(json("entry",zi,"resource","effectiveDateTime"))
"RTN","SYNFVIT",166,0)
 . do log(jlog,"effectiveDateTime is: "_effdate)
"RTN","SYNFVIT",167,0)
 . set eval("vitals",zi,"vars","effectiveDateTime")=effdate
"RTN","SYNFVIT",168,0)
 . new fmtime s fmtime=$$fhirTfm^SYNFUTL(effdate)
"RTN","SYNFVIT",169,0)
 . d log(jlog,"fileman dateTime is: "_fmtime)
"RTN","SYNFVIT",170,0)
 . set eval("vitals",zi,"vars","fmDateTime")=fmtime ;
"RTN","SYNFVIT",171,0)
 . new hl7time s hl7time=$$fhirThl7^SYNFUTL(effdate)
"RTN","SYNFVIT",172,0)
 . d log(jlog,"hl7 dateTime is: "_hl7time)
"RTN","SYNFVIT",173,0)
 . set eval("vitals",zi,"vars","hl7DateTime")=hl7time ;
"RTN","SYNFVIT",174,0)
 . ;
"RTN","SYNFVIT",175,0)
 . ; set up to call the data loader
"RTN","SYNFVIT",176,0)
 . ;
"RTN","SYNFVIT",177,0)
 . n RETSTA,DHPPAT,DHPSCT,DHPOBS,DHPUNT,DHPDTM,DHPPROV,DHPLOC
"RTN","SYNFVIT",178,0)
 . ;
"RTN","SYNFVIT",179,0)
 . s DHPPAT=$$dfn2icn^SYNFUTL(dfn)
"RTN","SYNFVIT",180,0)
 . s eval("vitals",zi,"parms","DHPPAT")=DHPPAT
"RTN","SYNFVIT",181,0)
 . ;
"RTN","SYNFVIT",182,0)
 . n sct s sct=$$loinc2sct(obscode) ; find the snomed code
"RTN","SYNFVIT",183,0)
 . i sct="" d  quit
"RTN","SYNFVIT",184,0)
 . . d log(jlog,"Snomed Code not found for vitals code: "_obscode_" -- skipping")
"RTN","SYNFVIT",185,0)
 . . s eval("vitals",zi,"status","loadstatus")="cannotLoad"
"RTN","SYNFVIT",186,0)
 . . s eval("vitals",zi,"status","issue")="Snomed Code not found for vitals code: "_obscode_" -- skipping"
"RTN","SYNFVIT",187,0)
 . . s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFVIT",188,0)
 . s eval("vitals",zi,"parms","DHPSCT")=sct
"RTN","SYNFVIT",189,0)
 . d log(jlog,"Snomed Code is: "_sct)
"RTN","SYNFVIT",190,0)
 . s DHPSCT=sct
"RTN","SYNFVIT",191,0)
 . ;
"RTN","SYNFVIT",192,0)
 . s DHPOBS=value
"RTN","SYNFVIT",193,0)
 . s eval("vitals",zi,"parms","DHPOBS")=value
"RTN","SYNFVIT",194,0)
 . d log(jlog,"Value is: "_value)
"RTN","SYNFVIT",195,0)
 . ;
"RTN","SYNFVIT",196,0)
 . s DHPUNT=unit
"RTN","SYNFVIT",197,0)
 . s eval("vitals",zi,"parms","DHPUNT")=unit
"RTN","SYNFVIT",198,0)
 . d log(jlog,"Units are: "_unit)
"RTN","SYNFVIT",199,0)
 . ;
"RTN","SYNFVIT",200,0)
 . s DHPDTM=hl7time
"RTN","SYNFVIT",201,0)
 . s eval("vitals",zi,"parms","DHPDTM")=hl7time
"RTN","SYNFVIT",202,0)
 . d log(jlog,"HL7 DateTime is: "_hl7time)
"RTN","SYNFVIT",203,0)
 . ;
"RTN","SYNFVIT",204,0)
 . s DHPPROV=$$MAP^SYNQLDM("OP","provider")
"RTN","SYNFVIT",205,0)
 . n DHPPROVIEN s DHPPROVIEN=$o(^VA(200,"B",DHPPROV,""))
"RTN","SYNFVIT",206,0)
 . if DHPPROVIEN="" S DHPPROVIEN=3
"RTN","SYNFVIT",207,0)
 . s eval("vitals",zi,"parms","DHPPROV")=DHPPROVIEN
"RTN","SYNFVIT",208,0)
 . d log(jlog,"Provider for outpatient is: #"_DHPPROVIEN_" "_DHPPROV)
"RTN","SYNFVIT",209,0)
 . ;
"RTN","SYNFVIT",210,0)
 . s DHPLOC=$$MAP^SYNQLDM("OP","location")
"RTN","SYNFVIT",211,0)
 . n DHPLOCIEN s DHPLOCIEN=$o(^SC("B",DHPLOC,""))
"RTN","SYNFVIT",212,0)
 . if DHPLOCIEN="" S DHPLOCIEN=4
"RTN","SYNFVIT",213,0)
 . s eval("vitals",zi,"parms","DHPLOC")=DHPLOCIEN
"RTN","SYNFVIT",214,0)
 . d log(jlog,"Location for outpatient is: #"_DHPLOCIEN_" "_DHPLOC)
"RTN","SYNFVIT",215,0)
 . ;
"RTN","SYNFVIT",216,0)
 . s eval("vitals",zi,"status","loadstatus")="readyToLoad"
"RTN","SYNFVIT",217,0)
 . ;
"RTN","SYNFVIT",218,0)
 . if $g(args("load"))=1 d  ; only load if told to
"RTN","SYNFVIT",219,0)
 . . if $g(ien)'="" if $$loadStatus("vitals",zi,ien)=1 do  quit  ;
"RTN","SYNFVIT",220,0)
 . . . d log(jlog,"Vital sign already loaded, skipping")
"RTN","SYNFVIT",221,0)
 . . d log(jlog,"Calling VITUPD^SYNDHP61 to add vital")
"RTN","SYNFVIT",222,0)
 . . D VITUPD^SYNDHP61(.RETSTA,DHPPAT,DHPSCT,DHPOBS,DHPUNT,DHPDTM,DHPPROV,DHPLOC)	; vitals update
"RTN","SYNFVIT",223,0)
 . . d log(jlog,"Return from VITUPD^ZZDHP61 was: "_$g(RETSTA))
"RTN","SYNFVIT",224,0)
 . . if +$g(RETSTA)=1 do  ;
"RTN","SYNFVIT",225,0)
 . . . s eval("status","loaded")=$g(eval("status","loaded"))+1
"RTN","SYNFVIT",226,0)
 . . . s eval("vitals",zi,"status","loadstatus")="loaded"
"RTN","SYNFVIT",227,0)
 . . else  s eval("status","errors")=$g(eval("status","errors"))+1
"RTN","SYNFVIT",228,0)
 ;
"RTN","SYNFVIT",229,0)
 if $get(args("debug"))=1 do  ;
"RTN","SYNFVIT",230,0)
 . m jrslt("source")=json
"RTN","SYNFVIT",231,0)
 . m jrslt("args")=args
"RTN","SYNFVIT",232,0)
 . m jrslt("eval")=eval
"RTN","SYNFVIT",233,0)
 m jrslt("vitalsStatus")=eval("vitalsStatus")
"RTN","SYNFVIT",234,0)
 set jrslt("result","status")="ok"
"RTN","SYNFVIT",235,0)
 set jrslt("result","loaded")=$g(eval("status","loaded"))
"RTN","SYNFVIT",236,0)
 i $g(ien)'="" d  ; called internally
"RTN","SYNFVIT",237,0)
 . m result=eval
"RTN","SYNFVIT",238,0)
 . m result("status")=jrslt("result")
"RTN","SYNFVIT",239,0)
 . ;b
"RTN","SYNFVIT",240,0)
 e  d  ;
"RTN","SYNFVIT",241,0)
 . d ENCODE^VPRJSON("jrslt","result")
"RTN","SYNFVIT",242,0)
 . set HTTPRSP("mime")="application/json" 
"RTN","SYNFVIT",243,0)
 q 1
"RTN","SYNFVIT",244,0)
 ;
"RTN","SYNFVIT",245,0)
log(ary,txt) ; adds a text line to @ary@("log")
"RTN","SYNFVIT",246,0)
 s @ary@("log",$o(@ary@("log",""),-1)+1)=$g(txt)
"RTN","SYNFVIT",247,0)
 q
"RTN","SYNFVIT",248,0)
 ;
"RTN","SYNFVIT",249,0)
loadStatus(typ,zx,zien) ; extrinsic return 1 if resource was loaded
"RTN","SYNFVIT",250,0)
 n root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFVIT",251,0)
 n rt s rt=0
"RTN","SYNFVIT",252,0)
 i $g(zx)="" i $d(@root@(zien,"load",typ)) s rt=1 q rt
"RTN","SYNFVIT",253,0)
 i $get(@root@(zien,"load",typ,zx,"status","loadstatus"))="loaded" s rt=1
"RTN","SYNFVIT",254,0)
 q rt
"RTN","SYNFVIT",255,0)
loinc2sct(loinc) ; extrinsic returns a Snomed code for a Loinc code
"RTN","SYNFVIT",256,0)
 ; for vitals
"RTN","SYNFVIT",257,0)
 ; thanks to Ferdi for the Snomed mapping
"RTN","SYNFVIT",258,0)
 ;
"RTN","SYNFVIT",259,0)
 ; here's what we got so far:
"RTN","SYNFVIT",260,0)
 ;^gpl("vitals","29463-7","Body Weight")=""
"RTN","SYNFVIT",261,0)
 ;^gpl("vitals","39156-5","Body Mass Index")="" ; oops
"RTN","SYNFVIT",262,0)
 ;^gpl("vitals","55284-4","Blood Pressure")=""
"RTN","SYNFVIT",263,0)
 ;^gpl("vitals","8302-2","Body Height")=""
"RTN","SYNFVIT",264,0)
 ;^gpl("vitals","8331-1","Oral temperature")="" ;
"RTN","SYNFVIT",265,0)
 ;
"RTN","SYNFVIT",266,0)
 S SCTA("29463-7",27113001)="9^Body weight"
"RTN","SYNFVIT",267,0)
 S SCTA("8302-2",50373000)="8^Body height"
"RTN","SYNFVIT",268,0)
 S SCTA("55284-4",75367002)="1^Blood pressure"
"RTN","SYNFVIT",269,0)
 S SCTA(78564009)="5^Pulse rate"
"RTN","SYNFVIT",270,0)
 S SCTA("8331-1",386725007)="2^Body Temperature"
"RTN","SYNFVIT",271,0)
 S SCTA(86290005)="3^Respiration"
"RTN","SYNFVIT",272,0)
 S SCTA(48094003)="10^Abdominal girth measurement"
"RTN","SYNFVIT",273,0)
 S SCTA(21727005)="11^Audiometry"
"RTN","SYNFVIT",274,0)
 S SCTA(252465000)="21^Pulse oximetry"
"RTN","SYNFVIT",275,0)
 S SCTA(22253000)="22^Pain"
"RTN","SYNFVIT",276,0)
 ;
"RTN","SYNFVIT",277,0)
 q $o(SCTA(loinc,""))
"RTN","SYNFVIT",278,0)
 ;
"RTN","SYNFVIT",279,0)
testall ; run the vitals import on all imported patients
"RTN","SYNFVIT",280,0)
 new root s root=$$setroot^%wd("fhir-intake")
"RTN","SYNFVIT",281,0)
 new indx s indx=$na(@root@("POS","DFN"))
"RTN","SYNFVIT",282,0)
 n dfn,ien,filter,reslt
"RTN","SYNFVIT",283,0)
 s dfn=0
"RTN","SYNFVIT",284,0)
 f  s dfn=$o(@indx@(dfn)) q:+dfn=0  d  ;
"RTN","SYNFVIT",285,0)
 . s ien=$o(@indx@(dfn,""))
"RTN","SYNFVIT",286,0)
 . q:ien=""
"RTN","SYNFVIT",287,0)
 . s filter("dfn")=dfn
"RTN","SYNFVIT",288,0)
 . k reslt
"RTN","SYNFVIT",289,0)
 . d wsIntakeVitals(.filter,,.reslt,ien)
"RTN","SYNFVIT",290,0)
 q
"RTN","SYNFVIT",291,0)
 ;
"RTN","SYNQLDM")
0^15^B124882724
"RTN","SYNQLDM",1,0)
SYNQLDM ; GPL - QRDA loader entry routines ; 2/19/18 6:02am
"RTN","SYNQLDM",2,0)
 ;;0.1;QRDA LOADER;nopatch;noreleasedate;Build 2
"RTN","SYNQLDM",3,0)
 ;
"RTN","SYNQLDM",4,0)
 ; Authored by George P. Lilly 2016-2018
"RTN","SYNQLDM",5,0)
 ;
"RTN","SYNQLDM",6,0)
 Q
"RTN","SYNQLDM",7,0)
 ;
"RTN","SYNQLDM",8,0)
INITMAPS ; initialize maps 
"RTN","SYNQLDM",9,0)
 N G
"RTN","SYNQLDM",10,0)
 S G=$NA(^XTMP("SYNQLD","MAPS"))
"RTN","SYNQLDM",11,0)
 K @G
"RTN","SYNQLDM",12,0)
 N MAP
"RTN","SYNQLDM",13,0)
 ; SOP (payment?)
"RTN","SYNQLDM",14,0)
 S MAP="SOP"
"RTN","SYNQLDM",15,0)
 S @G@(MAP,"CODE","394","OTHER")=""
"RTN","SYNQLDM",16,0)
 ; race
"RTN","SYNQLDM",17,0)
 S MAP="race"
"RTN","SYNQLDM",18,0)
 S @G@(MAP,"CODE","1002-5","AMERICAN INDIAN OR ALASKA NATI")=""
"RTN","SYNQLDM",19,0)
 S @G@(MAP,"CODE","2028-9","ASIAN")=""
"RTN","SYNQLDM",20,0)
 S @G@(MAP,"CODE","2054-5","BLACK OR AFRICAN AMERICAN")=""
"RTN","SYNQLDM",21,0)
 S @G@(MAP,"CODE","2076-8","NATIVE HAWAIIAN OR OTHER PACIFIC ISLANDER")=""
"RTN","SYNQLDM",22,0)
 S @G@(MAP,"CODE","2106-3","WHITE")=""
"RTN","SYNQLDM",23,0)
 S @G@(MAP,"CODE","213101","DECLINED TO SPECIFY")=""
"RTN","SYNQLDM",24,0)
 S @G@(MAP,"CODE","9999-4","UNKNOWN BY PATIENT")=""
"RTN","SYNQLDM",25,0)
 ; ethnicity
"RTN","SYNQLDM",26,0)
 S MAP="ethnicity"
"RTN","SYNQLDM",27,0)
 S @G@(MAP,"CODE","21350-2","HISPANIC OR LATINO")=""
"RTN","SYNQLDM",28,0)
 S @G@(MAP,"CODE","2186-5","NOT HISPANIC OR LATINO")=""
"RTN","SYNQLDM",29,0)
 S @G@(MAP,"CODE","213101","DECLINED TO ANSWER")=""
"RTN","SYNQLDM",30,0)
 ; Health Factors - SNOMED
"RTN","SYNQLDM",31,0)
 S MAP="HF"
"RTN","SYNQLDM",32,0)
 S @G@(MAP,"CODE","4525004","ED [ARRIVAL-DEPARTURE] TIME")=""
"RTN","SYNQLDM",33,0)
 S @G@(MAP,"CODE","1748006","VTE COMFIRMED")=""
"RTN","SYNQLDM",34,0)
 S @G@(MAP,"CODE","10378005","TIME DECISION TO ADMIT MADE")=""
"RTN","SYNQLDM",35,0)
 S @G@(MAP,"CODE","225337009","SUICIDE RISK ASSESSMENT")=""
"RTN","SYNQLDM",36,0)
 S @G@(MAP,"CODE","428191000124101","DOCUMENTATION OF CURRENT MEDS")=""
"RTN","SYNQLDM",37,0)
 S @G@(MAP,"CODE","371530004","CLINICAL CONSULTATION REPORT")=""
"RTN","SYNQLDM",38,0)
 S @G@(MAP,"CODE","428171000124102","ADOLESCENT DEPRESSION SCREEN NEGATIVE")=""
"RTN","SYNQLDM",39,0)
 S @G@(MAP,"CODE","428231000124106","MATERNAL POSTPARTUM DEPRESSION CARE")=""
"RTN","SYNQLDM",40,0)
 S @G@(MAP,"CODE","428341000124108","MACULAR EDEMA ABSENT")=""
"RTN","SYNQLDM",41,0)
 S @G@(MAP,"CODE","193350004","MACULAR EDEMA PRESENT")=""
"RTN","SYNQLDM",42,0)
 S @G@(MAP,"CODE","417886001","TREATMENT ADJUSTED PER PROTOCOL")=""
"RTN","SYNQLDM",43,0)
 S @G@(MAP,"CODE","105480006","WRITTEN INFORMATION NOT GIVEN")=""
"RTN","SYNQLDM",44,0)
 S @G@(MAP,"CODE","413318004","WRITTEN INFORMATION GIVEN")=""
"RTN","SYNQLDM",45,0)
 S @G@(MAP,"CODE","226789007","BREAST MILK ADMINISTERED")=""
"RTN","SYNQLDM",46,0)
 S @G@(MAP,"CODE","105480006","PATIENT REFUSED TREATMENT")=""
"RTN","SYNQLDM",47,0)
 S @G@(MAP,"CODE","428171000124102","ADULT DEPRESSION SCREEN")=""
"RTN","SYNQLDM",48,0)
 S @G@(MAP,"CODE","183932001","PROCEDURE CONTRAINDICATED")=""
"RTN","SYNQLDM",49,0)
 ; Health Factors - LOINC
"RTN","SYNQLDM",50,0)
 S @G@(MAP,"CODE","38208-5","STANDARD PAIN ASSMNT TOOL")=""
"RTN","SYNQLDM",51,0)
 S @G@(MAP,"CODE","44249-1","PHQ-9 RESULT")=""
"RTN","SYNQLDM",52,0)
 S @G@(MAP,"CODE","71955-9","PROMIS-29: ")=""
"RTN","SYNQLDM",53,0)
 S @G@(MAP,"CODE","71938-5","MLHFQ")=""
"RTN","SYNQLDM",54,0)
 S @G@(MAP,"CODE","71955-9","PROMIS-29")=""
"RTN","SYNQLDM",55,0)
 S @G@(MAP,"CODE","58151-2","BIMS SCORE")=""
"RTN","SYNQLDM",56,0)
 S @G@(MAP,"CODE","73830-2","FALL RISK ASSESSMENT")=""
"RTN","SYNQLDM",57,0)
 S @G@(MAP,"CODE","73831-0","ADOLESCENT DEPRESSION SCREEN")=""
"RTN","SYNQLDM",58,0)
 S @G@(MAP,"CODE","73832-8","ADULT DEPRESSION SCREEN")=""
"RTN","SYNQLDM",59,0)
 S @G@(MAP,"CODE","69981-9","ASTHMA ACTION PLAN")=""
"RTN","SYNQLDM",60,0)
 ; Encounters - SNOMED
"RTN","SYNQLDM",61,0)
 S MAP="encounters"
"RTN","SYNQLDM",62,0)
 ;S @G@(MAP,"CODE","183452005","IP")=""
"RTN","SYNQLDM",63,0)
 S @G@(MAP,"CODE","185349003","OP")=""
"RTN","SYNQLDM",64,0)
 ;S @G@(MAP,"CODE","4525004","ER")=""
"RTN","SYNQLDM",65,0)
 ;S @G@(MAP,"CODE","10197000","PS")=""
"RTN","SYNQLDM",66,0)
 ;S @G@(MAP,"CODE","10378005","IP")=""
"RTN","SYNQLDM",67,0)
 S @G@(MAP,"CODE","108313002","OP")=""
"RTN","SYNQLDM",68,0)
 ;S @G@(MAP,"CODE","171047005","IO")=""
"RTN","SYNQLDM",69,0)
 ;S @G@(MAP,"CODE","32485007","IP")=""
"RTN","SYNQLDM",70,0)
 ;S @G@(MAP,"CODE","305351004","ICU")=""
"RTN","SYNQLDM",71,0)
 ;S @G@(MAP,"CODE","112689000","IP")=""
"RTN","SYNQLDM",72,0)
 ;S @G@(MAP,"CODE","8715000","IP")=""
"RTN","SYNQLDM",73,0)
 ; Encounters - CPT
"RTN","SYNQLDM",74,0)
 S @G@(MAP,"CODE","92002","OP")=""
"RTN","SYNQLDM",75,0)
 ;S @G@(MAP,"CODE","96150","PS")=""
"RTN","SYNQLDM",76,0)
 S @G@(MAP,"CODE","99201","OP")=""
"RTN","SYNQLDM",77,0)
 ;S @G@(MAP,"CODE","99285","ER")=""
"RTN","SYNQLDM",78,0)
 ;S @G@(MAP,"CODE","90791","PS")=""
"RTN","SYNQLDM",79,0)
 S @G@(MAP,"CODE","99202","OP")=""
"RTN","SYNQLDM",80,0)
 ;S @G@(MAP,"CODE","99285","ER")=""
"RTN","SYNQLDM",81,0)
 S @G@(MAP,"CODE","99381","OP")=""
"RTN","SYNQLDM",82,0)
 ; location
"RTN","SYNQLDM",83,0)
 S MAP="location"
"RTN","SYNQLDM",84,0)
 ;S @G@(MAP,"CODE","OP","CLINIC A")=""
"RTN","SYNQLDM",85,0)
 ;S @G@(MAP,"CODE","OP","VISTA HEALTH CARE")=""
"RTN","SYNQLDM",86,0)
 S @G@(MAP,"CODE","OP","GENERAL MEDICINE")=""
"RTN","SYNQLDM",87,0)
 S @G@(MAP,"CODE","ER","EMERGENCY DEPT")=""
"RTN","SYNQLDM",88,0)
 S @G@(MAP,"CODE","IP","CERT MED SURG")=""
"RTN","SYNQLDM",89,0)
 S @G@(MAP,"CODE","ICU","CERT ICU")=""
"RTN","SYNQLDM",90,0)
 S @G@(MAP,"CODE","PS","CLINIC A")=""
"RTN","SYNQLDM",91,0)
 ; roombed
"RTN","SYNQLDM",92,0)
 S MAP="roombed"
"RTN","SYNQLDM",93,0)
 S @G@(MAP,"CODE","IP","M1-A")=""
"RTN","SYNQLDM",94,0)
 S @G@(MAP,"CODE","ICU","1-A")=""
"RTN","SYNQLDM",95,0)
 S @G@(MAP,"CODE","PS","CLINIC PSYCHIATRY")=""
"RTN","SYNQLDM",96,0)
 ; provider
"RTN","SYNQLDM",97,0)
 S MAP="provider"
"RTN","SYNQLDM",98,0)
 ;S @G@(MAP,"CODE","OP","CQM,HISTORICAL MD")=""
"RTN","SYNQLDM",99,0)
 ;S @G@(MAP,"CODE","OP","USER,THREE")=""
"RTN","SYNQLDM",100,0)
 S @G@(MAP,"CODE","OP","9990000348")=""
"RTN","SYNQLDM",101,0)
 S @G@(MAP,"CODE","ER","CQM,HISTORICAL MD")=""
"RTN","SYNQLDM",102,0)
 S @G@(MAP,"CODE","IP","CQM,HISTORICAL MD")=""
"RTN","SYNQLDM",103,0)
 S @G@(MAP,"CODE","ICU","CQM,HISTORICAL MD")=""
"RTN","SYNQLDM",104,0)
 S @G@(MAP,"CODE","PS","CQM,HISTORICAL MD")=""
"RTN","SYNQLDM",105,0)
 ; admitting regulation
"RTN","SYNQLDM",106,0)
 S MAP="regs"
"RTN","SYNQLDM",107,0)
 S @G@(MAP,"CODE","IP","OBSERVATION (AND) EXAMINATION")=""
"RTN","SYNQLDM",108,0)
 S @G@(MAP,"CODE","ICU","OBSERVATION (AND) EXAMINATION")=""
"RTN","SYNQLDM",109,0)
 ; facility treating speciality
"RTN","SYNQLDM",110,0)
 S MAP="facilityTreatingSpeciality"
"RTN","SYNQLDM",111,0)
 S @G@(MAP,"CODE","IP","MEDICAL OBSERVATION")=""
"RTN","SYNQLDM",112,0)
 S @G@(MAP,"CODE","ICU","MEDICAL OBSERVATION")=""
"RTN","SYNQLDM",113,0)
 ; discharge type
"RTN","SYNQLDM",114,0)
 S MAP="dischargeType"
"RTN","SYNQLDM",115,0)
 S @G@(MAP,"CODE","10161009","DISCHARGE TO HOME OR POLICE CU")=""
"RTN","SYNQLDM",116,0)
 ; vitals
"RTN","SYNQLDM",117,0)
 S MAP="vitals"
"RTN","SYNQLDM",118,0)
 S @G@(MAP,"CODE","8462-4","BLOOD PRESSURE")=""
"RTN","SYNQLDM",119,0)
 S @G@(MAP,"CODE","8480-6","BLOOD PRESSURE")=""
"RTN","SYNQLDM",120,0)
 S @G@(MAP,"CODE","39156-5","BMI")=""
"RTN","SYNQLDM",121,0)
 ; VPatientEd
"RTN","SYNQLDM",122,0)
 S MAP="vPatientEd"
"RTN","SYNQLDM",123,0)
 S @G@(MAP,"CODE","11816003","DIET EDUCATION")=""
"RTN","SYNQLDM",124,0)
 S @G@(MAP,"CODE","171047005","DRUGS OF ADDICTION EDUCATION")=""
"RTN","SYNQLDM",125,0)
 ; consults
"RTN","SYNQLDM",126,0)
 S MAP="consults"
"RTN","SYNQLDM",127,0)
 S @G@(MAP,"CODE","103697008","DENTAL")=""
"RTN","SYNQLDM",128,0)
 S @G@(MAP,"CODE","171047005","PHYSICAL REHAB")=""
"RTN","SYNQLDM",129,0)
 ; rad orders - LOINC
"RTN","SYNQLDM",130,0)
 S MAP="rad"
"RTN","SYNQLDM",131,0)
 S @G@(MAP,"CODE","24533-2","ABDOMINAL VESSELS MRI ANGIOGRAM W/CON  IV")=""
"RTN","SYNQLDM",132,0)
 S @G@(MAP,"CODE","24604-1","BREAST MAMMOGRAM DIAGNOSTIC LIMITED")=""
"RTN","SYNQLDM",133,0)
 S @G@(MAP,"CODE","25031-6","BONE SCAN")=""
"RTN","SYNQLDM",134,0)
 S @G@(MAP,"CODE","24665-2","SACRUM AND COCCYX X-RAY")=""
"RTN","SYNQLDM",135,0)
 ; rad orders - SNOMED
"RTN","SYNQLDM",136,0)
 S @G@(MAP,"CODE","113094008","DIAGNOSTIC RADIOGRAPHY OF CHEST, LATERAL")=""
"RTN","SYNQLDM",137,0)
 S @G@(MAP,"CODE","168731009","CHEST XRAY")=""
"RTN","SYNQLDM",138,0)
 S @G@(MAP,"CODE","1748006","VTE Confirmed.")=""
"RTN","SYNQLDM",139,0)
 ; immunizations - CVX
"RTN","SYNQLDM",140,0)
 S MAP="immunizations"
"RTN","SYNQLDM",141,0)
 S @G@(MAP,"CODE","3","MEASLES,MUMPS,RUBELLA (MMR)")=""
"RTN","SYNQLDM",142,0)
 S @G@(MAP,"CODE","8","HEPATITIS B")=""
"RTN","SYNQLDM",143,0)
 S @G@(MAP,"CODE","10","POLIOMYELITIS")=""
"RTN","SYNQLDM",144,0)
 S @G@(MAP,"CODE","20","DIP-TET-a/PERT")=""
"RTN","SYNQLDM",145,0)
 S @G@(MAP,"CODE","21","VARICELLA")=""
"RTN","SYNQLDM",146,0)
 S @G@(MAP,"CODE","33","PNEUMOCOCCAL CONJUGATE PCV23")=""
"RTN","SYNQLDM",147,0)
 S @G@(MAP,"CODE","48","HIB,PRP-T")=""
"RTN","SYNQLDM",148,0)
 S @G@(MAP,"CODE","83","HEPA,PED/ADOL-2")=""
"RTN","SYNQLDM",149,0)
 S @G@(MAP,"CODE","104","HEPA/HEPB ADULT")=""
"RTN","SYNQLDM",150,0)
 S @G@(MAP,"CODE","111","FLU,NASAL")=""
"RTN","SYNQLDM",151,0)
 S @G@(MAP,"CODE","116","ROTOVIRUS,ORAL")=""
"RTN","SYNQLDM",152,0)
 S @G@(MAP,"CODE","140","INFLUENZA")=""
"RTN","SYNQLDM",153,0)
 ; immunizations - SNOMED
"RTN","SYNQLDM",154,0)
 S @G@(MAP,"CODE","442333005","INFLUENZA")=""
"RTN","SYNQLDM",155,0)
 ; VExam LOINC
"RTN","SYNQLDM",156,0)
 S MAP="vExam"
"RTN","SYNQLDM",157,0)
 S @G@(MAP,"CODE","24604-1","MAMMOGRAM")=""
"RTN","SYNQLDM",158,0)
 S @G@(MAP,"CODE","32451-7","MACULAR EXAM")=""
"RTN","SYNQLDM",159,0)
 S @G@(MAP,"CODE","44249-1","PHQ-9 RESULT")=""
"RTN","SYNQLDM",160,0)
 S @G@(MAP,"CODE","54108-6","NEONATAL HEARING EXAM")=""
"RTN","SYNQLDM",161,0)
 S @G@(MAP,"CODE","54109-4","NEONATAL HEARING EXAM")=""
"RTN","SYNQLDM",162,0)
 S @G@(MAP,"CODE","57254-5","FALL RISK ASSESSMENT")=""
"RTN","SYNQLDM",163,0)
 S @G@(MAP,"CODE","58151-2","BIMS SCORE")=""
"RTN","SYNQLDM",164,0)
 S @G@(MAP,"CODE","65853-4","CARDIOVASCULAR RISK")=""
"RTN","SYNQLDM",165,0)
 S @G@(MAP,"CODE","71484-0","CUP TO DISK RATIO EXAM")=""
"RTN","SYNQLDM",166,0)
 S @G@(MAP,"CODE","71486-5","OPTIC DISK EXAM")=""
"RTN","SYNQLDM",167,0)
 S @G@(MAP,"CODE","71938-5","MLHFQ")=""
"RTN","SYNQLDM",168,0)
 S @G@(MAP,"CODE","71955-9","PROMIS-29:")=""
"RTN","SYNQLDM",169,0)
 S @G@(MAP,"CODE","73831-0","ADOLESCENT DEPRESSION SCREEN NEGATIVE")=""
"RTN","SYNQLDM",170,0)
 ; VExam - SNOMED
"RTN","SYNQLDM",171,0)
 S @G@(MAP,"CODE","225337009","SUICIDE RISK ASSESSMENT")=""
"RTN","SYNQLDM",172,0)
 S @G@(MAP,"CODE","91161007","PULSE FOOT EXAM")=""
"RTN","SYNQLDM",173,0)
 S @G@(MAP,"CODE","134388005","DIABETIC FOOT EXAM")=""
"RTN","SYNQLDM",174,0)
 S @G@(MAP,"CODE","252779009","DILATED EYE EXAM")=""
"RTN","SYNQLDM",175,0)
 S @G@(MAP,"CODE","401191002","DIABETIC FOOT CHECK")=""
"RTN","SYNQLDM",176,0)
 S @G@(MAP,"CODE","419775003","VISION EXAM")=""
"RTN","SYNQLDM",177,0)
 S @G@(MAP,"CODE","412726003","LENGTH OF GESTATION AT BIRTH")=""
"RTN","SYNQLDM",178,0)
 S @G@(MAP,"CODE","44413500","ESTIMATED FETAL GESTATIONAL AGE")=""
"RTN","SYNQLDM",179,0)
 S @G@(MAP,"CODE","417491009","NEONATAL HEARING EXAM")=""
"RTN","SYNQLDM",180,0)
 ; VCPT - CPT
"RTN","SYNQLDM",181,0)
 S MAP="vCPT"
"RTN","SYNQLDM",182,0)
 S @G@(MAP,"CODE","99201","OP")=""
"RTN","SYNQLDM",183,0)
 S @G@(MAP,"CODE","90791","PS")=""
"RTN","SYNQLDM",184,0)
 S @G@(MAP,"CODE","99202","OP")=""
"RTN","SYNQLDM",185,0)
 S @G@(MAP,"CODE","99381","OP")=""
"RTN","SYNQLDM",186,0)
 ; VCPT - SNOMED
"RTN","SYNQLDM",187,0)
 S MAP="sct2cpt"
"RTN","SYNQLDM",188,0)
 S @G@(MAP,"CODE","308646001","99238")=""
"RTN","SYNQLDM",189,0)
 S @G@(MAP,"CODE","424441002","59426")=""
"RTN","SYNQLDM",190,0)
 S @G@(MAP,"CODE","183460006","99218")=""
"RTN","SYNQLDM",191,0)
 S @G@(MAP,"CODE","698314001","99241")=""
"RTN","SYNQLDM",192,0)
 S @G@(MAP,"CODE","424619006","59425")=""
"RTN","SYNQLDM",193,0)
 S @G@(MAP,"CODE","50849002","99281")=""
"RTN","SYNQLDM",194,0)
 S @G@(MAP,"CODE","185345009","99213")=""
"RTN","SYNQLDM",195,0)
 S @G@(MAP,"CODE","170258001","99383")=""
"RTN","SYNQLDM",196,0)
 S @G@(MAP,"CODE","10492003","55810")=""
"RTN","SYNQLDM",197,0)
 S @G@(MAP,"CODE","84755001","77427")=""
"RTN","SYNQLDM",198,0)
 S @G@(MAP,"CODE","234723000","D1206")=""
"RTN","SYNQLDM",199,0)
 S @G@(MAP,"CODE","10745001","59400")=""
"RTN","SYNQLDM",200,0)
 S @G@(MAP,"CODE","10178000","66840")=""
"RTN","SYNQLDM",201,0)
 S @G@(MAP,"CODE","105355005","99408")=""
"RTN","SYNQLDM",202,0)
 S @G@(MAP,"CODE","12350003","44388")=""
"RTN","SYNQLDM",203,0)
 S @G@(MAP,"CODE","15163009","27130")=""
"RTN","SYNQLDM",204,0)
 S @G@(MAP,"CODE","177184002","59409")=""
"RTN","SYNQLDM",205,0)
 S @G@(MAP,"CODE","179344006","27447")=""
"RTN","SYNQLDM",206,0)
 S @G@(MAP,"CODE","13767004","65235")=""
"RTN","SYNQLDM",207,0)
 S @G@(MAP,"CODE","108241001","90937")=""
"RTN","SYNQLDM",208,0)
 S @G@(MAP,"CODE","185349003","99202")=""
"RTN","SYNQLDM",209,0)
 S @G@(MAP,"CODE","442333005","90653")=""
"RTN","SYNQLDM",210,0)
 S @G@(MAP,"CODE","444783004","45378")=""
"RTN","SYNQLDM",211,0)
 S @G@(MAP,"CODE","4525004","99285")=""
"RTN","SYNQLDM",212,0)
 S @G@(MAP,"CODE","185349003","99381")=""
"RTN","SYNQLDM",213,0)
 ; labs
"RTN","SYNQLDM",214,0)
 S MAP="labs"
"RTN","SYNQLDM",215,0)
 S @G@(MAP,"CODE","2085-9","HDL CHOLESTEROL")=""
"RTN","SYNQLDM",216,0)
 S @G@(MAP,"CODE","34714-6","PT/INR")=""
"RTN","SYNQLDM",217,0)
 S @G@(MAP,"CODE","2093-3","CHOLESTEROL, TOTAL")=""
"RTN","SYNQLDM",218,0)
 S @G@(MAP,"CODE","12773-8","LDL CHOLESTEROL")=""
"RTN","SYNQLDM",219,0)
 S @G@(MAP,"CODE","13457-7","LDL CHOLESTEROL")=""
"RTN","SYNQLDM",220,0)
 S @G@(MAP,"CODE","13056-7","PLATELET COUNT")=""
"RTN","SYNQLDM",221,0)
 S @G@(MAP,"CODE","10524-7","PAP TEST")=""
"RTN","SYNQLDM",222,0)
 S @G@(MAP,"CODE","17856-6","HEMOGLOBIN A1C")=""
"RTN","SYNQLDM",223,0)
 S @G@(MAP,"CODE","17855-8","HEMOGLOBIN A1C")=""
"RTN","SYNQLDM",224,0)
 S @G@(MAP,"CODE","10508-0","PSA")=""
"RTN","SYNQLDM",225,0)
 S @G@(MAP,"CODE","10351-5","HIV 1 RNA")=""
"RTN","SYNQLDM",226,0)
 S @G@(MAP,"CODE","35266-6","GLEASON SCORE")=""
"RTN","SYNQLDM",227,0)
 S @G@(MAP,"CODE","24467-3","CD4 COUNT")=""
"RTN","SYNQLDM",228,0)
 S @G@(MAP,"CODE","20447-9","HIV 1 RNA")=""
"RTN","SYNQLDM",229,0)
 S @G@(MAP,"CODE","19080-1","PREGNANCY TEST")=""
"RTN","SYNQLDM",230,0)
 S @G@(MAP,"CODE","10674-0","HEPATITIS B SURFACE ANTIGEN")=""
"RTN","SYNQLDM",231,0)
 S @G@(MAP,"CODE","2093-3","CHOLESTEROL, TOTAL")=""
"RTN","SYNQLDM",232,0)
 S @G@(MAP,"CODE","12951-0","TRIGLYCERIDES")=""
"RTN","SYNQLDM",233,0)
 S @G@(MAP,"CODE","11268-0","STREPTOZYME")=""
"RTN","SYNQLDM",234,0)
 S @G@(MAP,"CODE","13217-5","CHLAMYDIA CULTURE")=""
"RTN","SYNQLDM",235,0)
 S @G@(MAP,"CODE","14463-4","CHLAMYDIA CULTURE")=""
"RTN","SYNQLDM",236,0)
 ; gmr allergies snomed to vuid
"RTN","SYNQLDM",237,0)
 S MAP="gmr-allergies"
"RTN","SYNQLDM",238,0)
 S @G@(MAP,"CODE",419474003,4636980)=""
"RTN","SYNQLDM",239,0)
 S @G@(MAP,"CODE",232347008,4637420)=""
"RTN","SYNQLDM",240,0)
 S @G@(MAP,"CODE",419263009,4636804)=""
"RTN","SYNQLDM",241,0)
 S @G@(MAP,"CODE",418689008,4637448)=""
"RTN","SYNQLDM",242,0)
 ;S @G@(MAP,"CODE",232350006) ; MITE POLEN
"RTN","SYNQLDM",243,0)
 S @G@(MAP,"CODE",300913006,4636953)=""
"RTN","SYNQLDM",244,0)
 S @G@(MAP,"CODE",424213003,4637407)=""
"RTN","SYNQLDM",245,0)
 S @G@(MAP,"CODE",91935009,4636971)=""
"RTN","SYNQLDM",246,0)
 S @G@(MAP,"CODE",91934008,4636976)=""
"RTN","SYNQLDM",247,0)
 S @G@(MAP,"CODE",417532002,4637301)=""
"RTN","SYNQLDM",248,0)
 S @G@(MAP,"CODE",300916003,4538971)=""
"RTN","SYNQLDM",249,0)
 S @G@(MAP,"CODE",91930004,4637287)=""
"RTN","SYNQLDM",250,0)
 S @G@(MAP,"CODE",420174000,4637435)=""
"RTN","SYNQLDM",251,0)
 S @G@(MAP,"CODE",425525006,4636665)=""
"RTN","SYNQLDM",252,0)
 S @G@(MAP,"CODE",714035009,4636951)=""
"RTN","SYNQLDM",253,0)
 ; rxnorm to vuid
"RTN","SYNQLDM",254,0)
 S MAP="rxnorm"
"RTN","SYNQLDM",255,0)
 S @G@(MAP,"CODE",1000097,4002480)=""
"RTN","SYNQLDM",256,0)
 S @G@(MAP,"CODE",313585,4012182)=""
"RTN","SYNQLDM",257,0)
 S @G@(MAP,"CODE",314153,4013783)=""
"RTN","SYNQLDM",258,0)
 S @G@(MAP,"CODE",692876,4025906)=""
"RTN","SYNQLDM",259,0)
 S @G@(MAP,"CODE",577154,4025018)=""
"RTN","SYNQLDM",260,0)
 S @G@(MAP,"CODE",860215,4003764)=""
"RTN","SYNQLDM",261,0)
 S @G@(MAP,"CODE",860221,4003765)=""
"RTN","SYNQLDM",262,0)
 S @G@(MAP,"CODE",151226,4024528)=""
"RTN","SYNQLDM",263,0)
 S @G@(MAP,"CODE",198029,4010104)=""
"RTN","SYNQLDM",264,0)
 S @G@(MAP,"CODE",198030,4010106)=""
"RTN","SYNQLDM",265,0)
 S @G@(MAP,"CODE",198031,4010105)=""
"RTN","SYNQLDM",266,0)
 S @G@(MAP,"CODE",198045,4001216)=""
"RTN","SYNQLDM",267,0)
 S @G@(MAP,"CODE",198046,4001218)=""
"RTN","SYNQLDM",268,0)
 S @G@(MAP,"CODE",198047,4001215)=""
"RTN","SYNQLDM",269,0)
 S @G@(MAP,"CODE",199888,4013030)=""
"RTN","SYNQLDM",270,0)
 S @G@(MAP,"CODE",199889,4013031)=""
"RTN","SYNQLDM",271,0)
 S @G@(MAP,"CODE",199890,4013032)=""
"RTN","SYNQLDM",272,0)
 S @G@(MAP,"CODE",205315,4013343)=""
"RTN","SYNQLDM",273,0)
 S @G@(MAP,"CODE",205316,4013342)=""
"RTN","SYNQLDM",274,0)
 S @G@(MAP,"CODE",250983,4013568)=""
"RTN","SYNQLDM",275,0)
 S @G@(MAP,"CODE",311975,4005637)=""
"RTN","SYNQLDM",276,0)
 S @G@(MAP,"CODE",312036,4001214)=""
"RTN","SYNQLDM",277,0)
 S @G@(MAP,"CODE",314119,4005636)=""
"RTN","SYNQLDM",278,0)
 S @G@(MAP,"CODE",317136,4001217)=""
"RTN","SYNQLDM",279,0)
 S @G@(MAP,"CODE",359817,4016739)=""
"RTN","SYNQLDM",280,0)
 S @G@(MAP,"CODE",359818,4016738)=""
"RTN","SYNQLDM",281,0)
 S @G@(MAP,"CODE",636671,4025534)=""
"RTN","SYNQLDM",282,0)
 S @G@(MAP,"CODE",636676,4025535)=""
"RTN","SYNQLDM",283,0)
 S @G@(MAP,"CODE",749289,4025532)=""
"RTN","SYNQLDM",284,0)
 S @G@(MAP,"CODE",749788,4025533)=""
"RTN","SYNQLDM",285,0)
 S @G@(MAP,"CODE",896100,4010112)=""
"RTN","SYNQLDM",286,0)
 S @G@(MAP,"CODE",966531,4017048)=""
"RTN","SYNQLDM",287,0)
 S @G@(MAP,"CODE",993503,4016940)=""
"RTN","SYNQLDM",288,0)
 S @G@(MAP,"CODE",993518,4017073)=""
"RTN","SYNQLDM",289,0)
 S @G@(MAP,"CODE",993536,4024749)=""
"RTN","SYNQLDM",290,0)
 S @G@(MAP,"CODE",993541,4026567)=""
"RTN","SYNQLDM",291,0)
 S @G@(MAP,"CODE",993550,4029871)=""
"RTN","SYNQLDM",292,0)
 S @G@(MAP,"CODE",993557,4026568)=""
"RTN","SYNQLDM",293,0)
 S @G@(MAP,"CODE",993567,4029870)=""
"RTN","SYNQLDM",294,0)
 S @G@(MAP,"CODE",993681,4029872)=""
"RTN","SYNQLDM",295,0)
 S @G@(MAP,"CODE",998671,4002473)=""
"RTN","SYNQLDM",296,0)
 S @G@(MAP,"CODE",998675,4002474)=""
"RTN","SYNQLDM",297,0)
 S @G@(MAP,"CODE",998679,4002475)=""
"RTN","SYNQLDM",298,0)
 N ZI
"RTN","SYNQLDM",299,0)
 S ZI=""
"RTN","SYNQLDM",300,0)
 F  S ZI=$O(@G@(ZI)) Q:ZI=""  D  ;
"RTN","SYNQLDM",301,0)
 . N ZJ S ZJ=""
"RTN","SYNQLDM",302,0)
 . F  S ZJ=$O(@G@(ZI,"CODE",ZJ)) Q:ZJ=""  D  ;
"RTN","SYNQLDM",303,0)
 . . N VAL
"RTN","SYNQLDM",304,0)
 . . S VAL=$O(@G@(ZI,"CODE",ZJ,""))
"RTN","SYNQLDM",305,0)
 . . S @G@(ZI,"VALUE",VAL,ZJ)=""
"RTN","SYNQLDM",306,0)
 . . S @G@("CODE",ZJ,VAL,ZI)=""
"RTN","SYNQLDM",307,0)
 . . S @G@("VALUE",VAL,ZJ,ZI)=""
"RTN","SYNQLDM",308,0)
 Q
"RTN","SYNQLDM",309,0)
 ;
"RTN","SYNQLDM",310,0)
MAP(CDE,MAP) ; extrinsic returns the Value for the Code in map MAP, which is optional
"RTN","SYNQLDM",311,0)
 N RTN
"RTN","SYNQLDM",312,0)
 N GN S GN=$NA(^XTMP("SYNQLD","MAPS"))
"RTN","SYNQLDM",313,0)
 I '$D(@GN) D INITMAPS
"RTN","SYNQLDM",314,0)
 I $G(CDE)="" Q ""
"RTN","SYNQLDM",315,0)
 I $G(MAP)="" D  Q RTN
"RTN","SYNQLDM",316,0)
 . S RTN=$O(@GN@("CODE",CDE,""))
"RTN","SYNQLDM",317,0)
 I '$D(@GN@(MAP)) S RTN="" Q RTN  ;
"RTN","SYNQLDM",318,0)
 S RTN=$O(@GN@(MAP,"CODE",CDE,""))
"RTN","SYNQLDM",319,0)
 I $O(@GN@(MAP,"CODE",CDE,RTN))'="" S RTN=-1 ; more than one match
"RTN","SYNQLDM",320,0)
 Q RTN
"RTN","SYNQLDM",321,0)
 ;
"RTN","SYNQLDM",322,0)
UNMAP(VAL,MAP) ; extrinsic returns the Value for the Code in map MAP, which is optional
"RTN","SYNQLDM",323,0)
 N RTN
"RTN","SYNQLDM",324,0)
 N GN S GN=$NA(^XTMP("SYNQLD","MAPS"))
"RTN","SYNQLDM",325,0)
 I '$D(MAP) D  Q RTN
"RTN","SYNQLDM",326,0)
 . S RTN=$O(@GN@("VALUE",VAL,""))
"RTN","SYNQLDM",327,0)
 I '$D(@GN@(MAP)) S RTN="" Q  ;
"RTN","SYNQLDM",328,0)
 S RTN=$O(@GN@(MAP,"VALUE",VAL,""))
"RTN","SYNQLDM",329,0)
 I $O(@GN@(MAP,"VALUE",VAL,RTN))'="" S RTN=-1 ; more than one match
"RTN","SYNQLDM",330,0)
 Q RTN
"RTN","SYNQLDM",331,0)
 ;
"RTN","SYNQLDM",332,0)
GETMAP(RTN,MAP) ; returns an array of the MAP. if MAP is not specified, it returns an
"RTN","SYNQLDM",333,0)
 ; array of the names of all the maps
"RTN","SYNQLDM",334,0)
 N GN S GN=$NA(^XTMP("SYNQLD","MAPS"))
"RTN","SYNQLDM",335,0)
 I '$D(MAP) D  Q  ;
"RTN","SYNQLDM",336,0)
 . N ZI S ZI=""
"RTN","SYNQLDM",337,0)
 . F  S ZI=$O(@GN@(ZI)) Q:ZI=""  D  ;
"RTN","SYNQLDM",338,0)
 . . Q:ZI="CODE"
"RTN","SYNQLDM",339,0)
 . . Q:ZI="VALUE"
"RTN","SYNQLDM",340,0)
 . . S @RTN@(ZI)=""
"RTN","SYNQLDM",341,0)
 I $D(@GN@(MAP)) M @RTN=@GN@(MAP)
"RTN","SYNQLDM",342,0)
 Q
"RTN","SYNQLDM",343,0)
 ;
"RTN","SYNVPR")
0^16^B106058173
"RTN","SYNVPR",1,0)
SYNVPR ; GPL - VPR viewing routines ; 2/24/18 4:39am
"RTN","SYNVPR",2,0)
 ;;0.1;QRDA LOADER;nopatch;noreleasedate;Build 2
"RTN","SYNVPR",3,0)
 ;
"RTN","SYNVPR",4,0)
 ; Authored by George P. Lilly 2013-2018
"RTN","SYNVPR",5,0)
 ;
"RTN","SYNVPR",6,0)
 Q
"RTN","SYNVPR",7,0)
 ;
"RTN","SYNVPR",8,0)
SELPART() ; extrinsic which returns the part of the VPR selected
"RTN","SYNVPR",9,0)
 N ZT
"RTN","SYNVPR",10,0)
 S ZT(1)="all"
"RTN","SYNVPR",11,0)
 S ZT(2)="demographics"
"RTN","SYNVPR",12,0)
 S ZT(3)="reactions"
"RTN","SYNVPR",13,0)
 S ZT(4)="problems"
"RTN","SYNVPR",14,0)
 S ZT(5)="vitals"
"RTN","SYNVPR",15,0)
 S ZT(6)="labs"
"RTN","SYNVPR",16,0)
 S ZT(7)="meds"
"RTN","SYNVPR",17,0)
 S ZT(8)="immunizations"
"RTN","SYNVPR",18,0)
 S ZT(9)="observation"
"RTN","SYNVPR",19,0)
 S ZT(10)="visits"
"RTN","SYNVPR",20,0)
 S ZT(11)="appointments"
"RTN","SYNVPR",21,0)
 S ZT(12)="documents"
"RTN","SYNVPR",22,0)
 S ZT(13)="procedures"
"RTN","SYNVPR",23,0)
 S ZT(14)="consults"
"RTN","SYNVPR",24,0)
 S ZT(15)="flags"
"RTN","SYNVPR",25,0)
 S ZT(16)="factors"
"RTN","SYNVPR",26,0)
 S ZT(17)="skinTests"
"RTN","SYNVPR",27,0)
 S ZT(18)="exams"
"RTN","SYNVPR",28,0)
 S ZT(19)="education"
"RTN","SYNVPR",29,0)
 S ZT(20)="insurance"
"RTN","SYNVPR",30,0)
 K DIR
"RTN","SYNVPR",31,0)
 S DIR(0)="SO^"
"RTN","SYNVPR",32,0)
 F ZI=1:1:20 S DIR(0)=DIR(0)_ZI_":"_ZT(ZI)_";"
"RTN","SYNVPR",33,0)
 S DIR("B")=1
"RTN","SYNVPR",34,0)
 S DIR("L")="Please select clinical category to view: "
"RTN","SYNVPR",35,0)
 S DIR("L",1)="1 all          6 labs          11 appointments 16 factors"
"RTN","SYNVPR",36,0)
 S DIR("L",2)="2 demographics 7 meds          12 documents    17 skinTests"
"RTN","SYNVPR",37,0)
 S DIR("L",3)="3 reactions    8 immunizations 13 procedures   18 exams"
"RTN","SYNVPR",38,0)
 S DIR("L",4)="4 problems     9 observation   14 consults     19 education"
"RTN","SYNVPR",39,0)
 S DIR("L",5)="5 vitals       10 visits       15 flags        20 insurance"
"RTN","SYNVPR",40,0)
 D ^DIR
"RTN","SYNVPR",41,0)
 Q ZT(X)
"RTN","SYNVPR",42,0)
 ;
"RTN","SYNVPR",43,0)
SELPART2() ; extrinsic which returns the part of the NHIN extract selected
"RTN","SYNVPR",44,0)
 N ZT
"RTN","SYNVPR",45,0)
 S ZT(1)="all"
"RTN","SYNVPR",46,0)
 S ZT(2)="patient"
"RTN","SYNVPR",47,0)
 S ZT(3)="allergy"
"RTN","SYNVPR",48,0)
 S ZT(4)="problem"
"RTN","SYNVPR",49,0)
 S ZT(5)="vital"
"RTN","SYNVPR",50,0)
 S ZT(6)="lab"
"RTN","SYNVPR",51,0)
 S ZT(7)="med"
"RTN","SYNVPR",52,0)
 S ZT(8)="immunization"
"RTN","SYNVPR",53,0)
 S ZT(9)="visit"
"RTN","SYNVPR",54,0)
 S ZT(10)="appointment"
"RTN","SYNVPR",55,0)
 S ZT(11)="procedure"
"RTN","SYNVPR",56,0)
 K DIR
"RTN","SYNVPR",57,0)
 S DIR(0)="SO^"
"RTN","SYNVPR",58,0)
 F ZI=1:1:11 S DIR(0)=DIR(0)_ZI_":"_ZT(ZI)_";"
"RTN","SYNVPR",59,0)
 S DIR("B")=1
"RTN","SYNVPR",60,0)
 S DIR("L")="Please select clinical category to view: "
"RTN","SYNVPR",61,0)
 S DIR("L",1)="1 all      6 lab          11 procedure"
"RTN","SYNVPR",62,0)
 S DIR("L",2)="2 patient  7 med          "
"RTN","SYNVPR",63,0)
 S DIR("L",3)="3 allergy  8 immunization"
"RTN","SYNVPR",64,0)
 S DIR("L",4)="4 problems 9 visit"
"RTN","SYNVPR",65,0)
 S DIR("L",5)="5 vitals   10 appointment"
"RTN","SYNVPR",66,0)
 D ^DIR
"RTN","SYNVPR",67,0)
 Q ZT(X)
"RTN","SYNVPR",68,0)
 ;
"RTN","SYNVPR",69,0)
gen 
"RTN","SYNVPR",70,0)
 S G="all;demographics;reactions;problems;vitals;labs;meds;immunizations;observation;visits;appointments;documents;procedures;consults;flags;factors;skinTests;exams;education;insurance"
"RTN","SYNVPR",71,0)
 S ZI=""
"RTN","SYNVPR",72,0)
 F ZI=1:1 Q:$P(G,";",ZI)=""  D  ;
"RTN","SYNVPR",73,0)
 . W !," S ZT("_ZI_")="""_$P(G,";",ZI)_""""
"RTN","SYNVPR",74,0)
 q
"RTN","SYNVPR",75,0)
 ;
"RTN","SYNVPR",76,0)
gen2 
"RTN","SYNVPR",77,0)
 S G="all;patient;allergy;problem;vital;lab;med;immunization;visit;appointment;procedure"
"RTN","SYNVPR",78,0)
 S ZI=""
"RTN","SYNVPR",79,0)
 F ZI=1:1 Q:$P(G,";",ZI)=""  D  ;
"RTN","SYNVPR",80,0)
 . W !," S ZT("_ZI_")="""_$P(G,";",ZI)_""""
"RTN","SYNVPR",81,0)
 q
"RTN","SYNVPR",82,0)
 ;
"RTN","SYNVPR",83,0)
PAT() ; extrinsic which returns a dfn from the patient selected
"RTN","SYNVPR",84,0)
 S DIC=2,DIC(0)="AEMQ" D ^DIC
"RTN","SYNVPR",85,0)
 I Y<1 Q  ; EXIT
"RTN","SYNVPR",86,0)
 S DFN=$P(Y,U,1) ; SET THE PATIENT
"RTN","SYNVPR",87,0)
 Q +Y
"RTN","SYNVPR",88,0)
 ;
"RTN","SYNVPR",89,0)
tree(where,prefix,docid,zout)   ; show a tree starting at a node in MXML. 
"RTN","SYNVPR",90,0)
 ; node is passed by name
"RTN","SYNVPR",91,0)
 ; 
"RTN","SYNVPR",92,0)
 i $g(prefix)="" s prefix="|--" ; starting prefix
"RTN","SYNVPR",93,0)
 i '$d(SYNJOB) s SYNJOB=$J
"RTN","SYNVPR",94,0)
 n node s node=$na(^TMP("MXMLDOM",SYNJOB,docid,where))
"RTN","SYNVPR",95,0)
 n txt s txt=$$CLEAN($$ALLTXT(node))
"RTN","SYNVPR",96,0)
 w:'$G(DIQUIET) !,prefix_@node_" "_txt
"RTN","SYNVPR",97,0)
 d oneout(zout,prefix_@node_" "_txt)
"RTN","SYNVPR",98,0)
 n zi s zi=""
"RTN","SYNVPR",99,0)
 f  s zi=$o(@node@("A",zi)) q:zi=""  d  ;
"RTN","SYNVPR",100,0)
 . w:'$G(DIQUIET) !,prefix_"  : "_zi_"^"_$g(@node@("A",zi))
"RTN","SYNVPR",101,0)
 . d oneout(zout,prefix_"  : "_zi_"^"_$g(@node@("A",zi)))
"RTN","SYNVPR",102,0)
 f  s zi=$o(@node@("C",zi)) q:zi=""  d  ;
"RTN","SYNVPR",103,0)
 . d tree(zi,"|  "_prefix,docid,zout)
"RTN","SYNVPR",104,0)
 q
"RTN","SYNVPR",105,0)
 ;
"RTN","SYNVPR",106,0)
oneout(zbuf,ztxt) ; adds a line to zbuf
"RTN","SYNVPR",107,0)
 n zi s zi=$o(@zbuf@(""),-1)+1
"RTN","SYNVPR",108,0)
 s @zbuf@(zi)=ztxt
"RTN","SYNVPR",109,0)
 q
"RTN","SYNVPR",110,0)
 ;
"RTN","SYNVPR",111,0)
ALLTXT(where)   ; extrinsic which returns all text lines from the node .. concatinated 
"RTN","SYNVPR",112,0)
 ; together
"RTN","SYNVPR",113,0)
 n zti s zti=""
"RTN","SYNVPR",114,0)
 n ztr s ztr=""
"RTN","SYNVPR",115,0)
 f  s zti=$o(@where@("T",zti)) q:zti=""  d  ;
"RTN","SYNVPR",116,0)
 . s ztr=ztr_$g(@where@("T",zti))
"RTN","SYNVPR",117,0)
 q ztr
"RTN","SYNVPR",118,0)
 ;
"RTN","SYNVPR",119,0)
CLEAN(STR)      ; extrinsic function; returns string - gpl borrowed from the CCR package
"RTN","SYNVPR",120,0)
 ;; Removes all non printable characters from a string.
"RTN","SYNVPR",121,0)
 ;; STR by Value
"RTN","SYNVPR",122,0)
 N TR,I
"RTN","SYNVPR",123,0)
 F I=0:1:31 S TR=$G(TR)_$C(I)
"RTN","SYNVPR",124,0)
 S TR=TR_$C(127)
"RTN","SYNVPR",125,0)
 N ZR S ZR=$TR(STR,TR)
"RTN","SYNVPR",126,0)
 S ZR=$$LDBLNKS(ZR) ; get rid of leading blanks
"RTN","SYNVPR",127,0)
 QUIT ZR
"RTN","SYNVPR",128,0)
 ;
"RTN","SYNVPR",129,0)
LDBLNKS(st)     ; extrinsic which removes leading blanks from a string
"RTN","SYNVPR",130,0)
 n pos f pos=1:1:$l(st)  q:$e(st,pos)'=" "
"RTN","SYNVPR",131,0)
 q $e(st,pos,$l(st))
"RTN","SYNVPR",132,0)
 ;
"RTN","SYNVPR",133,0)
show(what,docid,zout)   ;
"RTN","SYNVPR",134,0)
 I '$D(C0XJOB) S C0XJOB=$J
"RTN","SYNVPR",135,0)
 d tree(what,,docid,zout)
"RTN","SYNVPR",136,0)
 q
"RTN","SYNVPR",137,0)
 ; 
"RTN","SYNVPR",138,0)
GET(ZRTN,ZDFN,ZTYP) 
"RTN","SYNVPR",139,0)
 I ZTYP="all" S ZTYP=""
"RTN","SYNVPR",140,0)
 D GET^VPRD(.ZRTN,ZDFN,ZTYP,,$$NOW^XLFDT)
"RTN","SYNVPR",141,0)
 Q
"RTN","SYNVPR",142,0)
 ;
"RTN","SYNVPR",143,0)
GET2(ZRTN,ZDFN,ZTYP) 
"RTN","SYNVPR",144,0)
 I ZTYP="all" S ZTYP=""
"RTN","SYNVPR",145,0)
 ;D GET^VPRD(.ZRTN,ZDFN,ZTYP)
"RTN","SYNVPR",146,0)
 D GET^KBAINHIN(.ZRTN,ZDFN,ZTYP) ; CALL NHINV ROUTINES TO PULL XML
"RTN","SYNVPR",147,0)
 Q
"RTN","SYNVPR",148,0)
 ;
"RTN","SYNVPR",149,0)
PARSE(INXML) ; 
"RTN","SYNVPR",150,0)
 K ^TMP("MXMLERR",$J)
"RTN","SYNVPR",151,0)
 Q $$EN^MXMLDOM(INXML,"W")
"RTN","SYNVPR",152,0)
 ;
"RTN","SYNVPR",153,0)
VPR ;
"RTN","SYNVPR",154,0)
 N ZDFN,ZTYPE
"RTN","SYNVPR",155,0)
 ;N ZTMP
"RTN","SYNVPR",156,0)
 S ZDFN=$$PAT()
"RTN","SYNVPR",157,0)
 S ZTYPE=$$SELPART()
"RTN","SYNVPR",158,0)
 D GET(.ZTMP,ZDFN,ZTYPE)
"RTN","SYNVPR",159,0)
 N DOCID
"RTN","SYNVPR",160,0)
 S DOCID=$$PARSE(.ZTMP)
"RTN","SYNVPR",161,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",162,0)
 D show(1,DOCID,GN)
"RTN","SYNVPR",163,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_ZDFN_" "_ZTYPE)
"RTN","SYNVPR",164,0)
 K @GN,^TMP("MXMLDOM",$J),^TMP("VPR",$J),GN
"RTN","SYNVPR",165,0)
 q
"RTN","SYNVPR",166,0)
 ;
"RTN","SYNVPR",167,0)
wsVPR(VPR,FILTER) ; get from web service call
"RTN","SYNVPR",168,0)
 I '$D(DT) N DIQUIET S DIQUIET=1 D DT^DICRW
"RTN","SYNVPR",169,0)
 N ZDFN,ZTYPE
"RTN","SYNVPR",170,0)
 ;N ZTMP
"RTN","SYNVPR",171,0)
 S ZDFN=$G(FILTER("patientId"))
"RTN","SYNVPR",172,0)
 I ZDFN="" S ZDFN=$G(FILTER("patientID"))
"RTN","SYNVPR",173,0)
 I ZDFN="" S ZDFN=$G(FILTER("patientid"))
"RTN","SYNVPR",174,0)
 I ZDFN="" S ZDFN=$G(FILTER("dfn"))
"RTN","SYNVPR",175,0)
 I ZDFN="" D  ;
"RTN","SYNVPR",176,0)
 . N ICN S ICN=$G(FILTER("icn"))
"RTN","SYNVPR",177,0)
 . I ICN="" Q  ;
"RTN","SYNVPR",178,0)
 . S ZDFN=$O(^DPT("AFICN",ICN,""))
"RTN","SYNVPR",179,0)
 I ZDFN="" D  ; try ien
"RTN","SYNVPR",180,0)
 . N IEN S IEN=$G(FILTER("ien"))
"RTN","SYNVPR",181,0)
 . I IEN="" Q  ;
"RTN","SYNVPR",182,0)
 . S ZDFN=$$ien2dfn^SYNFUTL(IEN)
"RTN","SYNVPR",183,0)
 I ZDFN="" S ZDFN=2
"RTN","SYNVPR",184,0)
 S ZTYPE=$G(FILTER("domain"),"all")
"RTN","SYNVPR",185,0)
 D GET(.ZTMP,ZDFN,ZTYPE)
"RTN","SYNVPR",186,0)
 I $G(FILTER("format"))="xml" D  Q  ;
"RTN","SYNVPR",187,0)
 . S HTTPRSP("mime")="text/xml"
"RTN","SYNVPR",188,0)
 . M VPR=ZTMP
"RTN","SYNVPR",189,0)
 N DOCID
"RTN","SYNVPR",190,0)
 S DOCID=$$PARSE(.ZTMP)
"RTN","SYNVPR",191,0)
 S HTTPRSP("mime")="text/html"
"RTN","SYNVPR",192,0)
 S VPR=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",193,0)
 K @VPR
"RTN","SYNVPR",194,0)
 S @VPR="<!DOCTYPE HTML><html><head></head><body><pre>"
"RTN","SYNVPR",195,0)
 D show(1,DOCID,VPR)
"RTN","SYNVPR",196,0)
 S @VPR@($O(@VPR@(""),-1)+1)="</pre></body></html>"
"RTN","SYNVPR",197,0)
 D ADDCRLF^VPRJRUT(.VPR)
"RTN","SYNVPR",198,0)
 ;D BROWSE^DDBR(GN,"N","PATIENT "_ZDFN_" "_ZTYPE)
"RTN","SYNVPR",199,0)
 ;K @GN,^TMP("MXMLDOM",$J),^TMP("VPR",$J),GN
"RTN","SYNVPR",200,0)
 q
"RTN","SYNVPR",201,0)
 ;
"RTN","SYNVPR",202,0)
NHIN ;
"RTN","SYNVPR",203,0)
 N ZDFN,ZTYPE
"RTN","SYNVPR",204,0)
 ;N ZTMP
"RTN","SYNVPR",205,0)
 S ZDFN=$$PAT()
"RTN","SYNVPR",206,0)
 S ZTYPE=$$SELPART2()
"RTN","SYNVPR",207,0)
 D GET2(.ZTMP,ZDFN,ZTYPE)
"RTN","SYNVPR",208,0)
 N DOCID
"RTN","SYNVPR",209,0)
 S DOCID=$$PARSE(.ZTMP)
"RTN","SYNVPR",210,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",211,0)
 D show(1,DOCID,GN)
"RTN","SYNVPR",212,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_ZDFN_" "_ZTYPE)
"RTN","SYNVPR",213,0)
 K @GN,^TMP("MXMLDOM",$J),^TMP("VPR",$J),GN
"RTN","SYNVPR",214,0)
 q
"RTN","SYNVPR",215,0)
 ;
"RTN","SYNVPR",216,0)
LABS ;
"RTN","SYNVPR",217,0)
 S DFN=$$PAT()
"RTN","SYNVPR",218,0)
 K OUT
"RTN","SYNVPR",219,0)
 D LIST^C0CLABS
"RTN","SYNVPR",220,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",221,0)
 K @GN
"RTN","SYNVPR",222,0)
 M @GN=OUT
"RTN","SYNVPR",223,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" LABS FROM CCR PACKAGE")
"RTN","SYNVPR",224,0)
 K @GN
"RTN","SYNVPR",225,0)
 Q
"RTN","SYNVPR",226,0)
 ; 
"RTN","SYNVPR",227,0)
CCRXML ;
"RTN","SYNVPR",228,0)
 S DFN=$$PAT()
"RTN","SYNVPR",229,0)
 K OUT
"RTN","SYNVPR",230,0)
 D CCRRPC^C0CCCR(.OUT,DFN)
"RTN","SYNVPR",231,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",232,0)
 K @GN
"RTN","SYNVPR",233,0)
 M @GN=OUT
"RTN","SYNVPR",234,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" CCR XML")
"RTN","SYNVPR",235,0)
 K @GN
"RTN","SYNVPR",236,0)
 Q
"RTN","SYNVPR",237,0)
 ; 
"RTN","SYNVPR",238,0)
CCR ;
"RTN","SYNVPR",239,0)
 S DFN=$$PAT()
"RTN","SYNVPR",240,0)
 N ZTMP
"RTN","SYNVPR",241,0)
 D CCRRPC^C0CCCR(.ZTMP,DFN)
"RTN","SYNVPR",242,0)
 K ZTMP(0)
"RTN","SYNVPR",243,0)
 N ZCCR S ZCCR=$NA(^TMP("SYNVPR","CCR"))
"RTN","SYNVPR",244,0)
 K @ZCCR
"RTN","SYNVPR",245,0)
 M @ZCCR=ZTMP
"RTN","SYNVPR",246,0)
 N DOCID
"RTN","SYNVPR",247,0)
 S DOCID=$$PARSE(ZCCR)
"RTN","SYNVPR",248,0)
 I $D(^TMP("MXMLERR",$J)) D  ;
"RTN","SYNVPR",249,0)
 . ;ZWR ^TMP("MXMLERR",$J,*)
"RTN","SYNVPR",250,0)
 . B  
"RTN","SYNVPR",251,0)
 I DOCID=0 B  ;
"RTN","SYNVPR",252,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",253,0)
 K @GN
"RTN","SYNVPR",254,0)
 D show(1,DOCID,GN)
"RTN","SYNVPR",255,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" CCR XML")
"RTN","SYNVPR",256,0)
 K @GN,@ZCCR
"RTN","SYNVPR",257,0)
 Q
"RTN","SYNVPR",258,0)
 ; 
"RTN","SYNVPR",259,0)
CCDA ;
"RTN","SYNVPR",260,0)
 S DFN=$$PAT()
"RTN","SYNVPR",261,0)
 N ZTMP
"RTN","SYNVPR",262,0)
 D CCDARPC^KBAICDA(.ZTMP,DFN)
"RTN","SYNVPR",263,0)
 K ZTMP(0)
"RTN","SYNVPR",264,0)
 N ZCCDA S ZCCDA=$NA(^TMP("SYNVPR",$J,"CCDA"))
"RTN","SYNVPR",265,0)
 K @ZCCDA
"RTN","SYNVPR",266,0)
 M @ZCCDA=@ZTMP
"RTN","SYNVPR",267,0)
 N DOCID
"RTN","SYNVPR",268,0)
 S DOCID=$$PARSE(ZCCDA)
"RTN","SYNVPR",269,0)
 I $D(^TMP("MXMLERR",$J)) D  ;
"RTN","SYNVPR",270,0)
 . ;ZWR ^TMP("MXMLERR",$J,*)
"RTN","SYNVPR",271,0)
 . B  
"RTN","SYNVPR",272,0)
 I DOCID=0 B  ;
"RTN","SYNVPR",273,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",274,0)
 K @GN
"RTN","SYNVPR",275,0)
 D show(1,DOCID,GN)
"RTN","SYNVPR",276,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" CCDA XML")
"RTN","SYNVPR",277,0)
 K @GN,@ZCCDA
"RTN","SYNVPR",278,0)
 Q
"RTN","SYNVPR",279,0)
 ; 
"RTN","SYNVPR",280,0)
listm(out,in) ; out is passed by name in is passed by reference
"RTN","SYNVPR",281,0)
 n i s i=$q(@in@(""))
"RTN","SYNVPR",282,0)
 f  s i=$q(@i) q:i=""  d oneout^SYNVPR(out,i_"="_@i)
"RTN","SYNVPR",283,0)
 q
"RTN","SYNVPR",284,0)
 ;
"RTN","SYNVPR",285,0)
SMART ; 
"RTN","SYNVPR",286,0)
 S DFN=$$PAT()
"RTN","SYNVPR",287,0)
 S ZTYPE=$$SELPART2()
"RTN","SYNVPR",288,0)
 K G,OUT
"RTN","SYNVPR",289,0)
 D EN^C0SMART(.G,DFN,ZTYPE,"raw")
"RTN","SYNVPR",290,0)
 S GN=$NA(^TMP("SYNOUT",$J))
"RTN","SYNVPR",291,0)
 K @GN
"RTN","SYNVPR",292,0)
 D listm(GN,"G")
"RTN","SYNVPR",293,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" SMART MUMPS ARRAY")
"RTN","SYNVPR",294,0)
 K @GN,G,OUT
"RTN","SYNVPR",295,0)
 Q 
"RTN","SYNVPR",296,0)
 ;
"RTN","SYNVPR",297,0)
SMARTRDF ; 
"RTN","SYNVPR",298,0)
 S DFN=$$PAT()
"RTN","SYNVPR",299,0)
 S ZTYPE=$$SELPART2()
"RTN","SYNVPR",300,0)
 K G,OUT
"RTN","SYNVPR",301,0)
 D EN^C0SMART(.G,DFN,ZTYPE,"rdf")
"RTN","SYNVPR",302,0)
 N ZRDF S ZRDF=$NA(^TMP("SYNVPR","RDF"))
"RTN","SYNVPR",303,0)
 K @ZRDF
"RTN","SYNVPR",304,0)
 M @ZRDF=G
"RTN","SYNVPR",305,0)
 N DOCID
"RTN","SYNVPR",306,0)
 S DOCID=$$PARSE(ZRDF)
"RTN","SYNVPR",307,0)
 I $D(^TMP("MXMLERR",$J)) D  ;
"RTN","SYNVPR",308,0)
 . ;ZWR ^TMP("MXMLERR",$J,*)
"RTN","SYNVPR",309,0)
 . B  
"RTN","SYNVPR",310,0)
 I DOCID=0 B  ;
"RTN","SYNVPR",311,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",312,0)
 K @GN
"RTN","SYNVPR",313,0)
 D show(1,DOCID,GN)
"RTN","SYNVPR",314,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_DFN_" RDF XML")
"RTN","SYNVPR",315,0)
 K @GN,@ZRDF
"RTN","SYNVPR",316,0)
 Q 
"RTN","SYNVPR",317,0)
 ;
"RTN","SYNVPR",318,0)
VPRM ;
"RTN","SYNVPR",319,0)
 N ZDFN,ZTYPE
"RTN","SYNVPR",320,0)
 N ZTMP
"RTN","SYNVPR",321,0)
 S ZDFN=$$PAT()
"RTN","SYNVPR",322,0)
 S ZTYPE=$$SELPART()
"RTN","SYNVPR",323,0)
 D GETPAT^SYNVPRE(.ZTMP,ZDFN,ZTYPE)
"RTN","SYNVPR",324,0)
 S GN=$NA(^TMP("VPROUT",$J))
"RTN","SYNVPR",325,0)
 K @GN
"RTN","SYNVPR",326,0)
 D listm(GN,"ZTMP")
"RTN","SYNVPR",327,0)
 D BROWSE^DDBR(GN,"N","PATIENT "_ZDFN_" "_ZTYPE)
"RTN","SYNVPR",328,0)
 K @GN,^TMP("VPR",$J),GN
"RTN","SYNVPR",329,0)
 q
"RTN","SYNVPR",330,0)
 ;
"RTN","SYNVPR",331,0)
wsGLOBAL(OUT,FILTER) ; dump a global to the browser as an html page
"RTN","SYNVPR",332,0)
 I '$D(DT) N DIQUIET S DIQUIET=1 D DT^DICRW
"RTN","SYNVPR",333,0)
 S HTTPRSP("mime")="text/html"
"RTN","SYNVPR",334,0)
 S OUT=$NA(^TMP("SYNOUT",$J))
"RTN","SYNVPR",335,0)
 K @OUT
"RTN","SYNVPR",336,0)
 N ROOT S ROOT=$G(FILTER("root"))
"RTN","SYNVPR",337,0)
 Q:ROOT=""
"RTN","SYNVPR",338,0)
 S ROOT="^"_ROOT
"RTN","SYNVPR",339,0)
 N ORIG,OL S ORIG=ROOT,OL=$QL(ROOT) ; Orig, Orig Length
"RTN","SYNVPR",340,0)
 F  S ROOT=$Q(@ROOT) Q:$G(ROOT)=""  Q:$NA(@ROOT,OL)'=$NA(@ORIG,OL)  D
"RTN","SYNVPR",341,0)
 . S @OUT@($O(@OUT@(""),-1)+1)=ROOT_"="_$$CLEAN(@ROOT)
"RTN","SYNVPR",342,0)
 S @OUT="<!DOCTYPE HTML><html><head></head><body><pre>"
"RTN","SYNVPR",343,0)
 S @OUT@($O(@OUT@(""),-1)+1)="</pre></body></html>"
"RTN","SYNVPR",344,0)
 D ADDCRLF^VPRJRUT(.OUT)
"RTN","SYNVPR",345,0)
 Q
"RTN","SYNVPR",346,0)
 ;
"RTN","SYNVPR",347,0)
GTREE(ROOT,DEPTH,PREFIX,LVL) ; show a global in a tree
"RTN","SYNVPR",348,0)
 I $G(PREFIX)="" S PREFIX="|--" ; STARTING PREFIX
"RTN","SYNVPR",349,0)
 I '$D(DEPTH) S DEPTH=1 ; USUALLY THIS IS WHAT WE WANT
"RTN","SYNVPR",350,0)
 I +$G(LVL)>DEPTH Q  ; ONLY GO THAT DEEP
"RTN","SYNVPR",351,0)
 N ZGI S ZGI=""
"RTN","SYNVPR",352,0)
 N ZVAL S ZVAL=$G(@ROOT)
"RTN","SYNVPR",353,0)
 I $G(LVL)="" W !,ROOT_" "_$G(@ROOT@(0))
"RTN","SYNVPR",354,0)
 F  S ZGI=$O(@ROOT@(ZGI)) Q:ZGI=""  D  ;
"RTN","SYNVPR",355,0)
 . I $O(@ROOT@(ZGI,""))'="" D  ;
"RTN","SYNVPR",356,0)
 . . I $G(@ROOT@(ZGI))'="" W !,PREFIX_ZGI_" ",@ROOT@(ZGI)
"RTN","SYNVPR",357,0)
 . . E  W !,PREFIX_ZGI_" ",$G(@ROOT@(ZGI,0))
"RTN","SYNVPR",358,0)
 . E  W !,PREFIX_ZGI_" "_$G(@ROOT@(ZGI))
"RTN","SYNVPR",359,0)
 . D GTREE($NA(@ROOT@(ZGI)),DEPTH,"|  "_PREFIX,+$G(LVL)+1)
"RTN","SYNVPR",360,0)
 Q
"RTN","SYNVPR",361,0)
 ; 
"VER")
8.0^22.2
**END**
**END**
